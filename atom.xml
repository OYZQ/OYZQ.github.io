<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OuYang&#39;blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-09T12:58:45.978Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>OuYang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javaScript正则表达式（内附最全的常用正则表达式）</title>
    <link href="http://yoursite.com/2019/05/10/javaScript%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E5%86%85%E9%99%84%E6%9C%80%E5%85%A8%E7%9A%84%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%89/"/>
    <id>http://yoursite.com/2019/05/10/javaScript正则表达式（内附最全的常用正则表达式）/</id>
    <published>2019-05-10T02:11:06.177Z</published>
    <updated>2019-05-09T12:58:45.978Z</updated>
    
    <content type="html"><![CDATA[<p>﻿### JavaScript 正则表达式</p><hr><p><strong>正则表达式</strong>（英语：Regular Expression，在代码中常简写为regex、regexp或RE）使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式。</p><p>搜索模式可用于文本搜索和文本替换。</p><hr><h4 id="什么是正则表达式？"><a href="#什么是正则表达式？" class="headerlink" title="什么是正则表达式？"></a>什么是正则表达式？</h4><p>正则表达式是由一个字符序列形成的搜索模式。<br>当你在文本中搜索数据时，你可以用搜索模式来描述你要查询的内容。<br>正则表达式可以是一个简单的字符，或一个更复杂的模式。<br>正则表达式可用于所有文本搜索和文本替换的操作。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/pattern/modifiers;</span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patt = <span class="regexp">/hello/i</span></span><br></pre></td></tr></table></figure><p><strong>实例解析</strong>：</p><p>/hello/i  是一个正则表达式。<br>hello  是一个模式 (用于检索匹配关键字)。<br>i  是一个修饰符 (搜索不区分大小写)。</p><hr><p><strong>使用字符串方法</strong></p><p>在 JavaScript 中，正则表达式通常用于两个字符串方法 : <strong>search()</strong> 和 <strong>replace()</strong>。</p><p><strong>search()</strong> 方法 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子字符串的<strong>起始位置</strong>。</p><p><strong>replace()</strong> 方法 用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子字符串。</p><hr><h5 id="search-方法使用"><a href="#search-方法使用" class="headerlink" title="search() 方法使用"></a>search() 方法使用</h5><p>使用正则表达式搜索 “make” 字符串，且不区分大小写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Visit make"</span>;</span><br><span class="line"><span class="keyword">var</span> n = str.search(<span class="regexp">/make/i</span>);</span><br><span class="line"><span class="comment">//结果：6</span></span><br></pre></td></tr></table></figure><p>search 方法可使用字符串作为参数。字符串参数会转换为正则表达式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Visit make"</span>;</span><br><span class="line"><span class="keyword">var</span> n = str.search(<span class="string">"make"</span>);</span><br><span class="line"><span class="comment">//结果：6</span></span><br></pre></td></tr></table></figure><hr><h5 id="replace-方法使用"><a href="#replace-方法使用" class="headerlink" title="replace() 方法使用"></a>replace() 方法使用</h5><p>使用正则表达式且不区分大小写将字符串中的 Microsoft 替换为 make :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Visit Microsoft!"</span>;</span><br><span class="line"><span class="keyword">var</span> res = str.replace(<span class="regexp">/microsoft/i</span>, <span class="string">"make"</span>);</span><br><span class="line"><span class="comment">//结果：Visit make!</span></span><br></pre></td></tr></table></figure><p>replace() 方法将接收字符串作为参数：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var str</span> = <span class="string">"Visit Microsoft!"</span>;</span><br><span class="line"><span class="attribute">var res</span> = str.replace(<span class="string">"Microsoft"</span>, <span class="string">"make"</span>);</span><br></pre></td></tr></table></figure><hr><h4 id="正则表达式修饰符"><a href="#正则表达式修饰符" class="headerlink" title="正则表达式修饰符"></a>正则表达式修饰符</h4><p><strong>修饰符</strong> 可以在全局搜索中不区分大小写:<br><img src="https://img-blog.csdnimg.cn/20190408122324407.png" alt="在这里插入图片描述"><hr><br><strong>正则表达式模式</strong></p><p>方括号用于查找某个范围内的字符：<br><img src="https://img-blog.csdnimg.cn/20190408122521988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h3><h5 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> 数字：^[<span class="number">0</span><span class="number">-9</span>]*$</span><br><span class="line"> <span class="number">2</span> n位的数字：^\d&#123;n&#125;$</span><br><span class="line"> <span class="number">3</span> 至少n位的数字：^\d&#123;n,&#125;$</span><br><span class="line"> <span class="number">4</span> m-n位的数字：^\d&#123;m,n&#125;$</span><br><span class="line"> <span class="number">5</span> 零和非零开头的数字：^(<span class="number">0</span>|[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)$</span><br><span class="line"> <span class="number">6</span> 非零开头的最多带两位小数的数字：^([<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)+(.[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?$</span><br><span class="line"> <span class="number">7</span> 带<span class="number">1</span><span class="number">-2</span>位小数的正数或负数：^(\-)?\d+(\.\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?$</span><br><span class="line"> <span class="number">8</span> 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$</span><br><span class="line"> <span class="number">9</span> 有两位小数的正实数：^[<span class="number">0</span><span class="number">-9</span>]+(.[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">2</span>&#125;)?$</span><br><span class="line"><span class="number">10</span> 有<span class="number">1</span>~<span class="number">3</span>位小数的正实数：^[<span class="number">0</span><span class="number">-9</span>]+(.[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;)?$</span><br><span class="line"><span class="number">11</span> 非零的正整数：^[<span class="number">1</span><span class="number">-9</span>]\d*$ 或 ^([<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)&#123;<span class="number">1</span>,<span class="number">3</span>&#125;$ 或 ^\+?[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*$</span><br><span class="line"><span class="number">12</span> 非零的负整数：^\-[<span class="number">1</span><span class="number">-9</span>][]<span class="number">0</span><span class="number">-9</span><span class="string">"*$ 或 ^-[1-9]\d*$</span></span><br><span class="line"><span class="string">13 非负整数：^\d+$ 或 ^[1-9]\d*|0$</span></span><br><span class="line"><span class="string">14 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</span></span><br><span class="line"><span class="string">15 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</span></span><br><span class="line"><span class="string">16 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</span></span><br><span class="line"><span class="string">17 正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</span></span><br><span class="line"><span class="string">18 负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</span></span><br><span class="line"><span class="string">19 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</span></span><br></pre></td></tr></table></figure><h5 id="二、校验字符的表达式"><a href="#二、校验字符的表达式" class="headerlink" title="二、校验字符的表达式"></a>二、校验字符的表达式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> 汉字：^[\u4e00-\u9fa5]&#123;<span class="number">0</span>,&#125;$</span><br><span class="line"> <span class="number">2</span> 英文和数字：^[A-Za-z0<span class="number">-9</span>]+$ 或 ^[A-Za-z0<span class="number">-9</span>]&#123;<span class="number">4</span>,<span class="number">40</span>&#125;$</span><br><span class="line"> <span class="number">3</span> 长度为<span class="number">3</span><span class="number">-20</span>的所有字符：^.&#123;<span class="number">3</span>,<span class="number">20</span>&#125;$</span><br><span class="line"> <span class="number">4</span> 由<span class="number">26</span>个英文字母组成的字符串：^[A-Za-z]+$</span><br><span class="line"> <span class="number">5</span> 由<span class="number">26</span>个大写英文字母组成的字符串：^[A-Z]+$</span><br><span class="line"> <span class="number">6</span> 由<span class="number">26</span>个小写英文字母组成的字符串：^[a-z]+$</span><br><span class="line"> <span class="number">7</span> 由数字和<span class="number">26</span>个英文字母组成的字符串：^[A-Za-z0<span class="number">-9</span>]+$</span><br><span class="line"> <span class="number">8</span> 由数字、<span class="number">26</span>个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w&#123;<span class="number">3</span>,<span class="number">20</span>&#125;$</span><br><span class="line"> <span class="number">9</span> 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0<span class="number">-9</span>_]+$</span><br><span class="line"><span class="number">10</span> 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0<span class="number">-9</span>]+$ 或 ^[\u4E00-\u9FA5A-Za-z0<span class="number">-9</span>]&#123;<span class="number">2</span>,<span class="number">20</span>&#125;$</span><br><span class="line"><span class="number">11</span> 可以输入含有^%&amp;<span class="string">',;=?$\"等字符：[^%&amp;'</span>,;=?$\x22]+</span><br><span class="line"><span class="number">12</span> 禁止输入含有~的字符：[^~\x22]+</span><br></pre></td></tr></table></figure><h5 id="三、特殊需求表达式"><a href="#三、特殊需求表达式" class="headerlink" title="三、特殊需求表达式"></a>三、特殊需求表达式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</span><br><span class="line"> <span class="number">2</span> 域名：[a-zA-Z0<span class="number">-9</span>][-a-zA-Z0<span class="number">-9</span>]&#123;<span class="number">0</span>,<span class="number">62</span>&#125;(<span class="regexp">/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/</span>.?</span><br><span class="line"> <span class="number">3</span> InternetURL：[a-zA-z]+:<span class="comment">//[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</span></span><br><span class="line"> <span class="number">4</span> 手机号码：^(<span class="number">13</span>[<span class="number">0</span><span class="number">-9</span>]|<span class="number">14</span>[<span class="number">0</span><span class="number">-9</span>]|<span class="number">15</span>[<span class="number">0</span><span class="number">-9</span>]|<span class="number">16</span>[<span class="number">0</span><span class="number">-9</span>]|<span class="number">17</span>[<span class="number">0</span><span class="number">-9</span>]|<span class="number">18</span>[<span class="number">0</span><span class="number">-9</span>]|<span class="number">19</span>[<span class="number">0</span><span class="number">-9</span>])\d&#123;<span class="number">8</span>&#125;$ (由于工信部放号段不定时，所以建议使用泛解析 ^([<span class="number">1</span>][<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])\d&#123;<span class="number">9</span>&#125;$)</span><br><span class="line"> <span class="number">5</span> 电话号码(<span class="string">"XXX-XXXXXXX"</span>、<span class="string">"XXXX-XXXXXXXX"</span>、<span class="string">"XXX-XXXXXXX"</span>、<span class="string">"XXX-XXXXXXXX"</span>、<span class="string">"XXXXXXX"</span>和<span class="string">"XXXXXXXX)：^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$ </span></span><br><span class="line"><span class="string"> 6 国内电话号码(0511-4405222、021-87888822)：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125; </span></span><br><span class="line"><span class="string"> 7 18位身份证号码(数字、字母x结尾)：^((\d&#123;18&#125;)|([0-9x]&#123;18&#125;)|([0-9X]&#123;18&#125;))$</span></span><br><span class="line"><span class="string"> 8 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$</span></span><br><span class="line"><span class="string"> 9 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;5,17&#125;$</span></span><br><span class="line"><span class="string">10 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$  </span></span><br><span class="line"><span class="string">11 日期格式：^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;</span></span><br><span class="line"><span class="string">12 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</span></span><br><span class="line"><span class="string">13 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$ </span></span><br><span class="line"><span class="string">14 钱的输入格式：</span></span><br><span class="line"><span class="string">15    1.有四种钱的表示形式我们可以接受:"</span><span class="number">10000.00</span><span class="string">" 和 "</span><span class="number">10</span>,<span class="number">000.00</span><span class="string">", 和没有 "</span>分<span class="string">" 的 "</span><span class="number">10000</span><span class="string">" 和 "</span><span class="number">10</span>,<span class="number">000</span><span class="string">"：^[1-9][0-9]*$ </span></span><br><span class="line"><span class="string">16    2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符"</span><span class="number">0</span><span class="string">"不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$ </span></span><br><span class="line"><span class="string">17    3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$ </span></span><br><span class="line"><span class="string">18    4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ </span></span><br><span class="line"><span class="string">19    5.必须说明的是,小数点后面至少应该有1位数,所以"</span><span class="number">10.</span><span class="string">"是不通过的,但是 "</span><span class="number">10</span><span class="string">" 和 "</span><span class="number">10.2</span><span class="string">" 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$ </span></span><br><span class="line"><span class="string">20    6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$ </span></span><br><span class="line"><span class="string">21    7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$ </span></span><br><span class="line"><span class="string">22    8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$ </span></span><br><span class="line"><span class="string">23    备注：这就是最终结果了,别忘了"</span>+<span class="string">"可以用"</span>*<span class="string">"替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</span></span><br><span class="line"><span class="string">24 xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$</span></span><br><span class="line"><span class="string">25 中文字符的正则表达式：[\u4e00-\u9fa5]</span></span><br><span class="line"><span class="string">26 双字节字符：[^\x00-\xff]    (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</span></span><br><span class="line"><span class="string">27 空白行的正则表达式：\n\s*\r    (可以用来删除空白行)</span></span><br><span class="line"><span class="string">28 HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt;    (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</span></span><br><span class="line"><span class="string">29 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$)    (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</span></span><br><span class="line"><span class="string">30 腾讯QQ号：[1-9][0-9]&#123;4,&#125;    (腾讯QQ号从10000开始)</span></span><br><span class="line"><span class="string">31 中国邮政编码：[1-9]\d&#123;5&#125;(?!\d)    (中国邮政编码为6位数字)</span></span><br><span class="line"><span class="string">32 IP地址：\d+\.\d+\.\d+\.\d+    (提取IP地址时有用)</span></span><br><span class="line"><span class="string">33 IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</span></span><br></pre></td></tr></table></figure><p>参考文章：<a href="https://www.w3cschool.cn/javascript/js-regexp.html" target="_blank" rel="noopener">https://www.w3cschool.cn/javascript/js-regexp.html</a><br><a href="http://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html" target="_blank" rel="noopener">http://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿### JavaScript 正则表达式&lt;/p&gt;
&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;正则表达式&lt;/strong&gt;（英语：Regular Expression，在代码中常简写为regex、regexp或RE）使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式。
      
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>javaScript里的闭包到底是什么？该怎么理解？</title>
    <link href="http://yoursite.com/2019/05/10/javaScript%E9%87%8C%E7%9A%84%E9%97%AD%E5%8C%85%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E8%AF%A5%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3%EF%BC%9F/"/>
    <id>http://yoursite.com/2019/05/10/javaScript里的闭包到底是什么？该怎么理解？/</id>
    <published>2019-05-10T02:10:45.630Z</published>
    <updated>2019-05-09T13:00:00.666Z</updated>
    
    <content type="html"><![CDATA[<p>﻿关于javaScript里的闭包问题，看了很多答案都不甚理解，在这里我谈谈我理解里的闭包。<br>在理解闭包是什么之前我需要先理解什么是作用域。</p><h2 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h2><p>打开一个 js ，随便写了一行代码，这行代码所在的位置就会是全局作用域（global scope）。比如：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i =<span class="number">1</span>;<span class="comment">//全局作用域在代码任何位置都可以使用，一篇代码只有一个全局作用域</span></span><br></pre></td></tr></table></figure><h2 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h2><p>全局作用域只有一个，在全局使用域里面定义的其它的作用域都被称为局部作用域（local scope）。局部作用域是由函数创建的，每个函数都会创建一个局部作用域。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作用域 A: 全局作用域（位于函数外部）</span></span><br><span class="line"><span class="selector-tag">var</span> nameA = <span class="string">"全局作用域"</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> = function() &#123;</span><br><span class="line">  <span class="comment">// 作用域 B：局部作用域(在函数内部)</span></span><br><span class="line">  <span class="comment">// 这里是的局部作用域是由函数a创建的 </span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">var</span> nameB = <span class="string">'局部作用域'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个局部作用域里面定义的东西，在这个作用域的外面是访问不到的。试一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nameA = <span class="string">"全局作用域"</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> nameB = <span class="string">'局部作用域'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(nameA)</span><br><span class="line"><span class="comment">// 返回：全局作用域</span></span><br><span class="line"><span class="built_in">console</span>.log(nameB)</span><br><span class="line"><span class="comment">//返回：undefined</span></span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>了解了作用域接下来我讲一讲闭包</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>维基百科：在计算机科学中，闭包（Closure），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。</p><p><strong>上面的定义看的有点懵，那我说说我的看法</strong>：在我看来，不是说能够访问到其他作用域的变量就是闭包，这是很笼统的。准确来说，闭包是基于正常的垃圾回收处理机制下的。也就是说，一般情况一个函数（函数作用域）执行完毕，里面声明的变量会全部释放，被垃圾回收器回收。但闭包利用一个技巧，让作用域里面的变量，在函数执行完之后依旧保存没有被垃圾回收处理掉。</p><p>还是有点懵？那贴上一段代码来看看：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">(x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(y)</span> </span>&#123;</span><br><span class="line">        alert(x + y + (++a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = fn(<span class="number">2</span>); <span class="comment">// bar 现在是一个闭包</span></span><br><span class="line">bar(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>我们来看看这段代码，我们声明了一个函数fn，在到var bar = fn(2)开始执行函fn(2)，由于只传入一个参数2，所以执行到return function(y)这一行代码会停下等参数y传入，但是这个时候我们想想a变量和参数回收了吗？其实并没有，因为return function(y)这一行代码还未执行，还在等待参数y传入。f n的变量并没有被释放，在return在等待继续使用这些变量了，这个时候bar就是一个闭包。这时候在看看维基百科的解释是不是有些明白了？</p><p><strong>闭包的缺点</strong></p><pre><code>1 因为闭包的变量保存在内存中，内存泄漏，对内存的消耗很大，所以不要滥用闭包</code></pre><p><strong>闭包常用的地方：</strong><br>    1 es5 for循环事件监听<br>    2 函数里使用了定时器<br>    3 封装许多高级的功能集<br>减少闭包使用可以用立即执行函数传递变量</p><p>参考：<a href="https://www.cnblogs.com/JIANGCHEN520/p/7118656.html" target="_blank" rel="noopener">https://www.cnblogs.com/JIANGCHEN520/p/7118656.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿关于javaScript里的闭包问题，看了很多答案都不甚理解，在这里我谈谈我理解里的闭包。&lt;br&gt;在理解闭包是什么之前我需要先理解什么是作用域。&lt;/p&gt;
&lt;h2 id=&quot;全局作用域&quot;&gt;&lt;a href=&quot;#全局作用域&quot; class=&quot;headerlink&quot; title=&quot;全
      
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="闭包" scheme="http://yoursite.com/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>for和for in的区别</title>
    <link href="http://yoursite.com/2019/05/10/for%E4%B8%8Efor%20in%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/05/10/for与for in的区别/</id>
    <published>2019-05-10T01:21:56.338Z</published>
    <updated>2019-05-09T04:32:21.520Z</updated>
    
    <content type="html"><![CDATA[<p>从学习C语言开始就学习了遍历，for更是用的特别熟悉。在javascript中除了有for循环还有for in，刚开始接触for in的时候总是把他当for来使用。感觉没什么区别然而在最近写项目时遇到了这个for in才知悉了他与for的不同，果然还是实践出真知。下面先简单介绍一下for 和 for in吧：</p><h2 id="for的语法结构："><a href="#for的语法结构：" class="headerlink" title="for的语法结构："></a>for的语法结构：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="keyword">for</span>( 初始值;判断条件;步幅)&#123; code &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i =<span class="number">0</span>;i&lt;<span class="number">5</span>;i++ )&#123;</span><br><span class="line">　　<span class="comment">//i初始值为0；i是否小写5；每次循环后i加1</span></span><br><span class="line">　　<span class="built_in">console</span>.log(i);<span class="comment">//  0  1  2  3  4</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="for-in的写法："><a href="#for-in的写法：" class="headerlink" title="for in的写法："></a>for in的写法：</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"></span><br><span class="line">var man = &#123;</span><br><span class="line">　　<span class="attribute">age:21,</span></span><br><span class="line">　　name:"张三",</span><br><span class="line">　　<span class="attribute">sex:"男"</span></span><br><span class="line"><span class="attribute">&#125;</span></span><br><span class="line"><span class="attribute">console.log(man);</span></span><br><span class="line"><span class="attribute">//结果：Object</span></span><br><span class="line">age: 21</span><br><span class="line"><span class="attribute">name</span>: "张三"</span><br><span class="line"><span class="attribute">sex</span>: "男"</span><br><span class="line"><span class="attribute">__proto__</span>: Object</span><br></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> <span class="keyword">man</span>)&#123;<span class="comment">//attr是属性，attr可以换成任意变量名</span></span><br><span class="line">　　console.<span class="built_in">log</span>(attr);<span class="comment">//  输出的是 属性名：age  name  sex</span></span><br><span class="line">　　console.<span class="built_in">log</span>(wq[attr]);<span class="comment">//属性相对应的值  20  咸鱼  男</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里我相信有些人已经看明白了。不过我还是多嘴说一下吧，上面的for循环就是我们常用的方法用来遍历,十分简单的操作。而下面的for in呢？他一般时用来遍历对象的，在我的理解看来，for 循环可以遍历一个数组属于一维，而for in遍历对象，对象有多个属性，各个属性又有各自 的值相当于二位数组了。在上面的案例里面，想要获取对象的属性相应的值for是遍历不了的，这个时候for in就出场了。但使用for in的时候还要注意几个小问题：</p><p>而for in就不同了，上面的案例中，对象wq里有三个属性和相对应的值，想要获取到这三个属性及相对应的值for是办不到的，只有for in才可以，所以说，for in一般都是用在遍历对象的，另外，for in也可以遍历数组，但是会存在以下几个问题。</p><p><strong>1、 for in这种循环i是string类型的，不能直接进行几何运算<br>2、遍历顺序有可能不是按照实际数组的内部顺序<br>3、使用for in会遍历数组所有的可枚举属性，包括原型。例如上栗的原型方法method和name属性<br>4、简而言之，for-in是为普通对象设计的，你可以遍历得到字符串类型的键，因此不适用于数组遍历。</strong></p><p> 所以说for in也有他的局限性，因此遍历一般的数组用for比较好，遍历对象就需要for in了</p><h2 id="最后附上一个小案例"><a href="#最后附上一个小案例" class="headerlink" title="最后附上一个小案例"></a>最后附上一个小案例</h2><p> <img src="https://img-blog.csdnimg.cn/20190323183404310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从学习C语言开始就学习了遍历，for更是用的特别熟悉。在javascript中除了有for循环还有for in，刚开始接触for in的时候总是把他当for来使用。感觉没什么区别然而在最近写项目时遇到了这个for in才知悉了他与for的不同，果然还是实践出真知。下面先简单
      
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="for in" scheme="http://yoursite.com/tags/for-in/"/>
    
  </entry>
  
  <entry>
    <title>Ajax发送get_post请求的基本格式模板以及验证用户是否存在案例</title>
    <link href="http://yoursite.com/2019/05/10/Ajax%E5%8F%91%E9%80%81get_post%E8%AF%B7%E6%B1%82%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A0%BC%E5%BC%8F%E6%A8%A1%E6%9D%BF%E4%BB%A5%E5%8F%8A%E9%AA%8C%E8%AF%81%E7%94%A8%E6%88%B7%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E6%A1%88%E4%BE%8B/"/>
    <id>http://yoursite.com/2019/05/10/Ajax发送get_post请求的基本格式模板以及验证用户是否存在案例/</id>
    <published>2019-05-10T01:21:56.334Z</published>
    <updated>2019-05-09T04:36:42.872Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Ajax发送get/post请求主要分为以下4步：</strong></p><h6 id="1-创建对象"><a href="#1-创建对象" class="headerlink" title="1.创建对象"></a>1.创建对象</h6><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="type">XMLHttpRequest</span>();</span><br></pre></td></tr></table></figure><h6 id="2-设置请求行"><a href="#2-设置请求行" class="headerlink" title="2.设置请求行"></a>2.设置请求行</h6><pre><code>//（get请求数据写在url后面）open(&apos;method&apos;,&apos;url&apos;,&apos;async&apos;);/*method:请求的类型：GET或POST  * url:文件在服务器上的位置  * async:true(异步)或false(同步),默认true  * */xhr.open(&apos;get&apos;,&apos;getData.php&apos;，true);</code></pre><h6 id="3-设置请求头"><a href="#3-设置请求头" class="headerlink" title="3.设置请求头"></a>3.设置请求头</h6><pre><code>//（get请求可以省略，post不发数据也可以省略）xhr.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);</code></pre><h6 id="4-请求主体发送"><a href="#4-请求主体发送" class="headerlink" title="4.请求主体发送"></a>4.请求主体发送</h6><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//get请求为空，或者写<span class="literal">null</span>，post请求数据写在这里，如果没有数据，直接为空或者写<span class="literal">null</span></span><br><span class="line"> xhr.<span class="built_in">send</span>(<span class="literal">null</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>为了方便理解，下面我贴一个验证用户是否存在的小案例：</p><h3 id="前端部分代码"><a href="#前端部分代码" class="headerlink" title="前端部分代码"></a>前端部分代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//什么时候发送请求？onblur:失去焦点</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>).onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//1.创建对象</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//2.设置请求行</span></span></span><br><span class="line"><span class="actionscript">        xhr.open(<span class="string">'get'</span>,<span class="string">'checkName.php?name='</span>+<span class="keyword">this</span>.value);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//3.设置请求头（此处用get请求可以省略）</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// xhr.setRequestHeader();</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//这里是设置回调函数</span></span></span><br><span class="line"><span class="actionscript">        xhr.onload = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.querySelector(<span class="string">'h2'</span>).innerHTML = xhr.responseText;<span class="comment">//呈现给用户看</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//4.请求主体发送（get请求为空，或者写null）</span></span></span><br><span class="line"><span class="actionscript">        xhr.send(<span class="literal">null</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="后端部分代码"><a href="#后端部分代码" class="headerlink" title="后端部分代码"></a>后端部分代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="comment">//获取数据</span></span></span><br><span class="line"><span class="php">$name = $_GET[<span class="string">'name'</span>];</span></span><br><span class="line"><span class="php"><span class="comment">//用数组模拟数据库</span></span></span><br><span class="line"><span class="php">$nameArr = <span class="keyword">array</span>(<span class="string">'jack'</span>,<span class="string">'rose'</span>,<span class="string">'nike'</span>);</span></span><br><span class="line"><span class="php"><span class="comment">//在数据库中查询数据，in_array（要查询的数据名，在哪个数据库查询）</span></span></span><br><span class="line"><span class="php">$result = in_array($name,$nameArr);</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>($result == <span class="keyword">true</span>)&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">'很遗憾，已被使用'</span>;</span></span><br><span class="line"><span class="php">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">'恭喜你，可以使用'</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>查询前</strong><br><img src="https://img-blog.csdnimg.cn/20190329121908340.png" alt="在这里插入图片描述"><br><strong>查询rose(数据库中存在)</strong><br><img src="https://img-blog.csdnimg.cn/20190329122002272.png" alt="在这里插入图片描述"><br><strong>查询Tom(数据库中不存在)</strong><br><img src="https://img-blog.csdnimg.cn/20190329122054700.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Ajax发送get/post请求主要分为以下4步：&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&quot;1-创建对象&quot;&gt;&lt;a href=&quot;#1-创建对象&quot; class=&quot;headerlink&quot; title=&quot;1.创建对象&quot;&gt;&lt;/a&gt;1.创建对象&lt;/h6&gt;&lt;figure
      
    
    </summary>
    
      <category term="Ajax" scheme="http://yoursite.com/categories/Ajax/"/>
    
    
      <category term="_get_post" scheme="http://yoursite.com/tags/get-post/"/>
    
  </entry>
  
</feed>
