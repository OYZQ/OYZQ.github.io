<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OuYang&#39;blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-28T12:48:49.248Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>OuYang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一个例子弄懂事件冒泡和事件捕获</title>
    <link href="http://yoursite.com/2019/10/28/%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E5%BC%84%E6%87%82%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E5%92%8C%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7/"/>
    <id>http://yoursite.com/2019/10/28/一个例子弄懂事件冒泡和事件捕获/</id>
    <published>2019-10-28T12:46:00.377Z</published>
    <updated>2019-10-28T12:48:49.248Z</updated>
    
    <content type="html"><![CDATA[<h2 id="先看一张图"><a href="#先看一张图" class="headerlink" title="先看一张图"></a>先看一张图</h2><p>先看这张图，然后我们用例子来理解。<br><img src="https://img-blog.csdnimg.cn/20191028203913996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h1><p>事件按照从最特定的事件目标到最不特定的事件目标(document对象)的顺序触发。<br>事件冒泡会从当前触发的事件目标一级一级往上传递，依次触发，直到document为止。</p><h3 id="事件冒泡例子"><a href="#事件冒泡例子" class="headerlink" title="事件冒泡例子"></a>事件冒泡例子</h3><p>层级关系：body&gt;div&gt;p 给body，div,p分别绑定点击事件，console.log()出body,div,p;<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>事件冒泡<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">body&#123;</span></span><br><span class="line"><span class="undefined">background-color: red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">div &#123;</span></span><br><span class="line"><span class="undefined">width: 500px;</span></span><br><span class="line"><span class="undefined">height: 500px;</span></span><br><span class="line"><span class="undefined">background-color: aqua;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">p &#123;</span></span><br><span class="line"><span class="undefined">width: 100px;</span></span><br><span class="line"><span class="undefined">height: 100px;</span></span><br><span class="line"><span class="undefined">background-color: royalblue;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">window.onload = function()&#123;</span></span><br><span class="line"><span class="undefined">document.getElementById('body').addEventListener('click',body,false)</span></span><br><span class="line"><span class="undefined">document.getElementById('div').addEventListener('click',div,false)</span></span><br><span class="line"><span class="undefined">document.getElementById('p').addEventListener('click',p,false)</span></span><br><span class="line"><span class="undefined">function body() &#123;</span></span><br><span class="line"><span class="undefined">console.log('body')</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">function div() &#123;</span></span><br><span class="line"><span class="undefined">console.log('body')</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">function p() &#123;</span></span><br><span class="line"><span class="undefined">console.log('p')</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">"body"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>点击p时打印结果如下：<br><img src="https://img-blog.csdnimg.cn/20191028202733783.png" alt="在这里插入图片描述"><br>由结果可以看出：事件冒泡会从当前触发的事件目标一级一级往上传递，依次触发，直到document为止。</p><h2 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h2><p>捕获型事件(event capturing)：事件从最不精确的对象(document 对象)开始触发，然后到最精确(也可以在窗口级别捕获事件，不过必须由开发人员特别指定)<br>事件捕获会从document开始触发，一级一级往下传递，依次触发，直到真正事件目标为止。</p><p>这时将addEventListener的第三个参数改为true 再次点击：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'body'</span>).addEventListener(<span class="string">'click'</span>,body,<span class="literal">true</span>)</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'div'</span>).addEventListener(<span class="string">'click'</span>,div,<span class="literal">true</span>)</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'p'</span>).addEventListener(<span class="string">'click'</span>,p,<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>结果如图：<br><img src="https://img-blog.csdnimg.cn/20191028203816932.png" alt="在这里插入图片描述"><br>由此可以得出：事件捕获会从document开始触发，一级一级往下传递，依次触发，直到真正事件目标为止。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;先看一张图&quot;&gt;&lt;a href=&quot;#先看一张图&quot; class=&quot;headerlink&quot; title=&quot;先看一张图&quot;&gt;&lt;/a&gt;先看一张图&lt;/h2&gt;&lt;p&gt;先看这张图，然后我们用例子来理解。&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn
      
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="事件冒泡和事件捕获" scheme="http://yoursite.com/tags/%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E5%92%8C%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7/"/>
    
  </entry>
  
  <entry>
    <title>ES6新语法</title>
    <link href="http://yoursite.com/2019/10/22/ES6%E6%96%B0%E8%AF%AD%E6%B3%95%E6%B1%87%E6%80%BB/"/>
    <id>http://yoursite.com/2019/10/22/ES6新语法汇总/</id>
    <published>2019-10-22T07:38:18.824Z</published>
    <updated>2019-10-22T07:38:58.768Z</updated>
    
    <content type="html"><![CDATA[<p>﻿# ES6新语法</p><ul><li><a href="#hello-es6">hello-es6</a><ul><li><a href="#1es6%E6%80%8E%E4%B9%88%E6%9D%A5%E7%9A%84">1.ES6怎么来的</a></li><li><a href="#2es6%E5%85%BC%E5%AE%B9%E6%80%A7">2.ES6兼容性</a></li><li><a href="#3%E5%8F%98%E9%87%8F-let-%E5%92%8C-%E5%B8%B8%E9%87%8F-const">3.变量 let 和 常量 const</a></li><li><a href="#4%E5%87%BD%E6%95%B0-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0">4.函数-箭头函数</a></li><li><a href="#5%E5%87%BD%E6%95%B0-%E5%8F%82%E6%95%B0">5.函数-参数</a></li><li><a href="#6%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC">6.解构赋值</a></li><li><a href="#7%E6%95%B0%E7%BB%84">7.数组</a></li><li><a href="#8%E5%AD%97%E7%AC%A6%E4%B8%B2">8.字符串</a></li><li><a href="#9%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%9F%BA%E7%A1%80">9.面向对象-基础</a></li><li><a href="#10%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%BA%94%E7%94%A8">10.面向对象应用</a></li><li><a href="#11json">11.json</a></li><li><a href="#12promise">12.Promise</a></li><li><a href="#13generator-%E8%AE%A4%E8%AF%86%E7%94%9F%E6%88%90%E5%99%A8%E5%87%BD%E6%95%B0">13.generator-认识生成器函数</a></li><li><a href="#14generator-yield%E6%98%AF%E5%95%A5">14.generator-yield是啥</a></li><li><a href="#15generator-%E5%AE%9E%E4%BE%8B">15.generator-实例</a></li><li><a href="#16es7-%E9%A2%84%E8%A7%88">16.ES7 预览</a></li></ul></li></ul><hr><h2 id="1-ES6怎么来的"><a href="#1-ES6怎么来的" class="headerlink" title="1.ES6怎么来的"></a>1.ES6怎么来的</h2><ul><li><p>ECMAScript 和 JavaScript</p><ul><li>ECMA 是标准，JS 是实现</li><li>ECMAScript 简称 ECMA 或 ES</li></ul></li><li><p>历史版本</p><ul><li>1996, ES1.0 Netscape 将 JS 提交给 ECMA 组织，ES 正式出现</li><li>1999, ES3.0 被广泛支持</li><li>2011, ES5.1 成为 ISO 国际标准</li><li>2015, ES6.0 正式发布</li></ul></li></ul><h2 id="2-ES6兼容性"><a href="#2-ES6兼容性" class="headerlink" title="2.ES6兼容性"></a>2.ES6兼容性</h2><ul><li>ES6(ES2015) 支持的环境 IE10+, Chrome, FireFox, 移动端, NodeJS</li><li><p>解决不兼容办法，编译、转换</p><ul><li>在线转换</li><li>或者提前编译</li></ul></li><li><p><a href="https://www.babeljs.cn" target="_blank" rel="noopener">Babel 中文网</a></p><ul><li><a href="http://www.ruanyifeng.com/blog/2016/01/babel.html" target="_blank" rel="noopener">Babel 入门教程 阮一峰</a></li><li>Babel 是一个 JavaScript 编译器</li><li>一个广泛使用的转码器，可以将ES6代码转为ES5代码，从而在现有环境执行</li><li>现在就用 ES6 编写程序，而不用担心现有环境是否支持</li></ul></li></ul><h2 id="3-变量-let-和-常量-const"><a href="#3-变量-let-和-常量-const" class="headerlink" title="3.变量 let 和 常量 const"></a>3.变量 let 和 常量 const</h2><ul><li><p>var 的问题</p><ul><li>可以重复声明，没有报错和警告</li><li>无法限制修改</li><li>没有块级作用域， <code>{ }</code></li></ul></li><li><p>let 和 const</p><ul><li>不能重复声明</li><li>都是块级作用域, <code>{ }</code> 块内声明的，块外无效</li><li>let 是变量，可以修改</li><li>const 是常量，不能修改</li></ul></li><li><p>块级作用域举例</p><ul><li>原来用 var 的方式，结果弹出的都是 3</li><li>或者将变量 封装到函数里，限制作用域，但比较麻烦</li><li>用 let 最简单，直接 var 改 let，解决作用域问题</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        window.onload= function () &#123;</span></span><br><span class="line"><span class="undefined">            /*</span></span><br><span class="line"><span class="undefined">            var aBtn = document.getElementsByTagName('input')</span></span><br><span class="line"><span class="undefined">            for (var i=0; i &lt; aBtn.length; i++) &#123;</span></span><br><span class="line"><span class="undefined">                aBtn[i].onclick = function () &#123;</span></span><br><span class="line"><span class="undefined">                    alert(i)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;*/</span></span><br><span class="line"><span class="undefined">            var aBtn = document.getElementsByTagName('input')</span></span><br><span class="line"><span class="undefined">            for (let i = 0; i &lt; aBtn.length; i++) &#123;</span></span><br><span class="line"><span class="undefined">                aBtn[i].onclick = function () &#123;</span></span><br><span class="line"><span class="undefined">                    alert(i)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            /*</span></span><br><span class="line"><span class="undefined">            var aBtn = document.getElementsByTagName('input')</span></span><br><span class="line"><span class="undefined">            for (var i = 0; i &lt; aBtn.length; i++) &#123;</span></span><br><span class="line"><span class="undefined">                // 封装到函数里，限制作用域</span></span><br><span class="line"><span class="undefined">                (function (i) &#123;</span></span><br><span class="line"><span class="undefined">                    aBtn[i].onclick = function () &#123;</span></span><br><span class="line"><span class="undefined">                        alert(i)</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;)(i)</span></span><br><span class="line"><span class="undefined">            &#125;*/</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-函数-箭头函数"><a href="#4-函数-箭头函数" class="headerlink" title="4.函数-箭头函数"></a>4.函数-箭头函数</h2><ul><li>箭头函数，就是函数的简写<ul><li>如果只有一个参数，<code>()</code> 可以省</li><li>如果只有一个<code>return</code>，<code>{}</code>可以省</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 箭头函数，去掉 function， 加上 =&gt;</span></span><br><span class="line">() =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> show1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'abc'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> show2 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'abc'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">show1() <span class="comment">// 调用函数</span></span><br><span class="line">show2()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> show4 = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a*<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> show5 = <span class="function"><span class="params">a</span> =&gt;</span> a * <span class="number">2</span>  <span class="comment">//简洁，类似python lambda 函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(show4(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">console</span>.log(show5(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><h2 id="5-函数-参数"><a href="#5-函数-参数" class="headerlink" title="5.函数-参数"></a>5.函数-参数</h2><ul><li>参数扩展／展开 <code>...args</code><ul><li>收集剩余的参数，必须当到最后一个参数位置</li><li>展开数组，简写，效果和直接把数组的内容写在这儿一样</li></ul></li><li>默认参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">a, b, ...args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="built_in">console</span>.log(b)</span><br><span class="line">    <span class="built_in">console</span>.log(args)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(show(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1, ...arr2]</span><br><span class="line"><span class="built_in">console</span>.log(arr3)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show2</span>(<span class="params">a, b=<span class="number">5</span>, c=<span class="number">8</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c)</span><br><span class="line">&#125;</span><br><span class="line">show2(<span class="number">88</span>, <span class="number">12</span>)</span><br></pre></td></tr></table></figure><h2 id="6-解构赋值"><a href="#6-解构赋值" class="headerlink" title="6.解构赋值"></a>6.解构赋值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;x, y, z&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(x, y, z)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [json, arr, num, str] = [&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">8</span>, <span class="string">'str'</span>]</span><br><span class="line"><span class="built_in">console</span>.log(json, arr, num, str)</span><br></pre></td></tr></table></figure><ul><li>解构赋值<ul><li>左右两个边结构必须一样</li><li>右边必须是个东西</li><li>声明和赋值赋值不能分开，必须在一句话里</li></ul></li></ul><h2 id="7-数组"><a href="#7-数组" class="headerlink" title="7.数组"></a>7.数组</h2><ul><li>新增4个方法</li><li>map 映射  一个对一个</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line"><span class="keyword">let</span> result = arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item*<span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> result2 = arr.map(<span class="function"><span class="params">item</span>=&gt;</span>item*<span class="number">2</span>) <span class="comment">// 简写</span></span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="built_in">console</span>.log(result2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> score = [<span class="number">18</span>, <span class="number">86</span>, <span class="number">88</span>, <span class="number">24</span>]</span><br><span class="line"><span class="keyword">let</span> result3 = score.map(<span class="function"><span class="params">item</span> =&gt;</span> item &gt;= <span class="number">60</span> ? <span class="string">'及格'</span> : <span class="string">'不及格'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">[ <span class="number">24</span>, <span class="number">10</span>, <span class="number">16</span> ]</span><br><span class="line">[ <span class="number">24</span>, <span class="number">10</span>, <span class="number">16</span> ]</span><br><span class="line">[ <span class="string">'不及格'</span>, <span class="string">'及格'</span>, <span class="string">'及格'</span>, <span class="string">'不及格'</span> ]</span><br></pre></td></tr></table></figure><ul><li>reduce 汇总  一堆出来一个<ul><li>用于比如，算个总数，算个平均</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">var</span> result = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">tmp, item, index</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//tmp 上次结果，item当前数，index次数1开始</span></span><br><span class="line">    <span class="built_in">console</span>.log(tmp, item, index)</span><br><span class="line">    <span class="keyword">return</span> tmp + item</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">var</span> result = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">tmp, item, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index != arr.length - <span class="number">1</span>) &#123; <span class="comment">// 不是最后一次</span></span><br><span class="line">        <span class="keyword">return</span> tmp + item</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (tmp + item)/arr.length</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result)  <span class="comment">// 平均值</span></span><br></pre></td></tr></table></figure><ul><li>filter 过滤器 保留为true的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">12</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">var</span> result = arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> (item % <span class="number">3</span> === <span class="number">0</span>) ? <span class="literal">true</span> : <span class="literal">false</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="keyword">var</span> result = arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">3</span> === <span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">'苹果'</span>, <span class="attr">price</span>: <span class="number">10</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">'西瓜'</span>, <span class="attr">price</span>: <span class="number">20</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> result = arr.filter(<span class="function"><span class="params">json</span> =&gt;</span> json.price &gt;= <span class="number">20</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure><ul><li>forEach 循环迭代</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">12</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">var</span> result = arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">console</span>.log(item))</span><br><span class="line"><span class="keyword">var</span> result = arr.forEach(<span class="function">(<span class="params">item, index</span>)=&gt;</span><span class="built_in">console</span>.log(item, index))</span><br></pre></td></tr></table></figure><h2 id="8-字符串"><a href="#8-字符串" class="headerlink" title="8.字符串"></a>8.字符串</h2><ul><li>多了两个新方法<ul><li><code>startsWith</code></li><li><code>endsWith</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">'http://qq.com'</span></span><br><span class="line"><span class="built_in">console</span>.log(url.startsWith(<span class="string">'http'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(url.endsWith(<span class="string">'com'</span>))</span><br><span class="line"><span class="comment">// 都是 true</span></span><br></pre></td></tr></table></figure><ul><li>字符串模版<ul><li>使用反引号，<code>${变量}</code></li><li>可以折行</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">12</span></span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">`asdf<span class="subst">$&#123;a&#125;</span>`</span></span><br><span class="line"><span class="built_in">console</span>.log(str1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> title = <span class="string">'标题'</span></span><br><span class="line"><span class="keyword">let</span> content = <span class="string">'内容'</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;h1&gt;<span class="subst">$&#123;title&#125;</span>&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;<span class="subst">$&#123;content&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;标题&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;内容&lt;/</span>p&gt;</span><br></pre></td></tr></table></figure><h2 id="9-面向对象-基础"><a href="#9-面向对象-基础" class="headerlink" title="9.面向对象-基础"></a>9.面向对象-基础</h2><ul><li>原来写法<ul><li>类和构造函数一样</li><li>属性和方法分开写的</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 老版本</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name, pass</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.pass = pass</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">User.prototype.showName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">User.prototype.showPass = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.pass)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> u1 = <span class="keyword">new</span> User(<span class="string">'able'</span>, <span class="string">'1233'</span>)</span><br><span class="line">u1.showName()</span><br><span class="line">u1.showPass()</span><br><span class="line"><span class="comment">// 老版本继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">VipUser</span>(<span class="params">name, pass, level</span>) </span>&#123;</span><br><span class="line">    User.call(<span class="keyword">this</span>, name, pass)</span><br><span class="line">    <span class="keyword">this</span>.level = level</span><br><span class="line">&#125;</span><br><span class="line">VipUser.prototype = <span class="keyword">new</span> User()</span><br><span class="line">VipUser.prototype.constructor = VipUser</span><br><span class="line">VipUser.prototype.showLevel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.level)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> v1 = <span class="keyword">new</span> VipUser(<span class="string">'blue'</span>, <span class="string">'1234'</span>, <span class="number">3</span>)</span><br><span class="line">v1.showName()</span><br><span class="line">v1.showLevel()</span><br></pre></td></tr></table></figure><ul><li>新版面向对象<ul><li>有了 class 关键字、构造器</li><li>class 里面直接加方法</li><li>继承，super 超类==父类</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, pass) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.pass = pass</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    showName() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">    showPass() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.pass)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> u1 = <span class="keyword">new</span> User(<span class="string">'able2'</span>, <span class="string">'111'</span>)</span><br><span class="line">u1.showName()</span><br><span class="line">u1.showPass()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新版本继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VipUser</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, pass, level) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name, pass)</span><br><span class="line">        <span class="keyword">this</span>.level = level</span><br><span class="line">    &#125;</span><br><span class="line">    showLevel()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.level)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v1 = <span class="keyword">new</span> VipUser(<span class="string">'blue'</span>, <span class="string">'123'</span>, <span class="number">3</span>)</span><br><span class="line">v1.showLevel()</span><br></pre></td></tr></table></figure><h2 id="10-面向对象应用"><a href="#10-面向对象应用" class="headerlink" title="10.面向对象应用"></a>10.面向对象应用</h2><ul><li><a href="https://www.reactjscn.com" target="_blank" rel="noopener">React</a><ul><li>用于构建用户界面的 JavaScript 库</li><li>组件化，一个组件就是一个 class</li><li>JSX == bable == browser.js</li></ul></li></ul><h2 id="11-json"><a href="#11-json" class="headerlink" title="11.json"></a>11.json</h2><ul><li><p>JSON 格式</p><ul><li>JavaScript Object Notation 的缩写，是一种用于数据交换的文本格式</li><li>JSON 是 JS对象 的严格子集</li><li>JSON 的标准写法</li><li>只能用双引号</li><li>所有的key都必须用双引号包起来</li></ul></li><li><p>JSON 对象</p><ul><li>JSON 对象是 JavaScript 的原生对象，用来处理 JSON 格式数据，有两个静态方法</li><li>JSON.parse(string) ：接受一个 <strong>JSON 字符串</strong>并将其转换成一个 JavaScript <strong>对象</strong>。</li><li>JSON.stringify(obj) ：接受一个 JavaScript <strong>对象</strong>并将其转换为一个 <strong>JSON 字符串</strong>。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> json = &#123;<span class="attr">a</span>: <span class="number">12</span>, <span class="attr">b</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'hi,'</span> + <span class="built_in">JSON</span>.stringify(json)</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">'http://www.xx.com/'</span> + <span class="built_in">encodeURIComponent</span>(<span class="built_in">JSON</span>.stringify(json))</span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br><span class="line"><span class="built_in">console</span>.log(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'&#123;"a": 12, "b": 4, "c": "abc"&#125;'</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(str)</span><br><span class="line"><span class="built_in">console</span>.log(json)</span><br><span class="line">hi,&#123;<span class="string">"a"</span>:<span class="number">12</span>,<span class="string">"b"</span>:<span class="number">5</span>&#125;</span><br><span class="line">http:<span class="comment">//www.xx.com/%7B%22a%22%3A12%2C%22b%22%3A5%7D</span></span><br><span class="line">&#123; <span class="attr">a</span>: <span class="number">12</span>, <span class="attr">b</span>: <span class="number">4</span>, <span class="attr">c</span>: <span class="string">'abc'</span> &#125;</span><br></pre></td></tr></table></figure><ul><li><p>对象（object）</p><ul><li>是 JavaScript 语言的核心概念，也是最重要的数据类型</li><li>对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合</li><li>对象的所有键名都是字符串, 所以加不加引号都可以</li><li>如果键名是数值，会被自动转为字符串</li><li>对象的每一个键名又称为“属性”（property），它的“键值”可以是任何数据类型</li><li>如果一个属性的值为函数，通常把这个属性称为“方法”，它可以像函数那样调用</li><li>in 运算符用于检查对象是否包含某个属性（注意，检查的是键名，不是键值</li><li>for…in循环用来遍历一个对象的全部属性</li></ul></li><li><p>对象 简写</p><ul><li>key-value 一样时可以简写</li><li>里面函数可以简写, 去掉</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">12</span>, b = <span class="number">5</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;<span class="attr">a</span>:a, <span class="attr">b</span>:b&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(&#123;a, b&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(&#123;a, b, <span class="attr">c</span>:<span class="string">"c"</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(&#123; a, b, show()&#123; <span class="built_in">console</span>.log(<span class="string">'a'</span>) &#125;&#125;)</span><br><span class="line">&#123; <span class="attr">a</span>: <span class="number">12</span>, <span class="attr">b</span>: <span class="number">5</span> &#125;</span><br><span class="line">&#123; <span class="attr">a</span>: <span class="number">12</span>, <span class="attr">b</span>: <span class="number">5</span> &#125;</span><br><span class="line">&#123; <span class="attr">a</span>: <span class="number">12</span>, <span class="attr">b</span>: <span class="number">5</span>, <span class="attr">c</span>: <span class="string">'c'</span> &#125;</span><br><span class="line">&#123; <span class="attr">a</span>: <span class="number">12</span>, <span class="attr">b</span>: <span class="number">5</span>, <span class="attr">show</span>: [<span class="built_in">Function</span>: show] &#125;</span><br></pre></td></tr></table></figure><h2 id="12-Promise"><a href="#12-Promise" class="headerlink" title="12.Promise"></a>12.Promise</h2><ul><li><p>异步和同步</p><ul><li>异步，操作之间没有关系，同时执行多个操作， 代码复杂</li><li>同步，同时只能做一件事，代码简单</li></ul></li><li><p>Promise 对象</p><ul><li>用同步的方式来书写异步代码</li><li>Promise 让异步操作写起来，像在写同步操作的流程，不必一层层地嵌套回调函数</li><li>改善了可读性，对于多层嵌套的回调函数很方便</li><li>充当异步操作与回调函数之间的中介，使得异步操作具备同步操作的接口</li></ul></li><li><p>Promise 也是一个构造函数</p><ul><li>接受一个回调函数f1作为参数，f1里面是异步操作的代码</li><li>返回的p1就是一个 Promise 实例</li><li>所有异步任务都返回一个 Promise 实例</li><li>Promise 实例有一个then方法，用来指定下一步的回调函数</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 异步代码...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(f1);</span><br><span class="line">p1.then(f2); <span class="comment">// f1的异步操作执行完成，就会执行f2。</span></span><br></pre></td></tr></table></figure><ul><li>Promise 使得异步流程可以写成同步流程</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统写法</span></span><br><span class="line">step1(<span class="function"><span class="keyword">function</span> (<span class="params">value1</span>) </span>&#123;</span><br><span class="line">  step2(value1, <span class="function"><span class="keyword">function</span>(<span class="params">value2</span>) </span>&#123;</span><br><span class="line">    step3(value2, <span class="function"><span class="keyword">function</span>(<span class="params">value3</span>) </span>&#123;</span><br><span class="line">      step4(value3, <span class="function"><span class="keyword">function</span>(<span class="params">value4</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise 的写法</span></span><br><span class="line">(<span class="keyword">new</span> <span class="built_in">Promise</span>(step1))</span><br><span class="line">  .then(step2)</span><br><span class="line">  .then(step3)</span><br><span class="line">  .then(step4);</span><br></pre></td></tr></table></figure><ul><li>Promise.all(promiseArray)方法<ul><li>将多个Promise对象实例包装，生成并返回一个新的Promise实例</li><li>promise数组中所有的promise实例都变为resolve的时候，该方法才会返回</li><li>并将所有结果传递results数组中</li><li>promise数组中任何一个promise为reject的话，则整个Promise.all调用会立即终止，并返回一个reject的新的promise对象</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="number">1</span>),</span><br><span class="line">    p2 = <span class="built_in">Promise</span>.resolve(<span class="number">2</span>),</span><br><span class="line">    p3 = <span class="built_in">Promise</span>.resolve(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2, p3]).then(<span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(results);  <span class="comment">// [1, 2, 3]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>Promise.race([p1, p2, p3])<ul><li>Promse.race就是赛跑的意思</li><li>哪个结果获得的快，就返回那个结果</li><li>不管结果本身是成功状态还是失败状态</li></ul></li></ul><h2 id="13-generator-认识生成器函数"><a href="#13-generator-认识生成器函数" class="headerlink" title="13.generator-认识生成器函数"></a>13.generator-认识生成器函数</h2><ul><li>generator 生成器函数<ul><li>普通函数，一路到底</li><li>generator函数，中间可以停，到哪停呢，用 yield 配合，交出执行权</li><li>yield 有 放弃、退让、退位的意思</li><li>需要调用next()方法启动执行，需要遇到 yield 停, 踹一脚走一步</li><li>generator函数前面加一个 <code>*</code> 两边可以有空格，或靠近函数或<code>function</code></li><li>背后实际生成多个小函数，实现走走停停</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'b'</span>)</span><br><span class="line">&#125;</span><br><span class="line">show() <span class="comment">// 普通函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">show2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1'</span>)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> genObj = show2()</span><br><span class="line">genObj.next() <span class="comment">// 1</span></span><br><span class="line">genObj.next() <span class="comment">// 2</span></span><br><span class="line">genObj.next() <span class="comment">// 最后了，没有结果</span></span><br></pre></td></tr></table></figure><h2 id="14-generator-yield是啥"><a href="#14-generator-yield是啥" class="headerlink" title="14.generator-yield是啥"></a>14.generator-yield是啥</h2><ul><li><p><code>yield</code></p><ul><li>既可传参，又可以返回</li><li>第一个<code>next()</code>传参无效，只用来启动</li></ul></li><li><p>如果函数前漏掉 <code>*</code></p><ul><li>就是普通函数</li><li>如果有<code>yield</code>会报错， <code>ReferenceError: yield is not defined</code></li><li>yield 只能在Generator函数内部使用</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1'</span>)</span><br><span class="line">    <span class="keyword">var</span> a = <span class="keyword">yield</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// yield 传参</span></span><br><span class="line"><span class="keyword">var</span> gen = show()</span><br><span class="line">gen.next() <span class="comment">// 1</span></span><br><span class="line">gen.next() <span class="comment">// 2 和 undefined 因为没有传参，yield没有返回值</span></span><br><span class="line"><span class="keyword">var</span> gen = show()</span><br><span class="line">gen.next(<span class="number">10</span>) <span class="comment">// 1 第一次执行到yield，但没有执行赋值</span></span><br><span class="line">gen.next(<span class="number">20</span>) <span class="comment">// 2 和 20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">show2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">10</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// yield 返回</span></span><br><span class="line"><span class="keyword">var</span> gen = show2()</span><br><span class="line"><span class="keyword">var</span> res1 = gen.next()</span><br><span class="line"><span class="built_in">console</span>.log(res1) <span class="comment">// &#123; value: 10, done: false &#125;</span></span><br><span class="line"><span class="keyword">var</span> res2 = gen.next()</span><br><span class="line"><span class="built_in">console</span>.log(res2)</span><br><span class="line"><span class="comment">// &#123; value: undefined, done: true &#125; 最后的value需要return返回</span></span><br></pre></td></tr></table></figure><h2 id="15-generator-实例"><a href="#15-generator-实例" class="headerlink" title="15.generator-实例"></a>15.generator-实例</h2><ul><li>Promise 适合一次读一组</li><li>generator 适合逻辑性的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 带逻辑-generator</span></span><br><span class="line">runner(<span class="function"><span class="keyword">function</span> * (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> userData = <span class="keyword">yield</span> $.ajax(&#123;<span class="attr">url</span>: <span class="string">'getUserData'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (userData.type == <span class="string">'VIP'</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> items = <span class="keyword">yield</span> $.ajax(&#123;<span class="attr">url</span>: <span class="string">'getVIPItems'</span>&#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> items = <span class="keyword">yield</span> $.ajax(&#123;<span class="attr">url</span>: <span class="string">'getItems'</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// yield 实例，用同步方式写异步</span></span><br><span class="line">server.use(<span class="function"><span class="keyword">function</span> * (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">yield</span> db.query(<span class="string">`select * from user_table`</span>)</span><br><span class="line">    <span class="keyword">this</span>.body = data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="16-ES7-预览"><a href="#16-ES7-预览" class="headerlink" title="16.ES7 预览"></a>16.ES7 预览</h2><ul><li>数组<ul><li><code>arr.includes()</code> 数组是否包含某个东西</li><li>数组的 arr.keys(), arr,entries()</li><li>for … in 遍历数组 下标 key</li><li>for … of 遍历数组 值 value, 不能用于json</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i) <span class="comment">// 循环的时下标 key</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i) <span class="comment">// 循环的是值 value</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> arr.keys()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'&gt;'</span>+i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> arr.entries()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'&gt;'</span> + key + value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> json = &#123; <span class="attr">a</span>: <span class="number">12</span>, <span class="attr">b</span>: <span class="number">5</span>, <span class="attr">c</span>: <span class="number">7</span> &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> json) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字符串<ul><li>padStart()/padEnd() 指定宽度，不够就补空格或指定字符</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'='</span> + <span class="string">'abcd'</span>.padStart(<span class="number">6</span>, <span class="string">'0'</span>) + <span class="string">'='</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'='</span> + <span class="string">'abcd'</span>.padEnd(<span class="number">6</span>, <span class="string">'0'</span>) + <span class="string">'='</span>)</span><br><span class="line">=<span class="number">00</span>abcd=</span><br><span class="line">=abcd00=</span><br></pre></td></tr></table></figure><ul><li><p>容忍度</p><ul><li>[1, 2, 3,] 老版数组最后不能有逗号，新的可以有</li><li>函数参数最后多的逗号也可以</li></ul></li><li><p>async await</p><ul><li>和 generator yield 类似</li><li>generator 不可以写成箭头函数， async 可以</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿# ES6新语法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#hello-es6&quot;&gt;hello-es6&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1es6%E6%80%8E%E4%B9%88%E6%9D%A5%E7%9A%84&quot;&gt;1.ES6怎么来的&lt;/a&gt;&lt;/li&gt;

      
    
    </summary>
    
      <category term="es6" scheme="http://yoursite.com/categories/es6/"/>
    
    
      <category term="es6" scheme="http://yoursite.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>JS数组所有方法（ES5和ES6）</title>
    <link href="http://yoursite.com/2019/10/13/JS%E6%95%B0%E7%BB%84%E6%89%80%E6%9C%89%E6%96%B9%E6%B3%95%EF%BC%88ES5%E5%92%8CES6%EF%BC%89/"/>
    <id>http://yoursite.com/2019/10/13/JS数组所有方法（ES5和ES6）/</id>
    <published>2019-10-13T05:03:51.337Z</published>
    <updated>2019-10-13T05:04:37.480Z</updated>
    
    <content type="html"><![CDATA[<p>﻿<strong>1 arr.push() 从后面添加元素，返回值为添加完后的数组的长度</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.push(<span class="number">5</span>))   <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1,2,3,4,5,5]</span></span><br></pre></td></tr></table></figure><p><strong>2 arr.pop() 从后面删除元素，只能是一个，返回值是删除的元素</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.pop())     <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure><p><strong>3 arr.shift() 从前面删除元素，只能删除一个 返回值是删除的元素</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.shift())  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)   <span class="comment">// [2,3,4,5]</span></span><br></pre></td></tr></table></figure><p><strong>4 arr.unshift() 从前面添加元素, 返回值是添加完后的数组的长度</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.unshift(<span class="number">2</span>))    <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">//[2,1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><p><strong>5 arr.splice(i,n) 删除从i(索引值)开始之后的那个元素。返回值是删除的元素</strong><br>　　参数： i 索引值      n 个数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">2</span>,<span class="number">2</span>))     <span class="comment">//[3,4]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)    <span class="comment">// [1,2,5]</span></span><br></pre></td></tr></table></figure><p><strong>6 arr.concat() 连接两个数组 返回值为连接后的新数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.concat([<span class="number">1</span>,<span class="number">2</span>]))  <span class="comment">// [1,2,3,4,5,1,2]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)   <span class="comment">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><p><strong>7 str.split() 将字符串转化为数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'123456'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">''</span>)) <span class="comment">// ["1", "2", "3", "4", "5", "6"]</span></span><br></pre></td></tr></table></figure><p><strong>8 arr.sort() 将数组进行排序,返回值是排好的数组，默认是按照最左边的数字进行排序，不是按照数字大小排序的，见例子。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">2</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">22</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.sort())   <span class="comment">// [1, 10, 2, 22, 3, 4, 6]</span></span><br><span class="line"><span class="keyword">let</span> arr1 = arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span>a - b)  </span><br><span class="line"><span class="built_in">console</span>.log(arr1)   <span class="comment">// [1, 2, 3, 4, 6, 10, 22]</span></span><br><span class="line"><span class="keyword">let</span> arr2 = arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span>b-a)  </span><br><span class="line"><span class="built_in">console</span>.log(arr2)  <span class="comment">// [22, 10, 6, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><p><strong>9 arr.reverse() 将数组反转,返回值是反转后的数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.reverse())    <span class="comment">// [5,4,3,2,1]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)    <span class="comment">// [5,4,3,2,1]</span></span><br></pre></td></tr></table></figure><p><strong>10 arr.slice(start,end) 切去索引值start到索引值end的数组，不包含end索引的值，返回值是切出来的数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">1</span>,<span class="number">3</span>))   <span class="comment">// [2,3]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)    <span class="comment">//  [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><p><strong>11 arr.forEach(callback) 遍历数组,无return</strong><br>　　callback的参数： value –当前索引的值<br>　　　　　　　　　　index –索引<br>　　　　　　　　　　array –原数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">arr.forEach( <span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`value:<span class="subst">$&#123;value&#125;</span>    index:<span class="subst">$&#123;index&#125;</span>     array:<span class="subst">$&#123;array&#125;</span>`</span>)</span><br><span class="line">    &#125;)   </span><br><span class="line">    <span class="comment">//  value:1    index:0     array:1,2,3,4,5</span></span><br><span class="line">    <span class="comment">//  value:2    index:1     array:1,2,3,4,5</span></span><br><span class="line">    <span class="comment">//  value:3    index:2     array:1,2,3,4,5</span></span><br><span class="line">    <span class="comment">//  value:4    index:3     array:1,2,3,4,5</span></span><br><span class="line">    <span class="comment">//  value:5    index:4     array:1,2,3,4,5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">arr.forEach( <span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">        value = value * <span class="number">2</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`value:<span class="subst">$&#123;value&#125;</span>    index:<span class="subst">$&#123;index&#125;</span>     array:<span class="subst">$&#123;array&#125;</span>`</span>)</span><br><span class="line">    &#125;)   </span><br><span class="line">    <span class="built_in">console</span>.log(arr)</span><br><span class="line">    <span class="comment">// value:2    index:0     array:1,2,3,4,5</span></span><br><span class="line">    <span class="comment">// value:4    index:1     array:1,2,3,4,5</span></span><br><span class="line">    <span class="comment">// value:6    index:2     array:1,2,3,4,5</span></span><br><span class="line">    <span class="comment">// value:8    index:3     array:1,2,3,4,5</span></span><br><span class="line">    <span class="comment">// value:10   index:4     array:1,2,3,4,5</span></span><br><span class="line">    <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p><strong>12 arr.map(callback) 映射数组(遍历数组),有return 返回一个新数组</strong><br>　　callback的参数： value –当前索引的值<br>　　　　　　　　　　index –索引<br>　　　　　　　　　　array –原数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">arr.map( <span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">        value = value * <span class="number">2</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`value:<span class="subst">$&#123;value&#125;</span>    index:<span class="subst">$&#123;index&#125;</span>     array:<span class="subst">$&#123;array&#125;</span>`</span>)</span><br><span class="line">&#125;)   </span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure><blockquote><p>ps: arr.forEach()和arr.map()的区别 </p><pre><code>1. arr.forEach()是和for循环一样，是代替for。arr.map()是修改数组其中的数据，并返回新的数据。2. arr.forEach() 没有return  arr.map() 有return</code></pre></blockquote><p><strong>13 arr.filter(callback) 过滤数组，返回一个满足要求的数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.filter( <span class="function">(<span class="params">i, v</span>) =&gt;</span> i &lt; <span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr1)    <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><p><strong>14 arr.every(callback) 依据判断条件，数组的元素是否全满足，若满足则返回ture</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.every( <span class="function">(<span class="params">i, v</span>) =&gt;</span> i &lt; <span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr1)    <span class="comment">// false</span></span><br><span class="line"><span class="keyword">let</span> arr2 = arr.every( <span class="function">(<span class="params">i, v</span>) =&gt;</span> i &lt; <span class="number">10</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr2)    <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>15 arr.some() 依据判断条件，数组的元素是否有一个满足，若有一个满足则返回ture</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.some( <span class="function">(<span class="params">i, v</span>) =&gt;</span> i &lt; <span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr1)    <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> arr2 = arr.some( <span class="function">(<span class="params">i, v</span>) =&gt;</span> i &gt; <span class="number">10</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr2)    <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><strong>16 arr.reduce(callback, initialValue) 迭代数组的所有项，累加器，数组中的每个值（从左到右）合并，最终计算为一个值</strong><br>　　参数： callback: previousValue 必选 –上一次调用回调返回的值，或者是提供的初始值（initialValue）<br>　　　　　　　　　　currentValue 必选 –数组中当前被处理的数组项<br>　　　　　　　　　　index 可选 –当前数组项在数组中的索引值<br>　　　　　　　　　　array 可选 –原数组<br>　　　　　initialValue: 可选 –初始值<br>实行方法：回调函数第一次执行时，preValue 和 curValue 可以是一个值，如果 initialValue 在调用 reduce() 时被提供，那么第一个 preValue 等于 initialValue ，并且curValue 等于数组中的第一个值；如果initialValue 未被提供，那么preValue 等于数组中的第一个值.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.reduce(<span class="function">(<span class="params">preValue, curValue</span>) =&gt;</span> </span><br><span class="line">    preValue + curValue</span><br><span class="line">)</span><br><span class="line"><span class="built_in">console</span>.log(arr1)    <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = arr.reduce(<span class="function">(<span class="params">preValue,curValue</span>)=&gt;</span>preValue + curValue,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr2)    <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><p><strong>17 arr.reduceRight(callback, initialValue) 与arr.reduce()功能一样，不同的是，reduceRight()从数组的末尾向前将数组中的数组项做累加。</strong><br>　　实行方法：reduceRight()首次调用回调函数callbackfn时，prevValue 和 curValue 可以是两个值之一。如果调用 reduceRight() 时提供了 initialValue 参数，则 prevValue 等于 initialValue，curValue 等于数组中的最后一个值。如果没有提供 initialValue 参数，则 prevValue 等于数组最后一个值， curValue 等于数组中倒数第二个值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.reduceRight(<span class="function">(<span class="params">preValue, curValue</span>) =&gt;</span> </span><br><span class="line">    preValue + curValue</span><br><span class="line">)</span><br><span class="line"><span class="built_in">console</span>.log(arr1)    <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr2 = arr.reduceRight(<span class="function">(<span class="params">preValue,curValue</span>)=&gt;</span>preValue + curValue,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr2)    <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><blockquote><p>ps：<br>(如果对这两个方法不明白，可以查看大漠老师的实例 <a href="http://www.w3cplus.com/javascript/array-part-8.html" target="_blank" rel="noopener">http://www.w3cplus.com/javascript/array-part-8.html</a>)</p></blockquote><p><strong>18 arr.indexOf() 查找某个元素的索引值，若有重复的，则返回第一个查到的索引值若不存在，则返回 -1</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.indexOf(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr1)  <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">let</span> arr2 = arr.indexOf(<span class="number">9</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr2)  <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><p><strong>19 arr.lastIndexOf()   和arr.indexOf()的功能一样，不同的是从后往前查找</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.lastIndexOf(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr1)  <span class="comment">// 5</span></span><br><span class="line"><span class="keyword">let</span> arr2 = arr.lastIndexOf(<span class="number">9</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr2)  <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><p><strong>20 Array.from() 将伪数组变成数组，就是只要有length的就可以转成数组。 —es6</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'12345'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(str))    <span class="comment">// ["1", "2", "3", "4", "5"]</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="number">0</span>:<span class="string">'a'</span>,<span class="number">1</span>:<span class="string">'b'</span>,<span class="attr">length</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(obj))   <span class="comment">// ["a", "b"]</span></span><br></pre></td></tr></table></figure><p><strong>21 Array.of() 将一组值转换成数组，类似于声明数组    —es6</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'11'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.of(str))   <span class="comment">// ['11']</span></span><br><span class="line"></span><br><span class="line">等价于</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'11'</span>))  <span class="comment">// ['11]</span></span><br></pre></td></tr></table></figure><blockquote><p>ps:<br>但是new Array()有缺点，就是参数问题引起的重载<br>console.log(new Array(2))   //[empty × 2]  是个空数组<br>console.log(Array.of(2))    // [2]</p></blockquote><p><strong>22 arr.copyWithin() 在当前数组内部，将制定位置的数组复制到其他位置，会覆盖原数组项，返回当前数组</strong><br>　　参数: target –必选 索引从该位置开始替换数组项<br>　　　　  start –可选 索引从该位置开始读取数组项，默认为0.如果为负值，则从右往左读。<br>　　　　  end –可选 索引到该位置停止读取的数组项，默认是Array.length,如果是负值，表示倒数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.copyWithin(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr1)   <span class="comment">// [1, 1, 2, 3, 4, 5, 6]</span></span><br><span class="line"><span class="keyword">let</span> arr2 = arr.copyWithin(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr2)   <span class="comment">// [1, 3, 4, 5, 6, 7, 7]</span></span><br><span class="line"><span class="keyword">let</span> arr3 = arr.copyWithin(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr3)   <span class="comment">// [1, 3, 4, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure><p><strong>23 arr.find(callback) 找到第一个符合条件的数组成员</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.find(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span>value &gt; <span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr1)   <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><strong>24 arr.findIndex(callback) 找到第一个符合条件的数组成员的索引值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.findIndex(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> value &gt; <span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr1)  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><strong>25 arr.fill(target, start, end) 使用给定的值，填充一个数组,ps:填充完后会改变原数组</strong><br>　　参数： target – 待填充的元素<br>　　　　　 start – 开始填充的位置-索引<br>　　　　    end – 终止填充的位置-索引（不包括该位置)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.fill(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr1)  <span class="comment">// [5, 5, 5, 5, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)   <span class="comment">// [5, 5, 5, 5, 5]</span></span><br><span class="line"><span class="keyword">let</span> arr2 = arr.fill(<span class="number">5</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr2)</span><br><span class="line"><span class="keyword">let</span> arr3 = arr.fill(<span class="number">5</span>,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr3)</span><br></pre></td></tr></table></figure><p><strong>26 arr.includes() 判断数中是否包含给定的值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.includes(<span class="number">2</span>)  </span><br><span class="line"><span class="built_in">console</span>.log(arr1)   <span class="comment">// ture</span></span><br><span class="line"><span class="keyword">let</span> arr2 = arr.includes(<span class="number">9</span>) </span><br><span class="line"><span class="built_in">console</span>.log(arr2)    <span class="comment">// false</span></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="literal">NaN</span>].includes(<span class="literal">NaN</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr3)  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>ps:与indexOf()的区别：<br>1 indexOf()返回的是数值，而includes()返回的是布尔值<br>2 indexOf() 不能判断NaN，返回为-1 ，includes()则可以判断<br>27 arr.keys() 遍历数组的键名<br>let arr = [1,2,3,4]<br>let arr2 = arr.keys()<br>for (let key of arr2) {<br>    console.log(key);   // 0,1,2,3<br>}</p></blockquote><p><strong>28 arr.values() 遍历数组键值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.values()</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> arr1) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(val);   <span class="comment">// 1,2,3,4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>29 arr.entries() 遍历数组的键名和键值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.entries()</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> e <span class="keyword">of</span> arr1) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);   <span class="comment">// [0,1] [1,2] [2,3] [3,4]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>entries() 方法返回迭代数组。</p><p>迭代数组中每个值 前一个是索引值作为 key， 数组后一个值作为 value。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿&lt;strong&gt;1 arr.push() 从后面添加元素，返回值为添加完后的数组的长度&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li
      
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="JS数组所有方法（ES5和ES6）" scheme="http://yoursite.com/tags/JS%E6%95%B0%E7%BB%84%E6%89%80%E6%9C%89%E6%96%B9%E6%B3%95%EF%BC%88ES5%E5%92%8CES6%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>jianshu-react项目总结</title>
    <link href="http://yoursite.com/2019/10/04/jianshu-react%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/10/04/jianshu-react项目总结/</id>
    <published>2019-10-04T13:43:50.603Z</published>
    <updated>2019-10-04T13:45:40.599Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 目录</p><ul><li><a href="#user-content-技术栈">技术栈</a></li><li><a href="#user-content-项目结构及技术点介绍">项目结构及技术点介绍</a><ul><li><a href="#user-content-项目结构">项目结构</a></li><li><a href="#styled-components">styled components</a><ul><li><a href="#user-content-使用iconfont嵌入图标">使用iconfont嵌入图标</a></li><li><a href="#user-content-动画库的使用">使用react-transition-group动画库</a></li><li><a href="#user-content-使用react-redux及其中间件">使用react-redux及其中间件</a></li><li>等等。。。</li></ul></li></ul></li><li><a href="#user-content-代码和性能优化">项目代码和性能优化</a><ul><li><a href="#user-content-this绑定优化">this绑定的性能优化</a></li><li><a href="#user-content-使用无状态组件提高性能">合理使用无状态组件</a></li><li><a href="#user-content-immutablejs与redux结合使用">Immutable.js与redux结合使用</a></li><li><a href="#user-content-避免无意义的网络请求">避免无意义的网络请求</a></li><li><a href="#user-content-异步操作代码拆分优化">异步操作代码拆分优化</a></li><li><a href="#user-content-使用PureComponent">使用PureComponent</a></li></ul></li></ul><h1 id="技术栈："><a href="#技术栈：" class="headerlink" title="技术栈："></a>技术栈：</h1><p>  react + redux + redux-thunk（让redux支持异步的中间件） +  webpack + react-router + ES6/7/8 + axios + react-transition-group（react动画库）+ react-loadable（使组件按需载） + styled-components（css组件化） + immutable.js</p><h2 id="运行打包（nodejs-6-0-）："><a href="#运行打包（nodejs-6-0-）：" class="headerlink" title="运行打包（nodejs 6.0+）："></a>运行打包（nodejs 6.0+）：</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/CoderZF/jianshu-<span class="keyword">pc</span>.git</span><br><span class="line"></span><br><span class="line"><span class="keyword">cd</span> jianshu-<span class="keyword">pc</span></span><br><span class="line"></span><br><span class="line">npm i  或者运行  yarn(推荐)</span><br><span class="line"> </span><br><span class="line">npm start</span><br><span class="line"></span><br><span class="line">npm run build （发布）</span><br></pre></td></tr></table></figure><h2 id="项目结构及技术点介绍："><a href="#项目结构及技术点介绍：" class="headerlink" title="项目结构及技术点介绍："></a>项目结构及技术点介绍：</h2><p><em>该项目由 <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="noopener">Create React App</a> 搭建.</em></p><h4 id="项目结构："><a href="#项目结构：" class="headerlink" title="项目结构："></a>项目结构：</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">jianshu-pc</span><br><span class="line">│   README.md</span><br><span class="line">│   package.json</span><br><span class="line">└───src</span><br><span class="line">│   │   App.js</span><br><span class="line">│   │   idnex.js</span><br><span class="line">│   │   style.js</span><br><span class="line">│   └───common</span><br><span class="line">│   │      └───header</span><br><span class="line">│   │             │   index.js</span><br><span class="line">│   │             │   style.js</span><br><span class="line">│   │             └───store   </span><br><span class="line">│   │                  │   actionCreators.js</span><br><span class="line">│   │                  │   constants<span class="selector-class">.js</span>  </span><br><span class="line">│   │                  │   index<span class="selector-class">.js</span>  </span><br><span class="line">│   │                  │   reducer<span class="selector-class">.js</span>  </span><br><span class="line">│   └───pages</span><br><span class="line">│   │      └───detail</span><br><span class="line">│   │      │       │   index.js</span><br><span class="line">│   │      │       │   style.js</span><br><span class="line">│   │      │       │   loadable.js</span><br><span class="line">│   │      │       └───store   </span><br><span class="line">│   │      │           │   actionCreators.js</span><br><span class="line">│   │      │           │   constants<span class="selector-class">.js</span>  </span><br><span class="line">│   │      │           │   index<span class="selector-class">.js</span>  </span><br><span class="line">│   │      │           │   reducer<span class="selector-class">.js</span>  </span><br><span class="line">│   │      └───home</span><br><span class="line">│   │      │       │   index.js</span><br><span class="line">│   │      │       │   style.js</span><br><span class="line">│   │      │       └───store   </span><br><span class="line">│   │      │       │      actionCreators.js</span><br><span class="line">│   │      │       │      constants<span class="selector-class">.js</span>  </span><br><span class="line">│   │      │       │      index<span class="selector-class">.js</span>  </span><br><span class="line">│   │      │       │      reducer<span class="selector-class">.js</span>   </span><br><span class="line">│   │      │       └───components   </span><br><span class="line">│   │      │           │   List.js</span><br><span class="line">│   │      │           │   Recommend<span class="selector-class">.js</span>  </span><br><span class="line">│   │      │           │   Topic<span class="selector-class">.js</span>  </span><br><span class="line">│   │      │           │   Writer<span class="selector-class">.js</span>   </span><br><span class="line">│   │      └───login</span><br><span class="line">│   │      │       │   index.js</span><br><span class="line">│   │      │       │   style.js</span><br><span class="line">│   │      │       └───store   </span><br><span class="line">│   │      │           │   actionCreators.js</span><br><span class="line">│   │      │           │   constants<span class="selector-class">.js</span>  </span><br><span class="line">│   │      │           │   index<span class="selector-class">.js</span>  </span><br><span class="line">│   │      │           │   reducer<span class="selector-class">.js</span>   </span><br><span class="line">│   │      └───write</span><br><span class="line">│   │      │       │   index.js</span><br><span class="line">│   │      │       │   style.js</span><br><span class="line">│   └───statics</span><br><span class="line">│   │      │   logo.png</span><br><span class="line">│   │      │   ...</span><br><span class="line">│   │      └───iconfont</span><br><span class="line">│   │             │   iconfont.eot</span><br><span class="line">│   │             │   iconfont.js</span><br><span class="line">│   │             │   ...</span><br><span class="line">│   └───store</span><br><span class="line">│   │      │   index.js</span><br><span class="line">│   │      │   reducer.js</span><br><span class="line">│        </span><br><span class="line">└───public</span><br><span class="line">    │   ...</span><br></pre></td></tr></table></figure><h4 id="styled-components："><a href="#styled-components：" class="headerlink" title="styled components："></a>styled components：</h4><p>使用styled components，可将组件分为逻辑组件和展示组件，逻辑组件只关注逻辑相关的部分，展示组件只关注样式。通过解耦成两种组件，可以使代码变得更加清晰可维护。当逻辑有变化，如后台拉取的数据的格式有所变化时，只需关注并修改逻辑组件上的代码，展示组件的代码不用动。而当UI需要变化时，只需改变展示组件上的代码，并保证展示组件暴露的props接口不变即可。逻辑组件和展示组件各司其职，修改代码时错误发生率也会有所减少。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; injectGlobal &#125; <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"></span><br><span class="line">injectGlobal<span class="string">`</span></span><br><span class="line"><span class="string">html, body, div, span, applet, object, iframe,</span></span><br><span class="line"><span class="string">h1, h2, h3, h4, h5, h6, p, blockquote, pre,</span></span><br><span class="line"><span class="string">a, abbr, acronym, address, big, cite, code,</span></span><br><span class="line"><span class="string">del, dfn, em, img, ins, kbd, q, s, samp,</span></span><br><span class="line"><span class="string">small, strike, strong, sub, sup, tt, var,</span></span><br><span class="line"><span class="string">b, u, i, center,</span></span><br><span class="line"><span class="string">dl, dt, dd, ol, ul, li,</span></span><br><span class="line"><span class="string">fieldset, form, label, legend,</span></span><br><span class="line"><span class="string">table, caption, tbody, tfoot, thead, tr, th, td,</span></span><br><span class="line"><span class="string">article, aside, canvas, details, embed, </span></span><br><span class="line"><span class="string">figure, figcaption, footer, header, hgroup, </span></span><br><span class="line"><span class="string">menu, nav, output, ruby, section, summary,</span></span><br><span class="line"><span class="string">time, mark, audio, video &#123;</span></span><br><span class="line"><span class="string">margin: 0;</span></span><br><span class="line"><span class="string">padding: 0;</span></span><br><span class="line"><span class="string">border: 0;</span></span><br><span class="line"><span class="string">font-size: 100%;</span></span><br><span class="line"><span class="string">font: inherit;</span></span><br><span class="line"><span class="string">vertical-align: baseline;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure></p><p>上面js可以看出全局公用样式使用injectGlobal，所有css写在字符串模板中，vscode下载vscode-styled-components插件可支持语法高亮。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">"styled-components"</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">const</span> RecommendWrapper = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  margin: 30px 0;</span></span><br><span class="line"><span class="string">  width: 280px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">const</span> RecommendItem = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  width: 280px;</span></span><br><span class="line"><span class="string">  height: 50px;</span></span><br><span class="line"><span class="string">  background: url(<span class="subst">$&#123;props =&gt; props.imgUrl&#125;</span>);</span></span><br><span class="line"><span class="string">  background-size: contain;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; RecommendWrapper, RecommendItem &#125; <span class="keyword">from</span> <span class="string">'../style'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Recommend</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">render() &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;RecommendWrapper&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.props.list.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">RecommendItem</span> <span class="attr">imgUrl</span>=<span class="string">&#123;item.get(</span>'<span class="attr">imgUrl</span>')&#125; <span class="attr">key</span>=<span class="string">&#123;item.get(</span>'<span class="attr">id</span>')&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">RecommendWrapper</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面2个js就是styled components最常用的使用方法，将视图和逻辑彻底分离。</p><h4 id="使用iconfont嵌入图标"><a href="#使用iconfont嵌入图标" class="headerlink" title="使用iconfont嵌入图标"></a>使用iconfont嵌入图标</h4><p>[外链图片转存失败(img-E4M00HYU-1568882130487)(<a href="https://upload-images.jianshu.io/upload_images/1517219-ce2bf5c272f293f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)]" target="_blank" rel="noopener">https://upload-images.jianshu.io/upload_images/1517219-ce2bf5c272f293f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)]</a><br>[外链图片转存失败(img-u7nNWtY2-1568882130489)(<a href="https://upload-images.jianshu.io/upload_images/1517219-4ea045f8f4ef401e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)]" target="_blank" rel="noopener">https://upload-images.jianshu.io/upload_images/1517219-4ea045f8f4ef401e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)]</a></p><h4 id="动画库的使用"><a href="#动画库的使用" class="headerlink" title="动画库的使用"></a>动画库的使用</h4><p> react-transition-group是react官方提供的动画库，也是之前两个的合体版本，此动画库总共提供三个组件Transition，CSSTransition和TransitonGroup。<br>本项目为实现输入框在聚焦和失去焦点时其长度的变化，使用了CSSTransition这个组件。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;CSSTransition <span class="keyword">in</span>=&#123;focused&#125; timeout=&#123;<span class="number">200</span>&#125; classNames=<span class="string">"slide"</span>&gt;</span><br><span class="line">  &lt;NavSearch</span><br><span class="line">    className=&#123;focused ? <span class="string">"focused"</span> : <span class="string">""</span>&#125;</span><br><span class="line">    onFocus=&#123;() =&gt; handleInputFocus(list)&#125;</span><br><span class="line">    onBlur=&#123;handleInputBlur&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;<span class="regexp">/CSSTransition&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">export</span> <span class="keyword">const</span> NavSearch = styled.input.attrs(&#123;</span><br><span class="line">          placeholder: <span class="string">"搜索"</span></span><br><span class="line">    &#125;)<span class="string">`</span></span><br><span class="line"><span class="string">          width: 160px;</span></span><br><span class="line"><span class="string">          height: 38px;</span></span><br><span class="line"><span class="string">          padding: 0 30px 0 20px;</span></span><br><span class="line"><span class="string">          margin-top: 9px;</span></span><br><span class="line"><span class="string">          margin-left: 20px;</span></span><br><span class="line"><span class="string">          box-sizing: border-box;</span></span><br><span class="line"><span class="string">          border: none;</span></span><br><span class="line"><span class="string">          outline: none;</span></span><br><span class="line"><span class="string">          border-radius: 19px;</span></span><br><span class="line"><span class="string">          background: #eee;</span></span><br><span class="line"><span class="string">          font-size: 14px;</span></span><br><span class="line"><span class="string">          color: #666;</span></span><br><span class="line"><span class="string">          &amp;::placeholder &#123;</span></span><br><span class="line"><span class="string">               color: #999;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          &amp;.focused &#123;</span></span><br><span class="line"><span class="string">              width: 240px;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          &amp;.slide-enter &#123;</span></span><br><span class="line"><span class="string">               transition: all 0.2s ease-out;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          &amp;.slide-enter-active &#123;</span></span><br><span class="line"><span class="string">            width: 240px;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          &amp;.slide-exit &#123;</span></span><br><span class="line"><span class="string">            transition: all 0.2s ease-out;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          &amp;.slide-exit-active &#123;</span></span><br><span class="line"><span class="string">            width: 160px;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><p>CSSTransition包装的组件会给其组件自动包装不同状态的类名，如上slide-enter，slide-enter-active，slide-exit，slide-exit-active 就是其根据classNames-xxx自动挂载的。</p><h4 id="使用react-redux及其中间件"><a href="#使用react-redux及其中间件" class="headerlink" title="使用react-redux及其中间件"></a>使用react-redux及其中间件</h4><p> 首先为根组件用react-redux提供的Provider包裹，其目的就是让整个项目的组件可以使用store。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">      &lt;BrowserRouter&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">            &lt;Header /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">'/'</span> exact component=&#123;Home&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">            &lt;Route path=<span class="string">'/login'</span> exact component=&#123;Login&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">            &lt;Route path=<span class="string">'/write'</span> exact component=&#123;Write&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">      &lt;Route path=<span class="string">'/detail/:id'</span> exact component=&#123;Detail&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>BrowserRouter&gt;</span><br><span class="line">      &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>然后让组件通过connect连接store，connect第一次调用的两个参数分别是store和dispatch对其组件props的映射回调函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispathToProps</span><br><span class="line">)(Header);</span><br></pre></td></tr></table></figure></p><h2 id="代码和性能优化："><a href="#代码和性能优化：" class="headerlink" title="代码和性能优化："></a>代码和性能优化：</h2><h4 id="this绑定优化"><a href="#this绑定优化" class="headerlink" title="this绑定优化"></a>this绑定优化</h4><ol><li><p>当使用bind()绑定时，最好把所有需要绑定的方法都放在构造函数constructor中，这样就仅需要绑定一次就可以，避免每次渲染时都要重新绑定，函数在别处复用时也无需再次绑定。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> (props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleClick (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render () &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123; <span class="keyword">this</span>.handleClick &#125;&gt;Say Hello&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>箭头函数则会捕获其所在上下文的this值，作为自己的this值，使用箭头函数就不用担心函数内的this不是指向组件内部了。可以按下面这种方式使用箭头函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> (props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;<span class="attr">message</span>: <span class="string">'Allo!'</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleClick (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.message)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render () &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123; ()=&gt;&#123; <span class="keyword">this</span>.handleClick() &#125; &#125;&gt;Say Hello&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>使用这个语法有个问题就是每次 Test 渲染的时候都会创建一个不同的回调函数。在大多数情况下，这没有问题。然而如果这个回调函数作为一个属性值传入低阶组件，这些组件可能会进行额外的重新渲染。我们通常建议在构造函数中绑定或像下面代码使用属性初始化器语法来避免这类性能问题。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> (props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;<span class="attr">message</span>: <span class="string">'Allo!'</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleClick = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.message)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render () &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123; <span class="keyword">this</span>.handleClick &#125;&gt;Say Hello&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="使用无状态组件提高性能"><a href="#使用无状态组件提高性能" class="headerlink" title="使用无状态组件提高性能"></a>使用无状态组件提高性能</h4><p>如此组件没有状态的影响或者仅仅纯静态展示时，完全可以用无状态组件来替代有状态组件，因其除render无任何其他生命周期方法且仅仅返回的是个函数，无实例化过程，大大提升了性能。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; WriterWrapper &#125; <span class="keyword">from</span> <span class="string">'../style'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Writer</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;WriterWrapper&gt;HomeWork&lt;<span class="regexp">/WriterWrapper&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Writer;</span></span><br></pre></td></tr></table></figure></p><p>上面组件就可以完全改装成如下无状态组件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; WriterWrapper &#125; <span class="keyword">from</span> <span class="string">"../style"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Writer = <span class="function"><span class="params">()</span> =&gt;</span> &lt;WriterWrapper&gt;HomeWork&lt;<span class="regexp">/WriterWrapper&gt;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Writer;</span></span><br></pre></td></tr></table></figure></p><h4 id="immutable-js与redux结合使用"><a href="#immutable-js与redux结合使用" class="headerlink" title="immutable.js与redux结合使用"></a>immutable.js与redux结合使用</h4><p>当我们对一个Immutable对象进行操作的时候，ImmutableJS基于哈希映射树(hash map tries)和vector map tries，只clone该节点以及它的祖先节点，其他保持不变，这样可以共享相同的部分，大大提高性能。在对Immutable对象的操作均会返回新的对象，所以使用redux的reducer中就不需要总是想着不能修改原state，因为对Immutable对象的操作返回就是新的对象，且比普通js深拷贝产生的性能消耗要低得多。<br>  我在项目中也是大量使用immutable.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> constants <span class="keyword">from</span> <span class="string">'./constants'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fromJS &#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultState = fromJS(&#123;</span><br><span class="line">focused: <span class="literal">false</span>,</span><br><span class="line">mouseIn: <span class="literal">false</span>,</span><br><span class="line">list: [],</span><br><span class="line">page: <span class="number">1</span>,</span><br><span class="line">totalPage: <span class="number">1</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state = defaultState, action) =&gt; &#123;</span><br><span class="line"><span class="keyword">switch</span>(action.type) &#123;</span><br><span class="line"><span class="keyword">case</span> constants.SEARCH_FOCUS:</span><br><span class="line"><span class="keyword">return</span> state.set(<span class="string">'focused'</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">case</span> constants.SEARCH_BLUR:</span><br><span class="line"><span class="keyword">return</span> state.set(<span class="string">'focused'</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">case</span> constants.CHANGE_LIST:</span><br><span class="line"><span class="keyword">return</span> state.merge(&#123;</span><br><span class="line">list: action.data,</span><br><span class="line">totalPage: action.totalPage</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">case</span> constants.MOUSE_ENTER:</span><br><span class="line"><span class="keyword">return</span> state.set(<span class="string">'mouseIn'</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">case</span> constants.MOUSE_LEAVE:</span><br><span class="line"><span class="keyword">return</span> state.set(<span class="string">'mouseIn'</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">case</span> constants.CHANGE_PAGE:</span><br><span class="line"><span class="keyword">return</span> state.set(<span class="string">'page'</span>, action.page);</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> constants <span class="keyword">from</span> <span class="string">'./constants'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fromJS &#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> changeList = <span class="function">(<span class="params">data</span>) =&gt;</span> (&#123;</span><br><span class="line"><span class="keyword">type</span>: constants.CHANGE_LIST,</span><br><span class="line">data: fromJS(data),</span><br><span class="line">totalPage: <span class="built_in">Math</span>.ceil(data.length / <span class="number">10</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getList = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">axios.get(<span class="string">'/api/headerList.json'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> data = res.data;</span><br><span class="line">dispatch(changeList(data.data));</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'error'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="避免无意义的网络请求"><a href="#避免无意义的网络请求" class="headerlink" title="避免无意义的网络请求"></a>避免无意义的网络请求</h4><p>比如在请求热门搜索提示项的时候，只有当size是0的时候我才去发送请求。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapDispathToProps = <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  handleInputFocus(list) &#123;</span><br><span class="line">    list.size === <span class="number">0</span> &amp;&amp; dispatch(actionCreators.getList());</span><br><span class="line">    dispatch(actionCreators.searchFocus());</span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></p><h4 id="异步操作代码拆分优化"><a href="#异步操作代码拆分优化" class="headerlink" title="异步操作代码拆分优化"></a>异步操作代码拆分优化</h4><p>在UI组件中因尽量减少业务逻辑操作，像与服务器交互的大量代码都应该解耦出来，所以结合redux-thunk的使用将大量的网络请求代码写在action中就解决了这一问题。<br>下面是home页的actionCreators.js，当前模块的所有action和网络请求都在此文件中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> constants <span class="keyword">from</span> <span class="string">'./constants'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fromJS &#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> changHomeData = <span class="function">(<span class="params">result</span>) =&gt;</span> (&#123;</span><br><span class="line">type: constants.CHANGE_HOME_DATA,</span><br><span class="line">topicList: result.topicList,</span><br><span class="line">articleList: result.articleList,</span><br><span class="line">recommendList: result.recommendList</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addHomeList = <span class="function">(<span class="params">list, nextPage</span>) =&gt;</span> (&#123;</span><br><span class="line">type: constants.ADD_ARTICLE_LIST,</span><br><span class="line">list: fromJS(list),</span><br><span class="line">nextPage</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getHomeInfo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">axios.get(<span class="string">'/api/home.json'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> result = res.data.data;</span><br><span class="line">dispatch(changHomeData(result));</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getMoreList = <span class="function">(<span class="params">page</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">axios.get(<span class="string">'/api/homeList.json?page='</span> + page).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> result = res.data.data;</span><br><span class="line">dispatch(addHomeList(result, page + <span class="number">1</span>));</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> toggleTopShow = <span class="function">(<span class="params">show</span>) =&gt;</span> (&#123;</span><br><span class="line">type: constants.TOGGLE_SCROLL_TOP,</span><br><span class="line">show</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这样在组件中就可以轻松的去调用网络请求，然后将返回结果发送给reducer进行处理<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ListItem, ListInfo, LoadMore &#125; <span class="keyword">from</span> <span class="string">'../style'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; actionCreators &#125; <span class="keyword">from</span> <span class="string">'../store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">render() &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; list, getMoreList, page &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&#123;</span><br><span class="line">list.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;Link key=&#123;index&#125; to=&#123;<span class="string">'/detail/'</span> + item.get(<span class="string">'id'</span>)&#125;&gt;</span><br><span class="line">&lt;ListItem &gt;</span><br><span class="line">&lt;img alt=<span class="string">''</span> className=<span class="string">'pic'</span> src=&#123;item.get(<span class="string">'imgUrl'</span>)&#125; /&gt;</span><br><span class="line">&lt;ListInfo&gt;</span><br><span class="line">&lt;h3 className=<span class="string">'title'</span>&gt;&#123;item.get(<span class="string">'title'</span>)&#125;&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">&lt;p className='desc'&gt;&#123;item.get('desc')&#125;&lt;/</span>p&gt;</span><br><span class="line">&lt;<span class="regexp">/ListInfo&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>ListItem&gt;</span><br><span class="line">&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;LoadMore onClick=&#123;() =&gt; getMoreList(page)&#125;&gt;更多文字&lt;/</span>LoadMore&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const mapState = (state) =&gt; (&#123;</span></span><br><span class="line"><span class="regexp">list: state.getIn(['home', 'articleList']),</span></span><br><span class="line"><span class="regexp">page: state.getIn(['home', 'articlePage'])</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const mapDispatch = (dispatch) =&gt; (&#123;</span></span><br><span class="line"><span class="regexp">getMoreList(page) &#123;</span></span><br><span class="line"><span class="regexp">dispatch(actionCreators.getMoreList(page))</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default connect(mapState, mapDispatch)(List);</span></span><br></pre></td></tr></table></figure></p><h4 id="使用PureComponent"><a href="#使用PureComponent" class="headerlink" title="使用PureComponent"></a>使用PureComponent</h4><p>继承Component的普通组件，使用react-redux的connect连接了store，那么只要store内的数据发生改变就会让所有连接的组件触发render，这样就会产生不必要的渲染开销，当然使用shouldComponentUpdate也可以阻止不必要的渲染，但这样的话每个组件都要写同样的shouldComponentUpdate方法；继承PureComponent的组件正好解决了这一痛点，默认实现的shouldComponentUpdate。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNTE3MjE5LTk4YzhjYTNiM2I3MDg1YjgucG5n?x-oss-process=image/format,png" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 目录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#user-content-技术栈&quot;&gt;技术栈&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#user-content-项目结构及技术点介绍&quot;&gt;项目结构及技术点介绍&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#user
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="项目总结" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>关于React中使用bind(this)的理解</title>
    <link href="http://yoursite.com/2019/09/26/%E5%85%B3%E4%BA%8EReact%E4%B8%AD%E4%BD%BF%E7%94%A8bind(this)%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/09/26/关于React中使用bind(this)的理解/</id>
    <published>2019-09-26T15:07:47.861Z</published>
    <updated>2019-09-26T15:09:15.628Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 前言</p><p>在学习React的过程中发现调用函数的时候必须使用bind(this)，之后直接在class中声明函数即可正常使用，但是为什么要使用这个呢？在这里总结一下。</p><h2 id="1-JavaScript自身特性说明"><a href="#1-JavaScript自身特性说明" class="headerlink" title="1.JavaScript自身特性说明"></a>1.JavaScript自身特性说明</h2><p>如果传递一个函数名给一个变量，之后通过函数名()的方式进行调用，在方法内部如果使用this则this的指向会丢失。 示例代码：</p><p>首先我们创建test对象并直接调用方法 ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = &#123;</span><br><span class="line">    name:<span class="string">'jack'</span>,</span><br><span class="line">    getName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">test.getName()</span><br></pre></td></tr></table></figure><p>使用node test.js执行上述代码可以正常输出jack。 之后，我们对代码进行调整：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = &#123;</span><br><span class="line">    name:<span class="string">'jack'</span>,</span><br><span class="line">    getJack:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> func = test.getJack;</span><br><span class="line">func();</span><br></pre></td></tr></table></figure><p>我们没有直接调用对象的方法，而是将方法声明给一个中间变量，之后利用中间变量()调用方法，此时this则失去指向，输出undefined，<strong>如果使用node环境执行js文件则输出node相关信息，如嵌入到html中则this指向window对象。</strong></p><h2 id="2-React事件绑定"><a href="#2-React事件绑定" class="headerlink" title="2.React事件绑定"></a>2.React事件绑定</h2><p>React中的bind同上方原理一致,在JSX中传递的事件不是一个字符串，而是一个<strong>函数</strong>（如:onClick={this.handleClick}），此时onClick即是<strong>中间变量</strong>，所以处理函数中的this指向会丢失。解决这个问题就是给调用函数时bind(this)，从而使得无论事件处理函数如何传递，this指向都是当前实例化对象。 </p><p>当然，如果不想使用bind(this)，我们可以在声明函数时使用箭头函数将函数内容返回给一个变量，并在调用时直接使用this.变量名即可。示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Life</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            count:<span class="number">4</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">var</span> style = &#123;</span><br><span class="line">            padding:<span class="string">'10px'</span>,</span><br><span class="line">            color:<span class="string">'red'</span>,</span><br><span class="line">            fontSize:<span class="string">'30px'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div style=&#123;style&#125;&gt;&#123;<span class="comment">/*注意js语法使用一个括号&#123;&#125;去表示,style使用两个括号,原因里面其实是一个对象*/</span>&#125;</span><br><span class="line">                &lt;p&gt;React生命周期介绍&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button onClick=&#123;this.handleAdd&#125;&gt;无bind点击一下&lt;/</span>button&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)&#125;&gt;有bind点击一下&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt;&#123;this.state.count&#125;&lt;/</span>p&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/此时this指向是当前实例对象</span></span><br><span class="line"><span class="regexp">    handleAdd = ()=&gt; &#123;</span></span><br><span class="line"><span class="regexp">        console.log(this)</span></span><br><span class="line"><span class="regexp">        this.setState(&#123;</span></span><br><span class="line"><span class="regexp">            count:5</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    handleClick()&#123;</span></span><br><span class="line"><span class="regexp">        this.setState(&#123;</span></span><br><span class="line"><span class="regexp">            count:6</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>普通函数中，内层函数不能从外层函数中继承this的值，在内层函数中，this会是window或者undefined（取决于是否使用严格模式），可以设置一个临时变量用来将外部的this值导入到内部函数中，再一个方法就是在内部函数执行.bind(this)。<br>而箭头函数的this是继承父级的this。<br>因此在React中要注意，在一个方法中调用this.setState()等函数，或者在render()方法中被调用，都有内层函数参与，因此需要将该方法的this绑定到class。所以如果是用function的普通方法定义，需要在constructor中bind(this)，如：this.onChange = this.onChange.bind(this);<br>这样this指向组件实例，就可以在render()中使用，也可以在方法中调用this.setState()方法了。<br>或者直接用箭头函数进行定义。这样，this就继承自父级方法render(), 而render()的this为组件实例。<br>这样一来，在render()中就可以愉快的使用了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line">&lt;input onChange=&#123;<span class="keyword">this</span>.onChange&#125;&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>不建议在render()中bind</strong>，如：<input onchange="{this.onChange.bind(this)}">，因为它会在每次render()方法执行时绑定类方法，肯定对于性能有影响。而直接在constructor中bind, 则bind只会在组件实例化初时运行一次。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 前言&lt;/p&gt;
&lt;p&gt;在学习React的过程中发现调用函数的时候必须使用bind(this)，之后直接在class中声明函数即可正常使用，但是为什么要使用这个呢？在这里总结一下。&lt;/p&gt;
&lt;h2 id=&quot;1-JavaScript自身特性说明&quot;&gt;&lt;a href=&quot;#1-
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="bind(this)" scheme="http://yoursite.com/tags/bind-this/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题：如何画一条0.5px的线</title>
    <link href="http://yoursite.com/2019/09/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E5%A6%82%E4%BD%95%E7%94%BB%E4%B8%80%E6%9D%A10.5px%E7%9A%84%E7%BA%BF/"/>
    <id>http://yoursite.com/2019/09/24/前端面试题：如何画一条0.5px的线/</id>
    <published>2019-09-24T15:01:56.845Z</published>
    <updated>2019-09-24T15:03:16.085Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 前言</p><p>理论上1px已经是最小单位了，那如何画一条0.5px的线呢？<br>有以下两种方法</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li><strong>采用meta viewport的方式</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=0.5, minimum-scale=0.5, maximum-scale=0.5"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这样子就能缩放到原来的0.5倍，如果是1px那么就会变成0.5px</p><p>要记得viewport只针对于移动端，只在移动端上才能看到效果</p><ol start="2"><li><strong>采用transform: scale()的方式</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform: scale(<span class="number">0.5</span>,<span class="number">0.5</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 前言&lt;/p&gt;
&lt;p&gt;理论上1px已经是最小单位了，那如何画一条0.5px的线呢？&lt;br&gt;有以下两种方法&lt;/p&gt;
&lt;h2 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h2&gt;&lt;o
      
    
    </summary>
    
      <category term="面试题" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="如何画一条0.5px的线" scheme="http://yoursite.com/tags/%E5%A6%82%E4%BD%95%E7%94%BB%E4%B8%80%E6%9D%A10-5px%E7%9A%84%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>阿里前端笔试：请编写一个JavaScript 函数toRGB，它的作用是转换CSS中常用的颜色编码</title>
    <link href="http://yoursite.com/2019/09/23/%E9%98%BF%E9%87%8C%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AF%95%EF%BC%9A%E8%AF%B7%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAJavaScript%20%E5%87%BD%E6%95%B0toRGB%EF%BC%8C%E5%AE%83%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E8%BD%AC%E6%8D%A2CSS%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E9%A2%9C%E8%89%B2%E7%BC%96%E7%A0%81/"/>
    <id>http://yoursite.com/2019/09/23/阿里前端笔试：请编写一个JavaScript 函数toRGB，它的作用是转换CSS中常用的颜色编码/</id>
    <published>2019-09-23T15:35:55.430Z</published>
    <updated>2019-09-23T15:36:45.443Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 题目</p><p>请编写一个JavaScript 函数toRGB，它的作用是转换CSS中常用的颜色编码。 要求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(toRGB(<span class="string">"#0000FF"</span>));          <span class="comment">// 输出 rgb(0, 0, 255)</span></span><br><span class="line">alert(toRGB(<span class="string">"invalid"</span>));          <span class="comment">// 输出 invalid</span></span><br><span class="line">alert(toRGB(<span class="string">"#G00"</span>));              <span class="comment">// 输出 #G00</span></span><br></pre></td></tr></table></figure><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">"#0000FF"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toRGB</span>(<span class="params">color</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^#([0-9a-fA-F]&#123;2&#125;)([0-9a-fA-F]&#123;2&#125;)([0-9a-fA-F]&#123;2&#125;)$/</span>;</span><br><span class="line"><span class="keyword">var</span> match = color.match(regex);</span><br><span class="line"><span class="keyword">return</span> match ?  <span class="string">'rgb('</span> + <span class="built_in">parseInt</span>(match[<span class="number">1</span>] ,<span class="number">16</span>) + <span class="string">','</span> + <span class="built_in">parseInt</span>(match[<span class="number">2</span>] ,<span class="number">16</span>) + <span class="string">','</span> + <span class="built_in">parseInt</span>(match[<span class="number">3</span>] ,<span class="number">16</span>) + <span class="string">')'</span> : color</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">toRGB(color)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 题目&lt;/p&gt;
&lt;p&gt;请编写一个JavaScript 函数toRGB，它的作用是转换CSS中常用的颜色编码。 要求：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
      <category term="面试题" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题：作用域</title>
    <link href="http://yoursite.com/2019/09/21/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2019/09/21/前端面试题：作用域/</id>
    <published>2019-09-21T15:20:59.809Z</published>
    <updated>2019-09-21T15:21:48.197Z</updated>
    
    <content type="html"><![CDATA[<p>题目代码如下:求运行出的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> num1 = <span class="number">55</span>;</span><br><span class="line">    <span class="keyword">var</span> num2 = <span class="number">66</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">num,num1</span>) </span>&#123;</span><br><span class="line">        num = <span class="number">100</span>;</span><br><span class="line">        num1 = <span class="number">100</span>;</span><br><span class="line">        num2 = <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(num);</span><br><span class="line">        <span class="built_in">console</span>.log(num1);</span><br><span class="line">        <span class="built_in">console</span>.log(num2);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     f1(num1,num2);</span><br><span class="line">     <span class="built_in">console</span>.log(num1);</span><br><span class="line">     <span class="built_in">console</span>.log(num2);</span><br><span class="line">     <span class="built_in">console</span>.log(num);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>分析代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码首先声明了num1,num2,函数f1，接着调用f1</span></span><br><span class="line"> &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">       <span class="keyword">var</span> num1 = <span class="number">55</span>;</span><br><span class="line">       <span class="keyword">var</span> num2 = <span class="number">66</span>; <span class="comment">//=&gt;var num2 = 100</span></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">num,num1</span>) </span>&#123; </span><br><span class="line"><span class="comment">//传入num,num1相当于在函数中定义了num,num1；</span></span><br><span class="line">           <span class="comment">// var num = 55;=&gt;100</span></span><br><span class="line">           <span class="comment">// var num1 = 66;=&gt;100</span></span><br><span class="line"></span><br><span class="line">           num = <span class="number">100</span>;<span class="comment">//将函数中num改为100</span></span><br><span class="line">           num1 = <span class="number">100</span>;<span class="comment">//将函数中num1改为100</span></span><br><span class="line">           num2 = <span class="number">100</span>;<span class="comment">//函数中找不到num2，则找到全局定义的num2改为100</span></span><br><span class="line">           <span class="built_in">console</span>.log(num);<span class="comment">//函数内num 100</span></span><br><span class="line">           <span class="built_in">console</span>.log(num1);<span class="comment">//函数内num1 100</span></span><br><span class="line">           <span class="built_in">console</span>.log(num2);<span class="comment">//函数内num2 100</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        f1(num1,num2);</span><br><span class="line">        <span class="comment">// 函数内的是局部作用域调用不到，所以下面打印出来的是全局作用域里的</span></span><br><span class="line">        <span class="built_in">console</span>.log(num1);<span class="comment">//55</span></span><br><span class="line">        <span class="built_in">console</span>.log(num2);<span class="comment">//全局的被修改为100，所以这里打印出来的也是100</span></span><br><span class="line">        <span class="built_in">console</span>.log(num);<span class="comment">//全局作用域里没有这个，找不到报错</span></span><br><span class="line">   &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://img-blog.csdnimg.cn/20190911101357766.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目代码如下:求运行出的结果&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s
      
    
    </summary>
    
      <category term="面试题" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>栈和堆的区别 栈和堆的区别</title>
    <link href="http://yoursite.com/2019/09/20/%E6%A0%88%E5%92%8C%E5%A0%86%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/09/20/栈和堆的区别/</id>
    <published>2019-09-20T15:11:57.112Z</published>
    <updated>2019-09-20T15:13:47.147Z</updated>
    
    <content type="html"><![CDATA[<p>﻿### 一、程序的内存分配方式不同</p><ul><li>栈区（stack）：<strong>编译器自动分配释放</strong>，存放函数的参数值，局部变量的值等，其操作方式类似于数据结构的栈。</li><li>堆区（heap）：<strong>一般是由程序员分配释放</strong>，若程序员不释放的话，程序结束时可能由OS回收，值得注意的是他与数据结构的堆是两回事，分配方式倒是类似于数据结构的链表。<h3 id="二、申请方式不同"><a href="#二、申请方式不同" class="headerlink" title="二、申请方式不同"></a>二、申请方式不同</h3></li><li>stack 由系统自动分配，heap 需要程序员自己申请。</li><li>C 中用函数 malloc分配空间，用 free 释放，C++用 new 分配，用 delete 释放。<h3 id="三、申请后系统的响应不同"><a href="#三、申请后系统的响应不同" class="headerlink" title="三、申请后系统的响应不同"></a>三、申请后系统的响应不同</h3></li><li>栈：只要栈的剩余空间大于所申请的空间，系统将为程序提供内存，否则将报异常提示栈溢出。</li><li>堆：首先应该知道操作系统有一个记录内存地址的<strong>链表</strong>，当系统收到程序的申请时，遍历该链表，寻找第一个空间大于所申请的空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序。另外，对于大多数系统，会在这块内存空间中的首地址处<strong>记录本次分配的大小</strong>，这样代码中的 delete 或 free 语句就能够正确的释放本内存空间。另外，由于找到的堆结点的大小不一定正好等于申请的大小，系统会将多余的那部分重新放入空闲链表中。<h3 id="四、-申请的大小限制不同"><a href="#四、-申请的大小限制不同" class="headerlink" title="四、 申请的大小限制不同"></a>四、 申请的大小限制不同</h3></li><li>栈：在 windows 下，栈是<strong>向低地址扩展</strong>的数据结构，是一块<strong>连续的内存区域</strong>，栈顶的地址和栈的最大容量是系统预先规定好的，能从栈获得的空间较小。</li><li>堆：堆是<strong>向高地址扩展</strong>的数据结构，是<strong>不连续的内存区域</strong>，这是由于系统是由链表在存储空闲内存地址，自然堆就是不连续的内存区域，且链表的遍历也是从低地址向高地址遍历的，堆得大小受限于计算机系统的<strong>有效虚拟内存空间</strong>，由此空间，堆获得的空间比较灵活，也比较大。<h3 id="五、申请的效率不同"><a href="#五、申请的效率不同" class="headerlink" title="五、申请的效率不同"></a>五、申请的效率不同</h3></li><li>栈：栈由系统自动分配，<strong>速度快</strong>，但是程序员<strong>无法控制</strong>。</li><li>堆：堆是有程序员<strong>自己分配</strong>，<strong>速度较慢</strong>，容易产生碎片，不过用起来方便。<h3 id="六、堆和栈的存储内容不同"><a href="#六、堆和栈的存储内容不同" class="headerlink" title="六、堆和栈的存储内容不同"></a>六、堆和栈的存储内容不同</h3></li><li>栈：在函数调用时，<strong>第一个进栈的是主函数中函数调用后的下一条指令的地址</strong>，然后函数的各个参数，在大多数的 C 编译器中，参数是从右往左入栈的，当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令。</li><li>堆：<strong>一般是在堆的头部用一个字节存放堆的大小</strong>，具体内容由程序员安排。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿### 一、程序的内存分配方式不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;栈区（stack）：&lt;strong&gt;编译器自动分配释放&lt;/strong&gt;，存放函数的参数值，局部变量的值等，其操作方式类似于数据结构的栈。&lt;/li&gt;
&lt;li&gt;堆区（heap）：&lt;strong&gt;一般是由程序员分配
      
    
    </summary>
    
      <category term="计算机基础" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>前端面试题：封装函数进行字符串驼峰命名的转换</title>
    <link href="http://yoursite.com/2019/09/17/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E5%B0%81%E8%A3%85%E5%87%BD%E6%95%B0%E8%BF%9B%E8%A1%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A9%BC%E5%B3%B0%E5%91%BD%E5%90%8D%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>http://yoursite.com/2019/09/17/前端面试题：封装函数进行字符串驼峰命名的转换/</id>
    <published>2019-09-17T15:09:22.794Z</published>
    <updated>2019-09-17T15:09:55.823Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 题目：封装函数进行字符串驼峰命名的转换</p><p><strong>解：代码如下：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params">foo</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> foo = foo;</span><br><span class="line">        <span class="keyword">var</span> arr = foo.split(<span class="string">'-'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">            arr[i] = arr[i].charAt(<span class="number">0</span>).toUpperCase() + arr[i].substr(<span class="number">1</span>,arr[length<span class="number">-1</span>])</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span>(arr.join(<span class="string">''</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(toString( <span class="string">"get-element-by-id"</span>)) <span class="comment">//结果：getElementById</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>补充：<br>split() 方法用于把一个字符串分割成字符串数组。<br>charAt() 方法可返回指定位置的字符。<br>toUpperCase() 方法用于把字符串转换为大写。<br>substr() 方法可在字符串中抽取从 start 下标开始的指定数目的字符。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 题目：封装函数进行字符串驼峰命名的转换&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解：代码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="面试题" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>React项目--如何mock数据？</title>
    <link href="http://yoursite.com/2019/09/15/React%E9%A1%B9%E7%9B%AE--%E5%A6%82%E4%BD%95mock%E6%95%B0%E6%8D%AE%EF%BC%9F/"/>
    <id>http://yoursite.com/2019/09/15/React项目--如何mock数据？/</id>
    <published>2019-09-15T08:13:54.102Z</published>
    <updated>2019-09-15T08:15:05.299Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 前言</p><p>在开发项目时，前端需要和后端对接数据，但有时后端并没有写好数据，前端还需要继续往下开发，这时候就需要mock数据了。</p><h2 id="如何mock数据？"><a href="#如何mock数据？" class="headerlink" title="如何mock数据？"></a>如何mock数据？</h2><p>如下代码，在input获得焦点时调用getList()方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapDispathToProps = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        handleInputFocus() &#123;</span><br><span class="line">            dispatch(actionCreators.getList())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>getList()方法是通过Ajax获取数据，此时后端并没有写好，所以自己mock一个数据。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getList = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">        axios.get(<span class="string">'/api/headerList.json'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> data = res.data;</span><br><span class="line">            <span class="built_in">console</span>.log(data)</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'error'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>axios.get(&#39;/api/headerList.json&#39;)</code>这句代码，计算机会首先去src目录下寻找<code>/api/headerList.json</code>,没有找到然后去<code>public</code>目录下找，此时我们在public目录下建立<code>/api/headerList.json</code>文件，文件如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"success"</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"data"</span>:[<span class="string">"微信"</span>,<span class="string">"支付宝"</span>,<span class="string">"蚂蚁金服"</span>,<span class="string">"被骗"</span>,<span class="string">"借呗"</span>,<span class="string">"诈骗"</span>,<span class="string">"盗窃"</span>,<span class="string">"pandas"</span>,<span class="string">"TensorFlow"</span>,<span class="string">"PyTorch"</span>,<span class="string">"Caffe"</span>,<span class="string">"scikit-learn"</span>,<span class="string">"Python"</span>,<span class="string">"Keras"</span>,<span class="string">"pyecharts"</span>,<span class="string">"ggplot"</span>,<span class="string">"Matplotlib"</span>,<span class="string">"Gensim"</span>,<span class="string">"Bokeh"</span>,<span class="string">"Theano"</span>,<span class="string">"Scrapy"</span>,<span class="string">"SciPy"</span>,<span class="string">"Plotly"</span>,<span class="string">"NumPy"</span>,<span class="string">"XGBoost"</span>,<span class="string">"是"</span>,<span class="string">"他"</span>,<span class="string">"有"</span>,<span class="string">"光大永明"</span>,<span class="string">"我"</span>,<span class="string">"要"</span>,<span class="string">"人"</span>,<span class="string">"Android"</span>,<span class="string">"女"</span>,<span class="string">"大"</span>,<span class="string">"不"</span>,<span class="string">"着"</span>,<span class="string">"男"</span>,<span class="string">"它"</span>,<span class="string">"二"</span>,<span class="string">"于"</span>,<span class="string">"中"</span>,<span class="string">"java"</span>,<span class="string">"把"</span>,<span class="string">"上"</span>,<span class="string">"这"</span>,<span class="string">"下"</span>,<span class="string">"的"</span>,<span class="string">"了"</span>,<span class="string">"来"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时返回的数据就是以上数据，通过<code>console.log(res.data)</code>打印数据如下图：<br><img src="https://img-blog.csdnimg.cn/20190907154121149.png" alt="在这里插入图片描述"></p><p>这样mock数据就成功了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 前言&lt;/p&gt;
&lt;p&gt;在开发项目时，前端需要和后端对接数据，但有时后端并没有写好数据，前端还需要继续往下开发，这时候就需要mock数据了。&lt;/p&gt;
&lt;h2 id=&quot;如何mock数据？&quot;&gt;&lt;a href=&quot;#如何mock数据？&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="mock数据" scheme="http://yoursite.com/tags/mock%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题：值类型和引用类型的传递</title>
    <link href="http://yoursite.com/2019/09/13/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%BC%A0%E9%80%92/"/>
    <id>http://yoursite.com/2019/09/13/前端面试题：值类型和引用类型的传递/</id>
    <published>2019-09-13T09:40:42.593Z</published>
    <updated>2019-09-13T09:41:55.166Z</updated>
    
    <content type="html"><![CDATA[<p>﻿题目如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,salary</span>) </span>&#123; </span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">      <span class="keyword">this</span>.salary = salary;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">person</span>) </span>&#123; </span><br><span class="line">       person.name = <span class="string">"ls"</span>;</span><br><span class="line">       person = <span class="keyword">new</span> Person(<span class="string">"aa"</span>,<span class="number">18</span>,<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">"zs"</span>,<span class="number">18</span>,<span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(p.name);</span><br><span class="line">    f1(p);</span><br><span class="line">    <span class="built_in">console</span>.log(p.name)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>分析代码：首先定义了一个构造函数Person，然后定义了一个普通函数f1，<code>var p = new Person(&quot;zs&quot;,18,1000);</code>这句话new了一个对象，所以第一个打印出来的是：zs;<br><code>f1(p);</code>这句话把p这个对象传入f1，<code>person.name = &quot;ls&quot;;</code>把p的name属性改为”ls”,<br><code>person = new Person(&quot;aa&quot;,18,10);</code>这句话重新new了一个对象，并且把person指向到了这个新的对象上，但这对p没有影响，所以最后打印出来的是”ls”</p></blockquote><p>画图说明：<br><img src="https://img-blog.csdnimg.cn/20190911104818340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>结果：<br><img src="https://img-blog.csdnimg.cn/20190911105447374.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿题目如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;
      
    
    </summary>
    
      <category term="面试题" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>redux的工作流程以及subscribe的作用</title>
    <link href="http://yoursite.com/2019/09/03/redux%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E4%BB%A5%E5%8F%8Asubscribe%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://yoursite.com/2019/09/03/redux的工作流程以及subscribe的作用/</id>
    <published>2019-09-03T14:34:40.392Z</published>
    <updated>2019-09-03T14:37:57.753Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## redux的工作流程</p><ol><li>使用函数createStore创建store数据点</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducer'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">    reducer,</span><br><span class="line">    <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION__()</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建Reducer。它要改变的组件，它获取state和action，生成新的state</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CHANGE_INPUT_VALUE,ADD_TODO_ITEM,DELETE_TODO_ITEM &#125; <span class="keyword">from</span> <span class="string">'./actionTpyes'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultState = &#123;</span><br><span class="line">     inputValue:<span class="string">''</span>,</span><br><span class="line">     list: []</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// reducer 可以接收state，但是绝不能修改state</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state = defaultState,action) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(action.type === CHANGE_INPUT_VALUE) &#123;</span><br><span class="line">        <span class="keyword">const</span> newState = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(state));</span><br><span class="line">        newState.inputValue = action.value;</span><br><span class="line">        <span class="keyword">return</span> newState</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(action.type === ADD_TODO_ITEM) &#123;</span><br><span class="line">        <span class="keyword">const</span> newState = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(state));</span><br><span class="line">        newState.list.push(newState.inputValue);</span><br><span class="line">        newState.inputValue = <span class="string">''</span></span><br><span class="line">        <span class="keyword">return</span> newState</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(action.type ===  DELETE_TODO_ITEM) &#123;</span><br><span class="line">        <span class="keyword">const</span> newState = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(state));</span><br><span class="line">        newState.list.splice(action.index,<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> newState</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>用subscribe监听每次修改情况</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    store.subscribe(<span class="keyword">this</span>.handleStoreChange)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>dispatch执行，reducer(currentState,action)处理当前dispatch后的传入的action.type并返回给currentState处理后的state，通过currentListeners.forEach(v=&gt;v())执行监听函数，并最后返回当前 action状态</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">handleItemDelete(index) &#123;</span><br><span class="line">    <span class="keyword">const</span> action = &#123;</span><br><span class="line">        type: DELETE_TODO_ITEM,</span><br><span class="line">        index</span><br><span class="line">    &#125;</span><br><span class="line">    store.dispatch(action)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="subscribe的作用"><a href="#subscribe的作用" class="headerlink" title="subscribe的作用"></a>subscribe的作用</h2><p>subscribe 这个函数是用来去订阅 store 的变化，比如你每次对 store 进行 dispatch(action) 都会触发 subscribe 注册的函数调用，这个在实际情况不是必须要的，看自己的应用场景，比如你想监控 store 的全局变化时 可以用 subscript 订阅一下，然后作一些反应</p><p>每次通过dispatch 修改数据的时候，其实只是数据发生了变化，如果不手动调用 render方法，页面上的内容是不会发生变化的。</p><p>但是每次dispatch之后都手动调用很麻烦啊，所以就使用了发布订阅模式，监听数据变化来自动渲染。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## redux的工作流程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用函数createStore创建store数据点&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="redux的工作流程" scheme="http://yoursite.com/tags/redux%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>一张图理清React中的生命周期</title>
    <link href="http://yoursite.com/2019/08/24/%E4%B8%80%E5%BC%A0%E5%9B%BE%E7%90%86%E6%B8%85React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/08/24/一张图理清React生命周期函数/</id>
    <published>2019-08-24T09:04:51.212Z</published>
    <updated>2019-08-24T09:05:48.313Z</updated>
    
    <content type="html"><![CDATA[<p><strong>生命周期函数是指在某一时刻组件会自动调用执行的函数。</strong><br><img src="https://img-blog.csdnimg.cn/20190824165935974.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;生命周期函数是指在某一时刻组件会自动调用执行的函数。&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190824165935974.jpg?x-oss-process=image/watermark,
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="生命周期" scheme="http://yoursite.com/tags/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>用vue-cli脚手架开发APP的步骤</title>
    <link href="http://yoursite.com/2019/08/09/%E7%94%A8vue-cli%E8%84%9A%E6%89%8B%E6%9E%B6%E5%BC%80%E5%8F%91APP%E7%9A%84%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2019/08/09/用vue-cli脚手架开发APP的步骤/</id>
    <published>2019-08-09T08:47:41.711Z</published>
    <updated>2019-08-09T08:49:31.415Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 前言</p><p>本文主要记录vue-cli脚手架开发app的步骤，如果还未安装vue-cli的请查看<a href="https://cli.vuejs.org/zh/guide/installation.html" target="_blank" rel="noopener">vue-cli官方文档</a>有详细过程。</p><p>项目地址：<a href="https://github.com/OYZQ/vue-cli-dome/settings" target="_blank" rel="noopener">vue-cli-demo</a></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>点击链接实现界面跳转，下方底部可以改成导航栏，中间内容自己修改。<br><img src="https://img-blog.csdnimg.cn/20190730163620742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190730163639685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1-创建模板"><a href="#1-创建模板" class="headerlink" title="1.创建模板"></a>1.创建模板</h3><p>运行以下命令来创建一个新项目(项目名自己随意)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create test3</span><br></pre></td></tr></table></figure><p>你会被提示选取一个 preset。你可以选默认的包含了基本的 Babel + ESLint 设置的 preset，也可以选“手动选择特性”来选取需要的特性。这里直接回车即可。<br><img src="https://img-blog.csdnimg.cn/20190730155849487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>等待下载，下载完会看到看到如下图所示，根据提示，<code>cd hello-world</code>进入目录，然后<code>npm run serve</code>启动<br><img src="https://img-blog.csdnimg.cn/20190730160448365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>启动好，默认8080端口，用浏览器打开网址，就可以看到vue-cli的模板启动成功<br><img src="https://img-blog.csdnimg.cn/20190730160534851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-删除无用文件"><a href="#2-删除无用文件" class="headerlink" title="2.删除无用文件"></a>2.删除无用文件</h3><p>用编辑器打开项目文件，看到目录结构如下：<br><img src="https://img-blog.csdnimg.cn/20190730160708561.png" alt="在这里插入图片描述"><br>src/assets下面图片就是打开页面的logo图片没用可以连带着assets目录一起删除。</p><p>src/components下面有一个HelloWorld.vue文件就是刚才浏览器打开的页面可以删除。</p><p>src下面的App.vue文件修改如下：<br>只留下简单框架，内容都删了<br><img src="https://img-blog.csdnimg.cn/20190730161137575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>public/index.html修改如下：<br>也只留下简单模板<br><img src="https://img-blog.csdnimg.cn/20190730161300500.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后浏览器页面一片空白，可以开始写代码</p><h3 id="3-写代码"><a href="#3-写代码" class="headerlink" title="3.写代码"></a>3.写代码</h3><p>components下面随意写几个页面，目录结构如下：<br><img src="https://img-blog.csdnimg.cn/20190730161850418.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190730161946928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后实现路由跳转使用<code>vue-router</code>,首先<code>npm install vue-router --save</code>安装<br><img src="https://img-blog.csdnimg.cn/20190730162214442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在src下建src/router/router.js文件管理路由，注册路由<br><img src="https://img-blog.csdnimg.cn/20190730162342265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后在src下面的main.js里面引用，并且挂载<br><img src="https://img-blog.csdnimg.cn/20190730162504149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最后一步，修改App.vue文件<br>只是加了一行代码，router-view 可以当做是一个容器，它渲染的组件是你使用 vue-router 指定的。<br><img src="https://img-blog.csdnimg.cn/20190730163038223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 前言&lt;/p&gt;
&lt;p&gt;本文主要记录vue-cli脚手架开发app的步骤，如果还未安装vue-cli的请查看&lt;a href=&quot;https://cli.vuejs.org/zh/guide/installation.html&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="用vue-cli脚手架开发APP的步骤" scheme="http://yoursite.com/tags/%E7%94%A8vue-cli%E8%84%9A%E6%89%8B%E6%9E%B6%E5%BC%80%E5%8F%91APP%E7%9A%84%E6%AD%A5%E9%AA%A4/"/>
    
  </entry>
  
  <entry>
    <title>关于Img标签绑定_src不显示图片</title>
    <link href="http://yoursite.com/2019/08/08/%E5%85%B3%E4%BA%8EImg%E6%A0%87%E7%AD%BE%E7%BB%91%E5%AE%9A_src%E4%B8%8D%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/2019/08/08/关于Img标签绑定_src不显示图片/</id>
    <published>2019-08-08T10:57:05.717Z</published>
    <updated>2019-08-08T10:58:18.908Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 问题</p><p>如下图所示动态绑定src，不显示图片，将路径换成网络图片地址又可以显示<br><img src="https://img-blog.csdnimg.cn/20190731163052166.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190731163059508.png" alt="在这里插入图片描述"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>引用本地图片需要加上require，使用require定义之后，就可以动态使用了，不用require你就只能写死的。不用 :src=”‘../img/image.jpg’” 会被解析为字符串<br><img src="https://img-blog.csdnimg.cn/2019073116330411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 问题&lt;/p&gt;
&lt;p&gt;如下图所示动态绑定src，不显示图片，将路径换成网络图片地址又可以显示&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190731163052166.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;br&gt;&lt;im
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="关于Img标签绑定" scheme="http://yoursite.com/tags/%E5%85%B3%E4%BA%8EImg%E6%A0%87%E7%AD%BE%E7%BB%91%E5%AE%9A/"/>
    
  </entry>
  
  <entry>
    <title>轮播插件vue-awesome-swiper的使用方法</title>
    <link href="http://yoursite.com/2019/08/04/%E8%BD%AE%E6%92%AD%E6%8F%92%E4%BB%B6vue-awesome-swiper%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/08/04/轮播插件vue-awesome-swiper的使用方法/</id>
    <published>2019-08-04T08:30:29.751Z</published>
    <updated>2019-08-04T08:31:13.594Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 前言</p><p>在使用vue框架写项目时，轮播图是经常需要用到的，在这里推荐一款vue的轮播图插件vue-awesome-swiper。支持多种样式，<a href="https://surmon-china.github.io/vue-awesome-swiper/" target="_blank" rel="noopener">点击样式预览</a>。贴上地址：<a href="https://github.com/surmon-china/vue-awesome-swiper" target="_blank" rel="noopener">vue-awesome-swiper</a></p><h2 id="安装引用"><a href="#安装引用" class="headerlink" title="安装引用"></a>安装引用</h2><ol><li><code>npm install vue-awesome-swiper --save</code></li><li>在<code>main.js</code>文件中引入，和<code>vue-router</code>使用差不多<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueAwesomeSwiper <span class="keyword">from</span> <span class="string">'vue-awesome-swiper'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// require styles</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'swiper/dist/css/swiper.css'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueAwesomeSwiper, <span class="comment">/* &#123; default global options &#125; */</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在VUE中经常需要循环遍历图片然后生成轮播图，加上一个动态指示点像这样：<br><img src="https://img-blog.csdnimg.cn/20190801142525287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>代码如下：</p><blockquote><p>js部分是一些设置例如循环播放，间隔时间，指示器设置等<br>这里需要注意的是数据里动态绑定src使用本地图片需要使用require，若使用网络图片则不需要</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swiper</span> <span class="attr">:options</span>=<span class="string">"swiperOption"</span>&gt;</span>//这既是图片轮播</span><br><span class="line">      <span class="tag">&lt;<span class="name">swiper-slide</span> <span class="attr">v-for</span>=<span class="string">"item of swiperlist"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"swiper-img"</span> <span class="attr">:src</span>=<span class="string">"item.imgurl"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">swiper-slide</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-pagination weiz"</span> <span class="attr">slot</span>=<span class="string">"pagination"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      // 上面div是指示器不需要可以删除，要其他样式例如前进后退按钮切换可以自己修改，官方文档都有</span><br><span class="line">    <span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ecmascript-6"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">      swiperlist: [</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          imgurl: <span class="built_in">require</span>(<span class="string">"../../assets/img/banner/1.webp"</span>)</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          imgurl: <span class="built_in">require</span>(<span class="string">"../../assets/img/banner/2.webp"</span>)</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          imgurl: <span class="built_in">require</span>(<span class="string">"../../assets/img/banner/3.webp"</span>)</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          imgurl: <span class="built_in">require</span>(<span class="string">"../../assets/img/banner/4.webp"</span>)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      ],</span></span><br><span class="line"><span class="undefined">      swiperOption: &#123;</span></span><br><span class="line"><span class="undefined">        pagination: &#123;</span></span><br><span class="line"><span class="javascript">          el: <span class="string">".swiper-pagination"</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        autoplay: &#123;</span></span><br><span class="line"><span class="undefined">          delay: 3000,</span></span><br><span class="line"><span class="javascript">          disableOninteraction: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        loop: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 前言&lt;/p&gt;
&lt;p&gt;在使用vue框架写项目时，轮播图是经常需要用到的，在这里推荐一款vue的轮播图插件vue-awesome-swiper。支持多种样式，&lt;a href=&quot;https://surmon-china.github.io/vue-awesome-swip
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue-awesome-swiper" scheme="http://yoursite.com/tags/vue-awesome-swiper/"/>
    
  </entry>
  
  <entry>
    <title>自适应方案：在vue项目中使用postcss-px2rem</title>
    <link href="http://yoursite.com/2019/08/04/%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88%EF%BC%9A%E5%9C%A8vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8postcss-px2rem/"/>
    <id>http://yoursite.com/2019/08/04/自适应方案：在vue项目中使用postcss-px2rem/</id>
    <published>2019-08-04T08:29:18.201Z</published>
    <updated>2019-08-04T08:30:21.371Z</updated>
    
    <content type="html"><![CDATA[<p>﻿在src目录下创建 viewport.js</p><p>文件下载：<a href="https://github.com/imochen/hotcss/tree/master/src" target="_blank" rel="noopener">https://github.com/imochen/hotcss/tree/master/src</a></p><p>这个JS是用来在页面打开的时候给HTML根加上适配的字体大小</p><p>然后在main.js下添加：</p><p><code>import &#39;./viewport.js&#39;</code></p><p><strong>这里强调下为什么不使用lib-flexible插件</strong><br>个人在使用lib-flexible插件时，感觉没hotcss友好，<br>lib-flexible在页面打开的时候，内容渲染完了才在HTML根上添加适配，这样页面会重新渲染一次，导致内容从大变小，或从小变大这样的BUG。<br>而hotcss就没这个问题。</p><p>接下来要安装换算PX换算REM插件<br><code>cnpm install postcss-px2rem --save</code><br>然后在 <code>vue.config.js</code>加入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    lintOnSave: <span class="literal">false</span>,<span class="comment">//关闭eslint</span></span><br><span class="line">    css: &#123;</span><br><span class="line">        loaderOptions: &#123;</span><br><span class="line">            postcss: &#123;</span><br><span class="line">                plugins: [</span><br><span class="line">                    <span class="built_in">require</span>(<span class="string">'postcss-px2rem'</span>)(&#123;<span class="attr">remUnit</span>: <span class="number">75</span>&#125;), <span class="comment">// 换算的基数</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后重启</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿在src目录下创建 viewport.js&lt;/p&gt;
&lt;p&gt;文件下载：&lt;a href=&quot;https://github.com/imochen/hotcss/tree/master/src&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://git
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="postcss-px2rem" scheme="http://yoursite.com/tags/postcss-px2rem/"/>
    
  </entry>
  
  <entry>
    <title>router-link-active 与 router-link-exact-active 区别</title>
    <link href="http://yoursite.com/2019/07/28/router-link-active%20%E4%B8%8E%20router-link-exact-active%20%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/07/28/router-link-active 与 router-link-exact-active 区别/</id>
    <published>2019-07-28T07:22:08.070Z</published>
    <updated>2019-07-28T08:25:02.255Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## router-link-exact-active</p><p>router-link-exact-active 是精确匹配规则，即只有当前点击router被匹配</p><h2 id="router-link-active"><a href="#router-link-active" class="headerlink" title="router-link-active"></a>router-link-active</h2><p>router-link-active 默认是全包含匹配规则，即path名全包含在当前router path名开头的router也会被匹配到。</p><p>　　　　　　　1. \<router-link to="/"></router-link></p><p>　　　　　　　2. \<router-link to="/a"></router-link></p><p>　　　　　　　3. \<router-link to="/b"></router-link></p><p>　　　　　　　4. \<router-link to="/ab"></router-link></p><p>　　　　　　　2/3号被选中 1号也会被匹配到router-link-active，4号被选中1号2号两个也会被匹配到router-link-active。</p><p>　　　　　　　<strong>可以通过在router添加exact属性改变为精精确匹配。</strong></p><p>我遇到两个router同时匹配class：router-link-active 的情况，而我预期是被点击的router匹配。查了官方文档得知<br><img src="https://img-blog.csdnimg.cn/2019072615391839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## router-link-exact-active&lt;/p&gt;
&lt;p&gt;router-link-exact-active 是精确匹配规则，即只有当前点击router被匹配&lt;/p&gt;
&lt;h2 id=&quot;router-link-active&quot;&gt;&lt;a href=&quot;#router-li
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="router-link" scheme="http://yoursite.com/tags/router-link/"/>
    
  </entry>
  
  <entry>
    <title>webpack打包进行丑化压缩遇到（TypeError_ Cannot read property &#39;compilation&#39; of undefined）问题</title>
    <link href="http://yoursite.com/2019/07/27/webpack%E6%89%93%E5%8C%85%E8%BF%9B%E8%A1%8C%E4%B8%91%E5%8C%96%E5%8E%8B%E7%BC%A9%E9%81%87%E5%88%B0%EF%BC%88TypeError_%20Cannot%20read%20property%20&#39;compilation&#39;%20of%20undefined%EF%BC%89%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/07/27/webpack打包进行丑化压缩遇到（TypeError_ Cannot read property &#39;compilation&#39; of undefined）问题/</id>
    <published>2019-07-27T09:06:19.036Z</published>
    <updated>2019-07-27T09:07:03.187Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 问题</p><p>在使用vue官方推荐打包插件UglifyjsWebpackPlugin对webpack打包时遇到TypeError: Cannot read property ‘compilation’ of undefined<br><img src="https://img-blog.csdnimg.cn/20190726134626808.png" alt="在这里插入图片描述"></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>很明显，这是node一些包的版本对应不上的问题</p><p>将项目中的该包升级或者降级到1.0.0版本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i uglifyjs-webpack-plugin@<span class="number">1.0</span><span class="number">.0</span> --save</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190726134816951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 问题&lt;/p&gt;
&lt;p&gt;在使用vue官方推荐打包插件UglifyjsWebpackPlugin对webpack打包时遇到TypeError: Cannot read property ‘compilation’ of undefined&lt;br&gt;&lt;img src=&quot;htt
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="问题" scheme="http://yoursite.com/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
</feed>
