<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OuYang&#39;blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-04T06:18:54.401Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>OuYang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MVC和MVVM的区别</title>
    <link href="http://yoursite.com/2019/06/04/MVC%E5%92%8CMVVM%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/06/04/MVC和MVVM的区别/</id>
    <published>2019-06-04T06:24:25.797Z</published>
    <updated>2019-06-04T06:18:54.401Z</updated>
    
    <content type="html"><![CDATA[<p>﻿@[toc]</p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>mvc和mvvm究竟是怎么样子的，这是一个前后端都需要思考的问题。后面我们一步步来阐述mvc和mvvm这样设计的原因以及我们需要明白的一些问题。</p><hr><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。</p><blockquote><p>几乎所有的App都只干这么一件事：将数据展示给用户看，并处理用户对界面的操作。<br>MVC的思想：一句话描述就是Controller负责将Model的数据用View显示出来，换句话说就是在Controller里面把Model的数据赋值给View。</p></blockquote><hr><h3 id="M"><a href="#M" class="headerlink" title="M"></a>M</h3><p><strong>Model</strong>（模型）：是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据。</p><blockquote><p>比如我们人类有一双手，一双眼睛，一个脑袋，没有尾巴，这就是模型，Model定义了这个模块的数据模型。<br>在代码中体现为数据管理者，Model负责对数据进行获取及存放。<br>数据不可能凭空生成的，要么是从服务器上面获取到的数据，要么是本地数据库中的数据，<br>也有可能是用户在UI上填写的表单即将上传到服务器上面存放，所以需要有数据来源。<br>既然Model是数据管理者，则自然由它来负责获取数据。<br>Controller不需要关心Model是如何拿到数据的，只管调用就行了。<br>数据存放的地方是在Model，而使用数据的地方是在Controller，<br>所以Model应该提供接口供controller访问其存放的数据（通常通过.h里面的只读属性）</p></blockquote><hr><h3 id="V"><a href="#V" class="headerlink" title="V"></a>V</h3><p><strong>View</strong>（视图）：是应用程序中处理数据显示的部分。通常视图是依据模型数据创建的。</p><blockquote><p>View，视图，简单来说，就是我们在界面上看见的一切。<br>它们有一部分是我们UI定死的，也就是不会根据数据来更新显示的，比如一些Logo图片啊，这里有个按钮啊，那里有个输入框啊，一些显示特定内容label啊等等；有一部分是会根据数据来显示内容的，比如tableView来显示好友列表啊，这个tableView的显示内容肯定是根据数据来显示的。我们使用MVC解决问题的时候，通常是解决这些根据数据来显示内容的视图。</p></blockquote><hr><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p><strong>Controller</strong>（控制器）：是应用程序中处理用户交互的部分。通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。</p><blockquote><p>Controller是MVC中的数据和视图的协调者，也就是在Controller里面把Model的数据赋值给View来显示（或者是View接收用户输入的数据然后由Controller把这些数据传给Model来保存到本地或者上传到服务器）。</p></blockquote><p>综合以上内容，实际上你应该可以通过面向对象的基本思想来推导出controller出现的原因：我们所有的App都是界面和数据的交互，所以需要类来进行界面的绘制，于是出现了View，需要类来管理数据于是出现了Model。我们设计的View应该能显示任意的内容比如UILabel显示的文字应该是任意的而不只是某个特定Model的内容，所以我们不应该在View的实现中去写和Model相关的任何代码，如果这样做了，那么View的可扩展性就相当低了。而Model只是负责处理数据的，它根本不知道数据到时候会拿去干啥，可能拿去作为算法噼里啪啦去了，可能拿去显示给用户了，它既然无法接收用户的交互，它就不应该去管和视图相关的任何信息，所以Model中不应该写任何View相关代码。然而我们的数据和界面应该同步，也就是一定要有个地方要把Model的数据赋值给View，而Model内部和View的内部都不可能去写这样的代码，所以只能新创造一个类出来了，取名为Controller。它被UIKit逐渐完善成了我们现在使用的UIViewController。</p><hr><h3 id="下面看这张图"><a href="#下面看这张图" class="headerlink" title="下面看这张图"></a>下面看这张图</h3><p>斯坦福大学公开课上的这幅图来说明，这可以说是最经典和最规范的MVC标准<br><img src="https://img-blog.csdnimg.cn/201904232014235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">这张图把MVC分为三个独立的区域，并且中间用了一些线来隔开。很有意思的设计，因为这些线似乎出现在了驾校科目一的内容中，你瞧C和V以及C和M之间的白线，一部分是虚线一部分是实线对吧，这就表明了引用关系：C可以直接引用V和M，而V和M不能直接引用C，至少你不能显式的在V和M的代码中去写和C相关的任何代码，而V和M之间则是双黄线，没错，它们俩谁也不能引用谁，你既不能在M里面写V，也不能在V里面写M。哦，上面的描述有点小小的问题，你不是“不能”这样写，而是“不应该”这样写，没人能阻止你在写代码的时候在一个M里面去写V，但是一旦你这样做了，那么你就违背了MVC的规范，你就不是在使用MVC了，所以这算是MVC的一个必要条件：使用MVC –&gt; M里面没有V的代码。所以M里面没有V的代码就是使用MVC的必要条件。</p><hr><h3 id="View和Controller的交互"><a href="#View和Controller的交互" class="headerlink" title="View和Controller的交互"></a>View和Controller的交互</h3><p>按钮点击事件，是View来接收的，但是处理这个事件的应该是Controller，所以View把这个事件传递给了Controller，如何传递的呢，见图，看到View上面的action没有，这就是事件，看到Controller上面的target没有，这就是靶子，View究竟要把事件传递给谁，它被规定了传递给靶子，Controller实际上就是靶子。只是View只负责传递事件，不负责关心靶子是谁。就像你是一个负责运货的少年，你唯一知道的是你要把货（action）交给上头（开发者）告诉你的那个收货的人（target），至于那个收货的人是警察还是怪兽，你都不需要关心。这是V和C的一种交互方式，叫做target-action。所以你看，这张图简直就是神来之笔，旁边还栩栩如生的画出了V对C的另一种传值：协议-委托。委托有两种：代理和数据源。什么是代理，就是专门处理should、will、did事件的委托，什么是数据源，就是专门处理data、count等等的委托。</p><h3 id="Model和Controller的交互"><a href="#Model和Controller的交互" class="headerlink" title="Model和Controller的交互"></a>Model和Controller的交互</h3><p>M是干嘛的？上面说了，M就是数据管理者，你可以理解为它直接和数据库打交道。这里的数据库可能是本地的，也可能是服务器上的，M会从数据库获取数据，也可能把数据上传给数据库。M也将提供属性或者接口来供C访问其持有的数据。我们就拿一个简单的需求作为例子，假如我想在一个模块中显示一段文字，这段文字是从网上获取下来的。<br>那么使用MVC的话，在C中肯定需要一个UILabel（V）作为属性来显示这段文字，而这段文字由谁来获取呢，肯定是由M来获取了。而获取的地方在哪里呢？通常在C的生命周期里面，所以往往是在C的一个生命周期方法比如viewDidLoad里面调用M获取数据的方法来获取数据。现在问题来了，M获取数据的方法是异步的网络请求，网络请求结束后，C才应该用请求下来的数据重新赋值给V，现在的问题是，C如何知道网络请求结束了？<br>这里我们一定要换一种角度去思考，我们进一步考虑M和V之间的关系：它们应该是一种同步的关系，也就是，不管任何时刻，只要M的值发生改变，V的显示就应该发生改变（显示最新的M的内容）。所以我们可以关注M的值改变，而不用关心M的网络请求是否结束了。实际上C根本不知道M从哪去拿的数据，C的责任是负责把M最新的数据赋值给V。所以C应该关注的事件是：M的值是否发生了变化。</p><hr><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><h3 id="什么是MVVM"><a href="#什么是MVVM" class="headerlink" title="什么是MVVM"></a>什么是MVVM</h3><p>MVVM：Model、View、ViewModel。</p><p>你会下意识地把它和MVC来对比，你会发现，MVVM多了一个ViewModel而少了Controller。</p><p>首先说一下多出来的ViewModel（VM，不是显存）。<br>VM的意义，和Model一样，在于数据。<br>Model负责对数据进行取和存，然而我们对数据的操作除了取和存以外，还有一个非常重要的操作：解析。</p><hr><h3 id="MVVM的诞生"><a href="#MVVM的诞生" class="headerlink" title="MVVM的诞生"></a>MVVM的诞生</h3><p>就像我们之前分析MVC是如何合理分配工作的一样，我们需要数据所以有了M，我们需要界面所以有了V，而我们需要找一个地方把M赋值给V来显示，所以有了C，然而我们忽略了一个很重要的操作：数据解析。在MVC出生的年代，手机APP的数据往往都比较简单，没有现在那么复杂，所以那时的数据解析很可能一步就解决了，所以既然有这样一个问题要处理，而面向对象的思想就是用类和对象来解决问题，显然V和M早就被定义死了，它们都不应该处理“解析数据”的问题，理所应当的，“解析数据”这个问题就交给C来完成了。而现在的手机App功能越来越复杂，数据结构也越来越复杂，所以数据解析也就没那么简单了。如果我们继续按照MVC的设计思路，将数据解析的部分放到了Controller里面，那么Controller就将变得相当臃肿。还有相当重要的一点：Controller被设计出来并不是处理数据解析的。1、管理自己的生命周期；2、处理Controller之间的跳转；3、实现Controller容器。这里面根本没有“数据解析”这一项，所以显然，数据解析也不应该由Controller来完成。那么我们的MVC中，M、V、C都不应该处理数据解析，那么由谁来呢？这个问题实际上在面向对象的时候相当好回答：既然目前没有类能够处理这个问题，那么就创建一个新的类出来解决不就好了？所以我们聪明的开发者们就专门为数据解析创建出了一个新的类：ViewModel。这就是MVVM的诞生。</p><hr><h3 id="如何实现MVVM"><a href="#如何实现MVVM" class="headerlink" title="如何实现MVVM"></a>如何实现MVVM</h3><p>搞清楚了MVVM为什么会出现，将对于你理解如何实现MVVM有极大的帮助。在我们开始着手实现MVVM之前，我先简单提一下之前遗留的一个问题：为什么MVVM这个名字里面，没有Controller的出现（为什么不叫MVCVM，C去哪了）。本来这个问题应该在实现后再来解释，但是我们这里是教学，为了让大家更好的明白我们接下来的思想，所以这里要提前解释一下这个结论：Controller的存在感被完全的降低了。我们在待会实现MVVM的时候你就能体会到了，这里请先把这个结论印在脑海当中：Controller的存在感被完全的降低了、Controller的存在感被完全的降低了、Controller的存在感被完全的降低了。<br>好的，我们终于要开始着手实现MVVM了。如果你已经搞懂了MVC，那么用MVVM实现一个相同的功能将会变得非常简单。你只需要记住两点：1、Controller的存在感被完全的降低了；2、VM的出现就是Controller存在感降低的原因。</p><hr><h3 id="Controller存在感降低的原因"><a href="#Controller存在感降低的原因" class="headerlink" title="Controller存在感降低的原因"></a>Controller存在感降低的原因</h3><p>在MVVM中，Controller不再像MVC那样直接持有Model了。想象Controller是一个Boss，数据是一堆文件（Model），如果现在是MVC，那么数据解析（比如整理文件）需要由Boss亲自完成，然而实际上Boss需要的仅仅是整理好的文件而不是那一堆乱七八糟的整理前的文件。所以Boss招聘了一个秘书，现在Boss就不再需要管理原始数据（整理之前的文件）了，他只需要去找秘书：你帮我把文件整理好后给我。那么这个秘书就首先去拿到文件（原始数据），然后进行整理（数据解析），接下来把整理的结果给Boss。所以秘书就是VM了，并且Controller（Boss）现在只需要直接持有VM而不需要再持有M了。如果再进一步理解C、VM、M之间的关系：因为Controller只需要数据解析的结果而不关心过程，所以就相当于VM把“如何解析Model”给封装起来了，C甚至根本就不需要知道M的存在就能把工作做好，前提它需要持有一个VM。那么我们MVVM中的持有关系就是：C持有VM，VM持有M。这里有一个比较争议的地方：C该不该持有M。我的答案是不该。为什么呢，因为C持有M没有任何意义。就算C直接拿到了M的数据，它还是要去让VM进行数据解析，而数据解析就需要M，那么直接让VM持有M而C直接持有VM就足够了。最后再分享一个我在实现MVVM中的一个技巧，也谈不上是技巧吧，算是一种必要的思想：一旦在实现Controller的过程中遇到任何跟Model（或者数据）相关的问题，就找VM要答案。这个思想待会我们会在实现代码的时候用到。</p><h3 id="最后贴图"><a href="#最后贴图" class="headerlink" title="最后贴图"></a>最后贴图</h3><p><img src="https://img-blog.csdnimg.cn/20190423202120568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">文章参考：<a href="https://blog.csdn.net/u013282174/article/details/51220199" target="_blank" rel="noopener">https://blog.csdn.net/u013282174/article/details/51220199</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿@[toc]&lt;/p&gt;
&lt;hr&gt;

&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;mvc和mvvm究竟是怎么样子的，这是一个前后端都需要思考的问题。后面我们一步步来阐述mvc和mv
      
    
    </summary>
    
      <category term="框架设计" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="MVC和MVVM" scheme="http://yoursite.com/tags/MVC%E5%92%8CMVVM/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习笔记</title>
    <link href="http://yoursite.com/2019/06/04/ES6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/06/04/ES6学习笔记/</id>
    <published>2019-06-04T06:24:10.092Z</published>
    <updated>2019-06-04T06:18:05.101Z</updated>
    
    <content type="html"><![CDATA[<p>﻿<strong>1.变量</strong><br>&emsp;&emsp;var&emsp;重复申明、函数级作用域<br>&emsp;&emsp;let&emsp;不能重复申明、块级作用域、变量<br>&emsp;&emsp;const&emsp;不能重复申明、块级作用域、常量</p><p><strong>2.箭头函数</strong><br>&emsp;&emsp;a.方便<br>&emsp;&emsp;&emsp;&emsp;i.如果只有一个参数，（）可以省<br>&emsp;&emsp;&emsp;&emsp;ii.如果只有一个return，{}可以省<br>&emsp;&emsp;b.修正this<br>&emsp;&emsp;this相对正常点</p><p><strong>3.参数扩展</strong><br>&emsp;&emsp;收集<br>&emsp;&emsp;扩展</p><p>&emsp;&emsp;默认参数<br>&emsp;&emsp;&emsp;&emsp;function show(a,b=5){<br>&emsp;&emsp;&emsp;&emsp;}</p><p><strong>4.数组方法</strong><br>&emsp;&emsp;map&emsp;&emsp;&emsp;&emsp;映射<br>&emsp;&emsp;reduce&emsp;&emsp;&emsp;汇总：一堆-&gt;一个<br>&emsp;&emsp;filter&emsp;&emsp;&emsp;&emsp;过滤：一堆-&gt;剩下的<br>&emsp;&emsp;forEach&emsp;&emsp;&ensp;循环</p><p><strong>5.字符串</strong><br>&emsp;&emsp;startsWith&emsp;&emsp;以什么开头<br>&emsp;&emsp;endsWith&emsp;&emsp;以什么结尾<br>&emsp;&emsp;字符串模板：`\${a}xxx\${b}`</p><p><strong>6.Promise</strong><br>&emsp;&emsp;封装异步的操作</p><p>&emsp;&emsp;promise.all([ ]);</p><p><strong>7.generator</strong><br>&emsp;&emsp;function *show(){<br>&emsp;&emsp;yield<br>&emsp;&emsp;}</p><p><strong>8.JSON</strong><br>&emsp;&emsp;JSON.stringify({a:12,b:5}) =&gt; ‘{“a”:12,”b”:5}’<br>&emsp;&emsp;JSON.parse(‘{“a”:12,”b”:5}’) =&gt; {a:12,b:5}</p><p><strong>9.解构赋值</strong><br>&emsp;&emsp;let [a,b,c]=[12,5,8];</p><p>&emsp;&emsp;<strong>注意点：</strong><br>&emsp;&emsp;&emsp;&emsp;1.左右结构一样<br>&emsp;&emsp;&emsp;&emsp;2.右边是个合法的东西<br>&emsp;&emsp;&emsp;&emsp;3.声明、赋值一次完成</p><p><strong>10.面向对象</strong><br>&emsp;&emsp;&emsp;&emsp;对象新写法：<br>&emsp;&emsp;class Test{<br>&emsp;&emsp;&emsp;&emsp;constructor(){<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;this.xxx=<br>&emsp;&emsp;&emsp;&emsp;}<br>&emsp;&emsp;&emsp;&emsp;方法1（）{</p><p>&emsp;&emsp;&emsp;&emsp;}<br>&emsp;&emsp;&emsp;&emsp;方法2（）{</p><p>&emsp;&emsp;&emsp;&emsp;}<br>&emsp;&emsp;}</p><p>&emsp;&emsp;&emsp;&emsp;继承：<br>&emsp;&emsp;&emsp;&emsp;class Cs2 extends Cls1{<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;constructor(){<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;super();<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;}<br>&emsp;&emsp;&emsp;&emsp;} </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿&lt;strong&gt;1.变量&lt;/strong&gt;&lt;br&gt;&amp;emsp;&amp;emsp;var&amp;emsp;重复申明、函数级作用域&lt;br&gt;&amp;emsp;&amp;emsp;let&amp;emsp;不能重复申明、块级作用域、变量&lt;br&gt;&amp;emsp;&amp;emsp;const&amp;emsp;不能重复申明、块级作用域
      
    
    </summary>
    
      <category term="es6" scheme="http://yoursite.com/categories/es6/"/>
    
    
      <category term="es6笔记" scheme="http://yoursite.com/tags/es6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>post大文件上传失败原因</title>
    <link href="http://yoursite.com/2019/06/04/PHP-post%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%B1%E8%B4%A5%E5%8E%9F%E5%9B%A0/"/>
    <id>http://yoursite.com/2019/06/04/PHP-post大文件上传失败原因/</id>
    <published>2019-06-04T06:23:15.070Z</published>
    <updated>2019-06-04T06:19:31.594Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## post大文件上传失败原因</p><p>今天在使用使用post上传文件的时候发现报错了，原因竟然是因为文件过大。这就很奇怪了，post上传文件不是没有大小限制嘛？<img src="https://img-blog.csdnimg.cn/2019032510073089.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">这里报错其实并不是代码的问题，错误在于web服务器对于文件上传大小有限制，当你上传的文件大小超过他的限制就会出现这种情况。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果想修改上传文件的限制可以修改php.ini文件</span></span><br><span class="line">file_uploads = On;                         <span class="comment">//是否允许上传文件 On/off 默认是on</span></span><br><span class="line">upload_max_filesize = <span class="number">2048</span>M;               <span class="comment">//上传文件最大限制，默认2M</span></span><br><span class="line">post_max_size = <span class="number">2048</span>M                      <span class="comment">// 通过Post提交的最多数据</span></span><br><span class="line"></span><br><span class="line">max_execution_time = <span class="number">30000</span>;                <span class="comment">//脚本最长的执行事件 单位为秒</span></span><br><span class="line">max_input_time = <span class="number">30000</span>；                   <span class="comment">//接收提交的数据的时间限制 单位为秒</span></span><br><span class="line">memory_limit = <span class="number">2048</span>M;                      <span class="comment">//最大内存消耗</span></span><br></pre></td></tr></table></figure><p>在我电脑上文件地址是：H:\wamp\bin\apache\apache2.4.23\bin<br>这个按照你自己电脑安装的位置来就行了<br><img src="https://img-blog.csdnimg.cn/20190325101827941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>找到这个文件用phpstorm打开（不要用记事本打开，会出现格式问题）</strong><br>然后Ctrl+F查找upload_max_filesize 改为2048M（改多少看个人需求了）<br><img src="https://img-blog.csdnimg.cn/20190325102246533.png" alt="在这里插入图片描述"><br>其他的也一样改就行了，把所有的改完用Ctrl+S保存一下然后把web服务器重启一下就行了。然后测试上传成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## post大文件上传失败原因&lt;/p&gt;
&lt;p&gt;今天在使用使用post上传文件的时候发现报错了，原因竟然是因为文件过大。这就很奇怪了，post上传文件不是没有大小限制嘛？&lt;img src=&quot;https://img-blog.csdnimg.cn/2019032510073
      
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
    
      <category term="post大文件上传" scheme="http://yoursite.com/tags/post%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>bootstrap的使用方法及其基本模板</title>
    <link href="http://yoursite.com/2019/06/04/bootstrap%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B6%E5%9F%BA%E6%9C%AC%E6%A8%A1%E6%9D%BF/"/>
    <id>http://yoursite.com/2019/06/04/bootstrap的使用方法及其基本模板/</id>
    <published>2019-06-04T06:23:15.065Z</published>
    <updated>2019-06-04T06:17:30.575Z</updated>
    
    <content type="html"><![CDATA[<p>﻿### 什么是Bootstrap</p><p>Bootstrap来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JavaScript 的，它简洁灵活，使得 Web 开发更加快捷。它由Twitter的设计师Mark Otto和Jacob Thornton合作开发，是一个CSS/HTML框架。Bootstrap提供了优雅的HTML和CSS规范，它即是由动态CSS语言Less写成。Bootstrap一经推出后颇受欢迎，一直是GitHub上的热门开源项目，包括NASA的MSNBC（微软全国广播公司）的Breaking News都使用了该项目。 国内一些移动开发者较为熟悉的框架，如WeX5前端开源框架等，也是基于Bootstrap源码进行性能优化而来。</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><h4 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h4><p><strong>bootstrap下载链接</strong>：<a href="https://v3.bootcss.com/getting-started/" target="_blank" rel="noopener">https://v3.bootcss.com/getting-started/</a><br>下载有三个版本如果仅仅是使用的话下载第一个就行了<br><img src="https://img-blog.csdnimg.cn/20190413111629527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="2-引入"><a href="#2-引入" class="headerlink" title="2.引入"></a>2.引入</h4><p>只需要把下载好的文件解压拖入webstrom即可<br><img src="https://img-blog.csdnimg.cn/20190413111752374.png" alt="在这里插入图片描述"></p><h4 id="3-基本模板"><a href="#3-基本模板" class="headerlink" title="3.基本模板"></a>3.基本模板</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用模板<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap地址，使用自己的地址就行了 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--兼容IE8--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/html5shiv@3.7.3/dist/html5shiv.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/respond.js@1.4.2/dest/respond.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，世界！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- jQuery地址 (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- js地址下载文件中有（加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>模板注意点:</strong></p><p><li>3个meta标签<em>必须</em>放在最前面</li></p><p><li>引入bootstrap地址</li></p><p><li>引入jquery文件(Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边)</li></p><p><li>引入下载文件中的js文件（bootstrap.min.js）</li></p><p><br></p><h4 id="4-使用方法"><a href="#4-使用方法" class="headerlink" title="4.使用方法"></a>4.使用方法</h4><p>1.在bootstrap官网中找到自己想要的功能（bootstrap中文官网：<a href="http://www.bootcss.com/）" target="_blank" rel="noopener">http://www.bootcss.com/）</a><br>2.把模板复制到想要放置的位置<br>例如：标签页的模板<br><img src="https://img-blog.csdnimg.cn/20190413113207499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">把代码复制到想要放置的地方（我这里是放在了body里）。<br><strong>效果图：</strong><br><img src="https://img-blog.csdnimg.cn/20190413113312222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">3.修改样式，改成自己想要的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿### 什么是Bootstrap&lt;/p&gt;
&lt;p&gt;Bootstrap来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JavaScript 的，它简洁灵活，使得 Web 开发更加快捷。它由Twitter的设计师Mark Otto和
      
    
    </summary>
    
      <category term="bootstrap" scheme="http://yoursite.com/categories/bootstrap/"/>
    
    
      <category term="bootstrap使用" scheme="http://yoursite.com/tags/bootstrap%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>关于请求报文，响应报文前端需要知道哪些？面试的时候又该如何回答？</title>
    <link href="http://yoursite.com/2019/06/04/%E5%85%B3%E4%BA%8E%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%EF%BC%8C%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%E5%89%8D%E7%AB%AF%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E5%93%AA%E4%BA%9B%EF%BC%9F%E9%9D%A2%E8%AF%95%E7%9A%84%E6%97%B6%E5%80%99%E5%8F%88%E8%AF%A5%E5%A6%82%E4%BD%95%E5%9B%9E%E7%AD%94%EF%BC%9F/"/>
    <id>http://yoursite.com/2019/06/04/关于请求报文，响应报文前端需要知道哪些？面试的时候又该如何回答？/</id>
    <published>2019-06-04T06:23:15.059Z</published>
    <updated>2019-06-04T06:20:10.717Z</updated>
    
    <content type="html"><![CDATA[<p>﻿在学习web前端Ajax时需要进行前端后端交互，这时候我们需要了解什么是请求报文，什么是响应报文，我们前端需要用到哪些？<br><img src="https://img-blog.csdnimg.cn/20190328194205195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-请求报文"><a href="#1-请求报文" class="headerlink" title="1. 请求报文"></a>1. 请求报文</h2><p>一个HTTP请求报文由请求行（request line）、请求头部（header）和请求主体3个部分组成。</p><h4 id="1-1-请求行"><a href="#1-1-请求行" class="headerlink" title="1.1 请求行"></a>1.1 请求行</h4><p>请求行由三部分组成：请求方法，请求URL（不包括域名），HTTP协议版本<br>请求方法比较多：GET、POST、HEAD、PUT、DELETE、OPTIONS、TRACE、CONNECT<br>最常用的是GET和POST。</p><h4 id="1-2-请求头"><a href="#1-2-请求头" class="headerlink" title="1.2 请求头"></a>1.2 请求头</h4><p>请求头部由关键字/值对组成，每行一对</p><p>User-Agent : 产生请求的浏览器类型<br>Accept : 客户端希望接受的数据类型，比如 Accept：text/xml（application/json）表示希望接受到的是xml（json）类型<br>Content-Type：发送端发送的实体数据的数据类型。<br>比如，Content-Type：text/html（application/json）表示发送的是html类型。<br>Host : 请求的主机名，允许多个域名同处一个IP地址，即虚拟主机。</p><h4 id="1-3-请求主体"><a href="#1-3-请求主体" class="headerlink" title="1.3 请求主体"></a>1.3 请求主体</h4><p>GET没有请求数据，POST有。</p><p>与请求数据相关的最常使用的请求头是 Content-Type 和 Content-Length 。</p><h2 id="2-响应报文"><a href="#2-响应报文" class="headerlink" title="2. 响应报文"></a>2. 响应报文</h2><p>HTTP响应报文和请求报文的结构差不多，也是由三个部分组成：状态行，响应头，响应主体</p><h4 id="2-1-状态行"><a href="#2-1-状态行" class="headerlink" title="2.1 状态行"></a>2.1 状态行</h4><p>状态行也由三部分组成：服务器HTTP协议版本，响应状态码，状态码的文本描述<br>格式：HTTP-Version Status-Code Reason-Phrase CRLF<br>比如：HTTP/1.1 200 OK<br>状态码：由3位数字组成，第一个数字定义了响应的类别</p><p>1xx：指示信息，表示请求已接收，继续处理<br>2xx：成功，表示请求已被成功接受，处理。<br>3xx：重定向<br>4xx：客户端错误<br>5xx：服务器端错误，服务器未能实现合法的请求</p><h4 id="2-2-响应头"><a href="#2-2-响应头" class="headerlink" title="2.2 响应头"></a>2.2 响应头</h4><p>服务器的一些信息，服务器想要告诉浏览器的一些信息。</p><h4 id="2-3-响应主体"><a href="#2-3-响应主体" class="headerlink" title="2.3 响应主体"></a>2.3 响应主体</h4><p>正常用户看到的内容。</p><h2 id="3-面试时如何回答？"><a href="#3-面试时如何回答？" class="headerlink" title="3. 面试时如何回答？"></a>3. 面试时如何回答？</h2><p><strong>请求报文</strong>：请求报文包括请求行、请求头、请求主体。主要有：发送的方法、浏览器的信息以及发送的数据。</p><p><strong>响应报文</strong>：响应报文包括状态行、响应头和响应主体。主要是：请求是否成功，服务器的信息以及浏览器中直接可以看到的内容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿在学习web前端Ajax时需要进行前端后端交互，这时候我们需要了解什么是请求报文，什么是响应报文，我们前端需要用到哪些？&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190328194205195.png?x-oss-proces
      
    
    </summary>
    
      <category term="http" scheme="http://yoursite.com/categories/http/"/>
    
    
      <category term="请求报文，响应报文" scheme="http://yoursite.com/tags/%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%EF%BC%8C%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>遮罩层的简单使用分析</title>
    <link href="http://yoursite.com/2019/06/04/%E9%81%AE%E7%BD%A9%E5%B1%82%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/06/04/遮罩层的简单使用分析/</id>
    <published>2019-06-04T06:10:46.422Z</published>
    <updated>2019-06-04T06:10:31.379Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们来聊聊遮罩层的简单使用。遮罩层是基于以下几个属性来实现的：</p><h4 id="1-z-index"><a href="#1-z-index" class="headerlink" title="1.z-index"></a>1.z-index</h4><p>定义：z-index 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。<br>简单来说就是谁的z-index属性值高在z轴方向会在更外面。</p><h4 id="2-opacity"><a href="#2-opacity" class="headerlink" title="2.opacity"></a>2.opacity</h4><p>作用：规定不透明度。从 0.0 （完全透明）到 1.0（完全不透明）。</p><h4 id="3-display"><a href="#3-display" class="headerlink" title="3.display"></a>3.display</h4><p>这里我们只需要理解这个属性的两个值：<br>none :此元素不会被显示。<br>block :此元素将显示为块级元素，此元素前后会带有换行符。(简单理解就是显示)</p><h4 id="4-position"><a href="#4-position" class="headerlink" title="4.position"></a>4.position</h4><p>定位，需要这个属性是因为，有了这个属性才可以控制遮罩层放哪（一般在中心位置）。</p><p><strong>这些了解以后，看看下面的案例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>遮罩层<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    html,body &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#shade</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">z-index</span><span class="selector-pseudo">:2</span>;</span></span><br><span class="line"><span class="css">        <span class="comment">/*z-index 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>:<span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">opacity</span><span class="selector-pseudo">:0.3</span>;</span></span><br><span class="line"><span class="css">        <span class="comment">/*opacity透明度*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*兼容IE8及以下版本浏览器*/</span></span></span><br><span class="line"><span class="undefined">        filter: alpha(opacity=30);</span></span><br><span class="line"><span class="css">        <span class="selector-tag">display</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#modal</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">z-index</span><span class="selector-pseudo">:3</span>;</span></span><br><span class="line"><span class="undefined">        top: 0;</span></span><br><span class="line"><span class="undefined">        bottom: 0;</span></span><br><span class="line"><span class="undefined">        left: 0;</span></span><br><span class="line"><span class="undefined">        right: 0;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="undefined">        margin: auto;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">display</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span><span class="selector-pseudo">:skyblue</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    window.onload=function()&#123;</span></span><br><span class="line"><span class="undefined">        var a1=document.getElementById('a1');</span></span><br><span class="line"><span class="undefined">        var a2=document.getElementById('a2');</span></span><br><span class="line"><span class="undefined">        a1.onclick=shield;</span></span><br><span class="line"><span class="undefined">        a2.onclick=cancel_shield;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        function shield(e)&#123;</span></span><br><span class="line"><span class="undefined">            e.preventDefault();//取消事件的默认动作。</span></span><br><span class="line"><span class="undefined">            var shade = document.getElementById("shade");</span></span><br><span class="line"><span class="undefined">            shade.style.display = "block";</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            var modal = document.getElementById("modal");</span></span><br><span class="line"><span class="undefined">            modal.style.display = "block";</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        function cancel_shield(e)&#123;</span></span><br><span class="line"><span class="undefined">            e.preventDefault();//取消事件的默认动作。</span></span><br><span class="line"><span class="undefined">            var shade = document.getElementById("shade");</span></span><br><span class="line"><span class="undefined">            shade.style.display = "none";</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            var modal = document.getElementById("modal");</span></span><br><span class="line"><span class="undefined">            modal.style.display = "none";</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"a1"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>打开遮罩<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"shade"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"modal"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"a2"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果图：</strong><br>开始：<img src="https://img-blog.csdnimg.cn/20190401143739482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">点击：打开遮罩<br><img src="https://img-blog.csdnimg.cn/20190401143801413.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总的来说，遮罩其实是在原来界面上加上一个半透明的蒙版，然后在外面在加一个你想要实现的效果。注意点：1.z-index的值是大的在外面。2.position属性如果不设置则无法移动位置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天我们来聊聊遮罩层的简单使用。遮罩层是基于以下几个属性来实现的：&lt;/p&gt;
&lt;h4 id=&quot;1-z-index&quot;&gt;&lt;a href=&quot;#1-z-index&quot; class=&quot;headerlink&quot; title=&quot;1.z-index&quot;&gt;&lt;/a&gt;1.z-index&lt;/h4&gt;&lt;p&gt;定
      
    
    </summary>
    
      <category term="css/html" scheme="http://yoursite.com/categories/css-html/"/>
    
    
      <category term="遮罩层" scheme="http://yoursite.com/tags/%E9%81%AE%E7%BD%A9%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>前端学习路线---避免踩坑</title>
    <link href="http://yoursite.com/2019/06/04/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF---%E9%81%BF%E5%85%8D%E8%B8%A9%E5%9D%91%EF%BC%8C%E7%9B%B4%E5%87%BB%E5%85%AC%E5%8F%B8%E9%9C%80%E6%B1%82/"/>
    <id>http://yoursite.com/2019/06/04/前端学习路线---避免踩坑，直击公司需求/</id>
    <published>2019-06-04T06:10:46.417Z</published>
    <updated>2019-06-04T06:09:03.477Z</updated>
    
    <content type="html"><![CDATA[<p><strong>我自己在学习web前端之前对web的学习路线也是很懵，在网上查了查各种学习路线也是有点慌。今天我就自己的学习过程来聊一聊web各个阶段需要学习的内容，以及怎么样就可以去面试了。</strong></p><h3 id="初期阶段"><a href="#初期阶段" class="headerlink" title="初期阶段"></a>初期阶段</h3><p><strong>html+css+javaScript。</strong><br>在我看来html负责网页点基本框架—房梁，毛胚房。css负责网页点美化装饰—房屋的装修。js负责网页的一些特效让其更酷炫—房屋的一些功能性建筑。学完这一部分我们如果可以自己写一个静态页面也就差不多了。<br>学习视频推荐：<br><strong>1.html,css部分</strong>：<a href="http://yun.itheima.com/course/267.html" target="_blank" rel="noopener">http://yun.itheima.com/course/267.html</a><br><strong>2.js部分</strong>：<a href="https://www.bilibili.com/video/av34087791?from=search&amp;seid=2090123722468261815" target="_blank" rel="noopener">https://www.bilibili.com/video/av34087791?from=search&amp;seid=2090123722468261815</a></p><h3 id="中级阶段"><a href="#中级阶段" class="headerlink" title="中级阶段"></a>中级阶段</h3><p><strong>h5,c3,jQuery,Ajax（php基础）</strong><br>这一阶段就需要学以上部分的内容了，php基础如果有时间学完了自然好，不够作为前端，php部分只需要一些基础罢了，因为在学Ajax时，需要前后端交互需要懂一些后端知识，这里推荐一个视频是<strong>ajax和php</strong>一起学习的 ：<a href="https://www.bilibili.com/video/av15657082?from=search&amp;seid=1260798168543389571" target="_blank" rel="noopener">https://www.bilibili.com/video/av15657082?from=search&amp;seid=1260798168543389571</a><br><strong>h5,cs3推荐视频</strong>：<a href="https://www.bilibili.com/video/av32966342?p=2" target="_blank" rel="noopener">https://www.bilibili.com/video/av32966342?p=2</a><br><strong>jQuery推荐视频</strong>：<a href="https://www.bilibili.com/video/av40716170?from=search&amp;seid=6250929934997451575" target="_blank" rel="noopener">https://www.bilibili.com/video/av40716170?from=search&amp;seid=6250929934997451575</a></p><p>学完这些以后已经可以出去找实习了，不过如果想去比较好的公司的话还需要学习一些框架。</p><h3 id="高级阶段"><a href="#高级阶段" class="headerlink" title="高级阶段"></a>高级阶段</h3><p><strong>bootstrap,vue,es6,node.js</strong><br>框架其实有很多为什么选择以上这些框架呢？这是我在各大招聘网站上看那些大公司对实习生的要求汇总选择出来的，也许有部分公司要求不一样，不过以上框架已经可以满足大部分公司的需求了。<br><strong>bootstrap</strong>属于一个css部分的ui框架方便我们界面布局，推荐视频：<a href="https://www.bilibili.com/video/av10636408?from=search&amp;seid=8826659398424695725" target="_blank" rel="noopener">https://www.bilibili.com/video/av10636408?from=search&amp;seid=8826659398424695725</a><br><strong>vue推荐视频</strong>：<a href="https://www.bilibili.com/video/av36650577?from=search&amp;seid=13367424259640329646" target="_blank" rel="noopener">https://www.bilibili.com/video/av36650577?from=search&amp;seid=13367424259640329646</a><br><strong>es6推荐视频:</strong><a href="https://www.bilibili.com/video/av20327829?from=search&amp;seid=12468498045351456704" target="_blank" rel="noopener">https://www.bilibili.com/video/av20327829?from=search&amp;seid=12468498045351456704</a><br>node.js是属于后端的，那为什么把他写在这呢？现如今许多前端框架都依赖node.js，node.js也使前端工作变的更加轻松，在某一方面改变了前端以前比较尴尬的情况。<br><strong>node.js推荐视频</strong>：<a href="https://www.bilibili.com/video/av27670326?from=search&amp;seid=16453837271820328900" target="_blank" rel="noopener">https://www.bilibili.com/video/av27670326?from=search&amp;seid=16453837271820328900</a></p><h3 id="学无止境"><a href="#学无止境" class="headerlink" title="学无止境"></a>学无止境</h3><p>做web前端需要有一个意识—学无止境。现如今技术更新换代特别快，几年就出一个新框架，如果一直保守自己懂的那几个老框架，虽然也能完成任务，但久而久之势必会被淘汰。当学完了以上那些东西，web也属于入门了这时候我推荐还是多看一些书籍。这里我推荐几本书籍。<br><strong>推荐书籍</strong>：javaScript高级程序设计（第三版）（红宝书），javaScript权威指南（第六版）（犀牛书），javascript DOM编程艺术（第二版）<br>以上推荐的都是原生javaScript的一些书籍，毕竟框架在怎么出新也是在原生javaScript的基础上写出来的，只有基础扎实才能走的更远。</p><p>以上是我就自身而谈的一些观点，也许不完全正确，欢迎大家指正。也欢迎对web感兴趣的小伙伴和我交流。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;我自己在学习web前端之前对web的学习路线也是很懵，在网上查了查各种学习路线也是有点慌。今天我就自己的学习过程来聊一聊web各个阶段需要学习的内容，以及怎么样就可以去面试了。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;初期阶段&quot;&gt;&lt;a href=&quot;#初期阶
      
    
    </summary>
    
      <category term="css/html" scheme="http://yoursite.com/categories/css-html/"/>
    
    
      <category term="心得分享" scheme="http://yoursite.com/tags/%E5%BF%83%E5%BE%97%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>使用css中的border绘制三角形的方法和原理</title>
    <link href="http://yoursite.com/2019/06/04/%E4%BD%BF%E7%94%A8css%E4%B8%AD%E7%9A%84border%E7%BB%98%E5%88%B6%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2019/06/04/使用css中的border绘制三角形的方法和原理/</id>
    <published>2019-06-04T06:10:46.410Z</published>
    <updated>2019-06-04T06:08:23.860Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>首先看看怎么实现的贴上代码;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.sjx</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 0px;</span></span><br><span class="line"><span class="undefined">            height: 0px;</span></span><br><span class="line"><span class="undefined">            border-width: 40px;</span></span><br><span class="line"><span class="undefined">            border-style: solid;</span></span><br><span class="line"><span class="undefined">            border-color: transparent transparent transparent red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sjx"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h4><p><img src="https://img-blog.csdnimg.cn/20190413170526421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><hr></p><h3 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h3><p><strong>主要代码就是style中的border样式</strong>。首先宽高设为0，border-width就是三角形的高度，border-color（上，右，下，左）这里把前三个设置为透明，第四个设置为红色，所以三角形方向是向右的。<br>为了方便理解，这里把border-color四个颜色都设置出来看看<br><img src="https://img-blog.csdnimg.cn/20190413171100309.png" alt="在这里插入图片描述"></p><hr><p><strong>这里可以这么理解</strong>:由于div宽高设置为0，而边框为40px就会出现一个80*80的正方形，上下左右平分则是<strong>四个三角形</strong>。但如果不设置下边框而设置其他三个边框则会如下图：<br><img src="https://img-blog.csdnimg.cn/20190413171502153.png" alt="在这里插入图片描述"></p><hr><p>从这里可以看出没了下边框就变成了40*80的长方形，所以<strong>实质上这个正方形还是4个40*80的矩形拼成的。</strong><br>但是如果只设置左右，或者上下的边框则什么也没有，因为div长宽都为0，则显示不出来，这里之所以会显示是因为上下和左右至少各有一个，会互相赋值，比如上边框高度为40px由于没有宽度则不显示，此时如果设置一个左边框会把左边框的高40px<strong>赋值</strong>给上边框的框则会显示出来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h3&gt;&lt;p&gt;首先看看怎么实现的贴上代码;&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
      <category term="css/html" scheme="http://yoursite.com/categories/css-html/"/>
    
    
      <category term="border绘制三角形" scheme="http://yoursite.com/tags/border%E7%BB%98%E5%88%B6%E4%B8%89%E8%A7%92%E5%BD%A2/"/>
    
  </entry>
  
  <entry>
    <title>css选择器权重及其计算规则</title>
    <link href="http://yoursite.com/2019/06/04/css%E9%80%89%E6%8B%A9%E5%99%A8%E6%9D%83%E9%87%8D%E5%8F%8A%E5%85%B6%E8%AE%A1%E7%AE%97%E8%A7%84%E5%88%99/"/>
    <id>http://yoursite.com/2019/06/04/css选择器权重及其计算规则/</id>
    <published>2019-06-04T06:10:46.401Z</published>
    <updated>2019-06-04T06:07:36.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h1><hr><p>@[toc]</p><hr><h3 id="选择器类型"><a href="#选择器类型" class="headerlink" title="选择器类型"></a>选择器类型</h3><ul><li>ID　　#id</li><li>class　　.class</li><li><p>标签　　p</p></li><li><p>通用　　*</p></li><li><p>属性　　[type=”text”]</p></li><li><p>伪类　　：hover</p></li><li><p>伪元素　　::first-line</p></li><li><p>子选择器、相邻选择器</p></li></ul><h3 id="css选择器权重值"><a href="#css选择器权重值" class="headerlink" title="css选择器权重值"></a>css选择器权重值</h3><table><thead><tr><th>选择器</th><th>权重</th></tr></thead><tbody><tr><td>!important</td><td>权重</td></tr><tr><td>!important</td><td>Infinity(无限大)</td></tr><tr><td>行列样式</td><td>1000</td></tr><tr><td>Id选择器</td><td>0100</td></tr><tr><td>Class选择器/属性/伪类</td><td>0010</td></tr><tr><td>标签选择器</td><td>0001</td></tr><tr><td>*通配符选择器</td><td>0000 (大于默认样式与继承验样式)</td></tr><tr><td>继承样式</td><td>权重最小(比*通配符还小)</td></tr></tbody></table><blockquote><p><strong>注意</strong>：选择器的权重值不是一个确定的值，例如标签选择器的权重值为1，但是这个1是一个256进制数，就是0到255后+1才是1。就是说权重值2和1中间差了255。这表示256个权重值为1的选择器加一起才抵得上一个权重为2的，这在后面权重计算有用。</p></blockquote><h2 id="还有需要注意的是，！important的权重值虽然是正无穷，但其实也是可也计算的，比如正无穷-1或者-1，就是要比正无穷大，在计算机中正无穷的值，都是一个有界的。不是数学上无界的一个慨念！"><a href="#还有需要注意的是，！important的权重值虽然是正无穷，但其实也是可也计算的，比如正无穷-1或者-1，就是要比正无穷大，在计算机中正无穷的值，都是一个有界的。不是数学上无界的一个慨念！" class="headerlink" title="还有需要注意的是，！important的权重值虽然是正无穷，但其实也是可也计算的，比如正无穷+1或者*1，就是要比正无穷大，在计算机中正无穷的值，都是一个有界的。不是数学上无界的一个慨念！"></a>还有需要注意的是，！important的权重值虽然是正无穷，但其实也是可也计算的，比如正无穷+1或者*1，就是要比正无穷大，在计算机中正无穷的值，都是一个有界的。不是数学上无界的一个慨念！</h2><h3 id="权重计算方法"><a href="#权重计算方法" class="headerlink" title="权重计算方法"></a>权重计算方法</h3><blockquote><p>一般而言，选择器越特殊，它的优先级越高。也就是选择器指向的越准确，它的优先级就越高。单一选择器直接比较权重，多个选择器则需要计算。<br> 复杂的计算方法：</p></blockquote><ul><li>用1表示派生选择器的优先级<ul><li>用10表示类选择器的优先级</li><li>用100标示ID选择器的优先级<pre><code>-  div.test1 .span var 优先级 1+10 +10 +1</code></pre><ul><li>span#xxx .songs li 优先级1+100 + 10 + 1</li><li>#xxx li 优先级 100 +1</li></ul></li></ul></li></ul><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p><img src="https://img-blog.csdnimg.cn/20190417202810188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20190417202817586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;css选择器&quot;&gt;&lt;a href=&quot;#css选择器&quot; class=&quot;headerlink&quot; title=&quot;css选择器&quot;&gt;&lt;/a&gt;css选择器&lt;/h1&gt;&lt;hr&gt;

&lt;p&gt;@[toc]&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;选择器类型&quot;&gt;&lt;a href=&quot;#选择器类型&quot;
      
    
    </summary>
    
      <category term="css/html" scheme="http://yoursite.com/categories/css-html/"/>
    
    
      <category term="选择器权重计算" scheme="http://yoursite.com/tags/%E9%80%89%E6%8B%A9%E5%99%A8%E6%9D%83%E9%87%8D%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>css控制超出一行内容显示省略号</title>
    <link href="http://yoursite.com/2019/06/04/css%E6%8E%A7%E5%88%B6%E8%B6%85%E5%87%BA%E4%B8%80%E8%A1%8C%E5%86%85%E5%AE%B9%E6%98%BE%E7%A4%BA%E7%9C%81%E7%95%A5%E5%8F%B7/"/>
    <id>http://yoursite.com/2019/06/04/css控制超出一行内容显示省略号/</id>
    <published>2019-06-04T06:10:46.392Z</published>
    <updated>2019-06-04T06:06:55.150Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前端开发过程中，经常会遇到文字超过一行内容的情况，要求隐藏超出部分并且以省略号显示。<br>像这样：<br><img src="https://img-blog.csdnimg.cn/20190524085233199.png" alt="在这里插入图片描述"></p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>主要依赖下面三个属性实现</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 规定段落中的文本不进行换行： */</span></span><br><span class="line"><span class="selector-tag">white-space</span>: <span class="selector-tag">nowrap</span>;</span><br><span class="line"><span class="comment">/* 内容会被修剪，并且其余内容是不可见的。 */</span></span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line"><span class="comment">/* 显示省略符号来代表被修剪的文本。 */</span></span><br><span class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span></span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        body &#123;</span></span><br><span class="line"><span class="undefined">            width: 500px;</span></span><br><span class="line"><span class="undefined">            text-align: center;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        div&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 规定段落中的文本不进行换行： */</span></span></span><br><span class="line"><span class="undefined">            white-space: nowrap;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 内容会被修剪，并且其余内容是不可见的。 */</span></span></span><br><span class="line"><span class="undefined">            overflow: hidden;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 显示省略符号来代表被修剪的文本。 */</span></span></span><br><span class="line"><span class="undefined">            text-overflow: ellipsis </span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>“世界很复杂，百度更懂你”，百度翻译拥有网页版和手机APP等多种产品形态，此外还针对开发者提供开放云接口服务，日均响应上亿次翻译请求。除文本翻译外，结合用户多样性的翻译需求，推出网页翻译、网络释义、海量例句、权威词典、离线翻译、语音翻译、对话翻译、实用口语、拍照翻译、AR翻译、趣味配音等功能，同时还针对对译文质量要求较高的用户，提供人工翻译服务，让用户畅享每一次翻译体验。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如图：<br><img src="https://img-blog.csdnimg.cn/20190524085425664.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在前端开发过程中，经常会遇到文字超过一行内容的情况，要求隐藏超出部分并且以省略号显示。&lt;br&gt;像这样：&lt;br&gt;&lt;img src=&quot;https
      
    
    </summary>
    
      <category term="css/html" scheme="http://yoursite.com/categories/css-html/"/>
    
    
      <category term="css控制一行显示" scheme="http://yoursite.com/tags/css%E6%8E%A7%E5%88%B6%E4%B8%80%E8%A1%8C%E6%98%BE%E7%A4%BA/"/>
    
  </entry>
  
  <entry>
    <title>前端必备PS技巧</title>
    <link href="http://yoursite.com/2019/06/04/%E5%89%8D%E7%AB%AF%E5%BF%85%E5%A4%87PS%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2019/06/04/前端必备PS技巧/</id>
    <published>2019-06-04T06:10:46.385Z</published>
    <updated>2019-06-04T06:09:52.062Z</updated>
    
    <content type="html"><![CDATA[<p>PS在前端主要有两方面的应用：<strong>1：测量图像大小、距离  2：切图</strong><br>测量不用说大家平时开发都需要用，而切图也是前端必备技能。我们作为前端会比UI更清楚我们需要的图片，有时候需要修改也可以自己动手，不必处处麻烦UI，也提高了工作效率。</p><p>那我们从零开始吧！</p><h3 id="1-下载工具PS"><a href="#1-下载工具PS" class="headerlink" title="1.下载工具PS"></a>1.下载工具PS</h3><p>在这里分享一下正版PS安装包，内含注册码的，链接失效了可以下方评论。<br>下载链接：链接：<a href="https://pan.baidu.com/s/1oIeHrcH2VBGx8ujO2MGiKA" target="_blank" rel="noopener">https://pan.baidu.com/s/1oIeHrcH2VBGx8ujO2MGiKA</a><br>提取码：adoz </p><h3 id="2-设置工具"><a href="#2-设置工具" class="headerlink" title="2. 设置工具"></a>2. 设置工具</h3><p>为了使用更加方面我们可以先设置一下一些窗口格式。<br>在上面菜单栏点击窗口把：图层，信息，历史记录勾选上<br>在视图窗口把标尺勾选上。<br><img src="https://img-blog.csdnimg.cn/2019033119500113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190331195052320.png" alt="在这里插入图片描述"></p><h3 id="3-测量和取色"><a href="#3-测量和取色" class="headerlink" title="3.测量和取色"></a>3.测量和取色</h3><p>  <strong>【测量宽高】工具：参考线，矩形选框，信息面板。</strong></p><p>1  从标尺上拉出参考线（在标尺上按住鼠标左键不松往你想要地方拉，就会出现一根线，上下左右都可以，也可以不拉，拉了会更精确些，选框会自动吸附到参考线上） </p><p>2  找到矩形选框，选中你要测量的地方，选中的时候你可以看两个地方：1 鼠标位置有显示宽高  2 信息面板也有显示。不过当你松开鼠标，就只有信息面板有显示信息了，如下。<br><img src="https://img-blog.csdnimg.cn/2019033119544584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <strong>【取色】：取色器+吸管工具</strong></p><p>1 点击取色器，会出现一个面板，这个时候把鼠标放在图片上会发现自动变成了吸管工具，不用专门去找，然后点击你想要取的颜色，面板上就出现你想要的信息。（还可以用取色器检查你的按钮或者背景是不是是纯色）<br><img src="https://img-blog.csdnimg.cn/20190331195907313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="4-切图-：切片工具"><a href="#4-切图-：切片工具" class="headerlink" title="4.切图 ：切片工具"></a>4.切图 ：切片工具</h3><p>现在工具栏找到切片工具：<br><img src="https://img-blog.csdnimg.cn/2019033120022452.png" alt="在这里插入图片描述"><br>选取需要切的范围，然后在菜单栏—&gt;文件—&gt;转为web格式<br><img src="https://img-blog.csdnimg.cn/20190331200428322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">然后调整图片格式和质量按自己需求来：<br><img src="https://img-blog.csdnimg.cn/20190331200550645.png" alt="在这里插入图片描述"><br>然后存储到相应位置使用即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;PS在前端主要有两方面的应用：&lt;strong&gt;1：测量图像大小、距离  2：切图&lt;/strong&gt;&lt;br&gt;测量不用说大家平时开发都需要用，而切图也是前端必备技能。我们作为前端会比UI更清楚我们需要的图片，有时候需要修改也可以自己动手，不必处处麻烦UI，也提高了工作效率。&lt;/
      
    
    </summary>
    
      <category term="css/html" scheme="http://yoursite.com/categories/css-html/"/>
    
    
      <category term="ps" scheme="http://yoursite.com/tags/ps/"/>
    
  </entry>
  
  <entry>
    <title>CSS3 @media 查询</title>
    <link href="http://yoursite.com/2019/06/04/CSS3@media%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2019/06/04/CSS3@media查询/</id>
    <published>2019-06-04T05:49:05.861Z</published>
    <updated>2019-06-04T05:48:25.821Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSS3-media-查询"><a href="#CSS3-media-查询" class="headerlink" title="CSS3 @media 查询"></a>CSS3 @media 查询</h3><hr><p><strong>首先贴一个例子：</strong></p><p>如果文档宽度小于 300 像素则修改背景颜色(background-color):</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">300px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>:lightblue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="定义和使用"><a href="#定义和使用" class="headerlink" title="定义和使用"></a>定义和使用</h4><p>使用 @media 查询，你可以针对不同的媒体类型定义不同的样式。</p><p>@media 可以针对不同的<strong>屏幕尺寸</strong>设置不同的样式，特别是如果你需要设置设计<strong>响应式的页面</strong>，@media 是非常有用的。</p><p>当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。</p><hr><h4 id="Media所有参数汇总"><a href="#Media所有参数汇总" class="headerlink" title="Media所有参数汇总"></a>Media所有参数汇总</h4><p>   <li>width:浏览器可视宽度。<br>   </li><li>height:浏览器可视高度。<br>   </li><li>device-width:设备屏幕的宽度。<br>   </li><li>device-height:设备屏幕的高度。<br>   </li><li>orientation:检测设备目前处于横向还是纵向状态。<br>   </li><li>aspect-ratio:检测浏览器可视宽度和高度的比例。(例如：aspect-ratio:16/9)<br>   </li><li>device-aspect-ratio:检测设备的宽度和高度的比例。<br>   </li><li>color:检测颜色的位数。（例如：min-color:32就会检测设备是否拥有32位颜色）<br>   </li><li>color-index:检查设备颜色索引表中的颜色，他的值不能是负数。<br>   </li><li>monochrome:检测单色楨缓冲区域中的每个像素的位数。（这个太高级，估计咱很少会用的到）<br>   </li><li>resolution:检测屏幕或打印机的分辨率。(例如：min-resolution:300dpi或min-resolution:118dpcm)。<br>   </li><li>grid：检测输出的设备是网格的还是位图设备。</li></p><p><br></p><hr><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p><br></p><h4 id="准备工作1：设置Meta标签"><a href="#准备工作1：设置Meta标签" class="headerlink" title="准备工作1：设置Meta标签"></a>准备工作1：设置Meta标签</h4><p>首先我们在使用Media的时候需要先设置下面这段代码，来兼容移动设备的展示效果：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"&gt;</span><br></pre></td></tr></table></figure><p>这段代码的几个参数解释：</p><p>   <strong>width = device-width</strong>：宽度等于当前设备的宽度</p><p>   <strong>initial-scale</strong>：初始的缩放比例（默认设置为1.0）  </p><p>   <strong>minimum-scale</strong>：允许用户缩放到的最小比例（默认设置为1.0）    </p><p>   <strong>maximum-scale</strong>：允许用户缩放到的最大比例（默认设置为1.0）   </p><p>   <strong>user-scalable</strong>：用户是否可以手动缩放（默认设置为no，因为我们不希望用户放大缩小页面） </p><p><br></p><h4 id="准备工作2：加载兼容文件JS"><a href="#准备工作2：加载兼容文件JS" class="headerlink" title="准备工作2：加载兼容文件JS"></a>准备工作2：加载兼容文件JS</h4><p>因为IE8既不支持HTML5也不支持CSS3 Media，所以我们需要加载两个JS文件，来保证我们的代码实现兼容效果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--[<span class="keyword">if</span> lt IE <span class="number">9</span>]&gt;</span><br><span class="line">  &lt;script src=<span class="string">"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;script src=<span class="string">"https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="准备工作3：设置IE渲染方式默认为最高-这部分可以选择添加也可以不添加"><a href="#准备工作3：设置IE渲染方式默认为最高-这部分可以选择添加也可以不添加" class="headerlink" title="准备工作3：设置IE渲染方式默认为最高(这部分可以选择添加也可以不添加)"></a>准备工作3：设置IE渲染方式默认为最高(这部分可以选择添加也可以不添加)</h4><p>现在有很多人的IE浏览器都升级到IE9以上了，所以这个时候就有又很多诡异的事情发生了，例如现在是IE9的浏览器，但是浏览器的文档模式却是IE8:<br> <img src="https://img-blog.csdnimg.cn/2019041213440485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="\[1.png\]"></p><p>为了防止这种情况，我们需要下面这段代码来让IE的文档模式永远都是最新的：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">body &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span><span class="selector-pseudo">:lightgreen</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">@<span class="keyword">media</span> screen and (max-width: <span class="number">300px</span>) &#123;</span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span><span class="selector-pseudo">:lightblue</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>重置浏览器查看大小。当浏览器窗口的宽度小于 300 像素时，背景颜色会变成淡蓝，否则是淡绿色。<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"resize_window()"</span> <span class="attr">value</span>=<span class="string">"查看效果"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&lt;!--</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">resize_window</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.open (<span class="string">'http://www.w3cschool.cc/try/demo_source/trycss3_media_example1.htm'</span>,<span class="string">'newwindow'</span>,<span class="string">'height=299,width=299,top=0,left=0,toolbar=no,menubar=no,scrollbars=no, resizable=no,location=no, status=no'</span>)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//写成一行</span></span></span><br><span class="line"><span class="undefined">--&gt;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://img-blog.csdnimg.cn/20190412140249355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20190412140300307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>参考：<a href="http://www.520ued.com" target="_blank" rel="noopener">http://www.520ued.com</a><br><a href="http://www.runoob.com/cssref/css3-pr-mediaquery.html" target="_blank" rel="noopener">http://www.runoob.com/cssref/css3-pr-mediaquery.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CSS3-media-查询&quot;&gt;&lt;a href=&quot;#CSS3-media-查询&quot; class=&quot;headerlink&quot; title=&quot;CSS3 @media 查询&quot;&gt;&lt;/a&gt;CSS3 @media 查询&lt;/h3&gt;&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;首先贴一个例子：&lt;/
      
    
    </summary>
    
      <category term="H5/C3" scheme="http://yoursite.com/categories/H5-C3/"/>
    
    
      <category term="_@media" scheme="http://yoursite.com/tags/media/"/>
    
  </entry>
  
  <entry>
    <title>rem、em的区别与使用方法</title>
    <link href="http://yoursite.com/2019/06/04/rem%E3%80%81em%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/06/04/rem、em的区别与使用方式/</id>
    <published>2019-06-04T05:42:17.791Z</published>
    <updated>2019-06-04T06:12:31.709Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 前言</p><p><strong>我们先来看看比较重要的两点：</strong></p><ul><li><p><strong>rem与em的本质区别</strong><br> rem(root element)是参照<strong>html</strong>的font-size,em(element)是参照<strong>父元素</strong>的font-size</p></li><li><p><strong>使用rem与em的优点</strong></p><p>  以rem/em为单位比px更方便,屏幕尺寸发生变化时只需要更改html/body基数即可,不需要再重新给每个标签写不同的font-size</p><hr></li></ul><h2 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h2><blockquote><p>使用rem为单位,系统处理时(将rem转化为px)只会看html的font-size</p></blockquote><p>   在使用media query做响应式布局时(以bootstrap为例)：</p><ul><li><p>a.首先要做的是确定rem的基数(即html的font-size),一般都是以10px为基数(方便计算),这个可以根据自己的习惯来.</p><ul><li>b.确定html基准百分数(rem参照下html的字体大小采取百分数形式),百分数是自己设定的基数除以默认字体大小(16px)的值.比如以10px为基数时,基准百分数就是: 10px/16px=62.5%;即设置html的font-size为62.5%;</li></ul></li><li><p>c.当html的基准百分数设置之后,元素使用rem为单位时就是以基数(a中设置的基数值)为基础单位,换算方式为: 10px=1rem;比如要设置一个p标签的字体大小为20px,用rem表示就是2rem(公式: 以rem为单位的值=想要设置的字体大小(20px)/基数值(10px)=2rem).</p></li><li><p>d.响应式实现: 使用@media 在监测到屏幕尺寸发生变化时只需为html设置不同的基数值即可</p></li></ul><p>如下面例子: 在屏幕宽度小于414px时以8px为基数,非响应式下(415px-1365px)以10px为基数;大于1366px时以12px为基数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">  font-size: 62.5%; // 以10px为基数,此时class为a的标签字体大小为20px</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">414px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">html</span>&#123;</span><br><span class="line">    font-size: 50%; // 以8px为基数,此时class为a的标签字体大小为16px</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">1366px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">html</span>&#123;</span><br><span class="line">    font-size: 75%; // 以12px为基数,此时class为a的标签字体大小为24px</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="em"><a href="#em" class="headerlink" title="em"></a>em</h2><blockquote><p>使用em为单位,系统处理时(将em转化为px)只会看父元素（本文以body为例）的font-size</p></blockquote><h3 id="使用px为基准"><a href="#使用px为基准" class="headerlink" title="使用px为基准"></a>使用px为基准</h3><p>此时只需要设置一个基数即可,然后接下来使用时只需要用想要的字体大小除以设置的基数值即为以em为单位的值;如: 设置em基数为10px,要设置一个标签的字体大小为15px,则em=想要设置的值(15px)/基数(10px)=1.5em.例:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  font-size: 10px; // 以10px为基数,此时class为a的标签字体大小为20px</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">414px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">body</span>&#123;</span><br><span class="line">    font-size: 8px; // 以8px为基数,此时class为a的标签字体大小为16px</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">1366px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">body</span>&#123;</span><br><span class="line">    font-size: 12px; // 以12px为基数,此时class为a的标签字体大小为24px</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用百分比为基准"><a href="#使用百分比为基准" class="headerlink" title="使用百分比为基准"></a>使用百分比为基准</h3><p> 使用方式同上面以rem为单位的步骤,例:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  font-size: 62.5%; // 以10px为基数,此时class为a的标签字体大小为20px</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">414px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">body</span>&#123;</span><br><span class="line">    font-size: 50%; // 以8px为基数,此时class为a的标签字体大小为16px</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">1366px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">body</span>&#123;</span><br><span class="line">    font-size: 75%; // 以12px为基数,此时class为a的标签字体大小为24px</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>说明: 具体使用时其实两者差不多,rem也可以直接以px为基准单位,只是两者参照标签不同,使用时需注意</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 前言&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们先来看看比较重要的两点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;rem与em的本质区别&lt;/strong&gt;&lt;br&gt; rem(root element)是参照&lt;strong&gt;html&lt;/strong&gt;的
      
    
    </summary>
    
      <category term="css/html" scheme="http://yoursite.com/categories/css-html/"/>
    
    
      <category term="_rem _em" scheme="http://yoursite.com/tags/rem-em/"/>
    
  </entry>
  
  <entry>
    <title>前端需要了解的JSON---数据读取与转化</title>
    <link href="http://yoursite.com/2019/05/10/%E5%89%8D%E7%AB%AF%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84JSON---%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B8%8E%E8%BD%AC%E5%8C%96/"/>
    <id>http://yoursite.com/2019/05/10/前端需要了解的JSON---数据读取与转化/</id>
    <published>2019-05-10T02:17:49.794Z</published>
    <updated>2019-05-09T12:54:11.387Z</updated>
    
    <content type="html"><![CDATA[<p>﻿### 学习JSON之前我们需要明白的几点：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   * 1.json是一种数据的格式</span></span><br><span class="line"><span class="comment">   * 2.json跟编程语言没有关系</span></span><br><span class="line"><span class="comment">   * 3.json的载体是字符串</span></span><br><span class="line"><span class="comment">   * 4.基本上所有的编程语言都支持JSON</span></span><br><span class="line"><span class="comment">   * 5.语言简洁 基本上所有的编程语言 都提供了对应的方法 来解析JSON</span></span><br><span class="line"><span class="comment">   * 6.JSON格式的字符串 转换完毕之后 会变成数组 对象</span></span><br><span class="line"><span class="comment">   * */</span></span><br></pre></td></tr></table></figure><h4 id="json的写法-–-用来表示对象"><a href="#json的写法-–-用来表示对象" class="headerlink" title="json的写法 – 用来表示对象"></a>json的写法 – 用来表示对象</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象使用&#123;&#125;</span></span><br><span class="line"> <span class="comment">//属性名 必须使用""包裹  如果属性值是数值  可以不使用双引号</span></span><br><span class="line"> <span class="keyword">var</span> JSONObject = '&#123;<span class="string">"name"</span>:<span class="string">"刘亦菲"</span>,<span class="string">"skill"</span>:<span class="string">"失忆"</span>&#125;';</span><br><span class="line"> console.<span class="built_in">log</span>(JSONObject);</span><br><span class="line"> <span class="comment">//转化为 对应的 对象（数组）</span></span><br><span class="line"> <span class="keyword">var</span> obj = JSON.<span class="keyword">parse</span>(JSONObject);</span><br><span class="line"> console.<span class="built_in">log</span>(obj);</span><br><span class="line"> <span class="comment">//读取对象属性值</span></span><br><span class="line"> console.<span class="built_in">log</span>(obj.name+'|'+obj.skill);</span><br></pre></td></tr></table></figure><p><strong>结果：</strong><br><img src="https://img-blog.csdnimg.cn/20190331105547236.png" alt="在这里插入图片描述"></p><h4 id="JSON的写法-–-用来表示数组"><a href="#JSON的写法-–-用来表示数组" class="headerlink" title="JSON的写法 – 用来表示数组"></a>JSON的写法 – 用来表示数组</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> JSONArr = '[<span class="string">"绿色的花菜"</span>,<span class="string">"大蒜"</span>,<span class="string">"番茄"</span>,<span class="string">"圣女果"</span>]';</span><br><span class="line">console.<span class="built_in">log</span>(JSONArr);</span><br><span class="line"><span class="comment">//转化为对应的数组（对象）</span></span><br><span class="line"><span class="keyword">var</span> arr = JSON.<span class="keyword">parse</span>(JSONArr);</span><br><span class="line">console.<span class="built_in">log</span>(arr);</span><br><span class="line"><span class="comment">//读取数组中第三个元素</span></span><br><span class="line">console.<span class="built_in">log</span>(arr[2]);</span><br></pre></td></tr></table></figure><p><strong>结果：</strong><br><img src="https://img-blog.csdnimg.cn/20190331105727688.png" alt="在这里插入图片描述"></p><h4 id="JSON的写法-–-对象数组"><a href="#JSON的写法-–-对象数组" class="headerlink" title="JSON的写法 – 对象数组"></a>JSON的写法 – 对象数组</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> JSONObjArr = '&#123;<span class="string">"name"</span>:<span class="string">"彭林"</span>,<span class="string">"skill"</span>:<span class="string">"约跑"</span>,<span class="string">"friend"</span>:[<span class="string">"周琳琳"</span>,<span class="string">"林立群"</span>,<span class="string">"....."</span>]&#125;';</span><br><span class="line">   console.<span class="built_in">log</span>(JSONObjArr);</span><br><span class="line">   <span class="comment">//转化为对应的对象数组</span></span><br><span class="line">   <span class="keyword">var</span> result = JSON.<span class="keyword">parse</span>(JSONObjArr);</span><br><span class="line">   console.<span class="built_in">log</span>(result);</span><br><span class="line">   <span class="comment">//读取对象数组元素</span></span><br><span class="line">   console.<span class="built_in">log</span>(result.friend[1]);</span><br></pre></td></tr></table></figure><p><strong>结果：</strong><br><img src="https://img-blog.csdnimg.cn/20190331105904395.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿### 学习JSON之前我们需要明白的几点：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;spa
      
    
    </summary>
    
      <category term="json" scheme="http://yoursite.com/categories/json/"/>
    
    
      <category term="json" scheme="http://yoursite.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>剖析js原型与原型链</title>
    <link href="http://yoursite.com/2019/05/10/%E5%89%96%E6%9E%90js%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://yoursite.com/2019/05/10/剖析js原型与原型链/</id>
    <published>2019-05-10T02:17:31.720Z</published>
    <updated>2019-05-09T13:00:34.396Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 原型模式</p><p>&emsp;&emsp;我们创建的每一个函数都有一个prototype（原型）属性，这个属性是一个指针，指向一个对象，而这这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。如果按字面意思来理解，那么prototype就是通过调用构造函数而创建的那个对象实例的原型对象。使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法。换句话说，不必在构造函数中定义对象实例的信息，而是可以将这些信息直接添加到原型对象中，如下面的例子所示：</p><blockquote><p>原型对象和实例的关系有点像JAVA中父类子类的关系，有些继承的味道。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">persion</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">persion.prototype.name = <span class="string">"Nicholas"</span>;</span><br><span class="line">persion.prototype.age = <span class="number">29</span>;</span><br><span class="line">persion.prototype.job = <span class="string">"Software Engineer"</span>;</span><br><span class="line">persion.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> persion();</span><br><span class="line">person1.sayName(); <span class="comment">//"Nicholas"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> persion();</span><br><span class="line">person2.sayName(); <span class="comment">//"Nicholas"</span></span><br><span class="line">alert(person1.sayName == person2.sayName); <span class="comment">//"true"</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在此，我们将sayName（）方法和所有属性直接添加到了person的prototype属性中，构造函数变成了空函数。即使如此，也仍然可以通过调用构造函数来创建新对象，而且新对象还会具有相同的属性和方法。但与构造函数模式不同的是，新对象的这些属性和方法是由所有实例共享的。换句话说，person1和person2访问的都是同一组属性和同一个sayName（）函数。要理解原型模式的工作原理，必须先理解ECMAScript中原型对象的性质。</p><h3 id="1-理解原型对象"><a href="#1-理解原型对象" class="headerlink" title="1.理解原型对象"></a>1.理解原型对象</h3><p>&emsp;&emsp;无论什么时候，只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个prototype属性，这个属性指向函数的原型对象。在默认情况下，所有原型对象都会自动获得一个constructor（构造函数）属性，这个属性包含一个指向prototype属性所在函数的指针。就拿前面的例子来说，Person.prototype.constructor 指向person。而通过这个构造函数，我们还可继续为原型对象添加其他属性和方法。<br>&emsp;&emsp;创建了自定义的构造函数之后，其原型对象默认只会取得 constructor属性；至于其他方法，则都是从object继承而来的。当调用构造函数创建一个新实例后，该实例的内部将包含一个指针（内部属性），指向构造函数的原型对象。ECMA-262第5版中管这个指针叫[[Prototype]]。虽然在脚本中没有标准的方式访问[[Prototype]]，但Firefox、Safari和Chrome在每个对象上都支持一个属性proto；而在其他实现中，这个属性对脚本则是完全不可见的。不过，要明确的真正重要的一点就是，这个连接存在于实例与构造函数的原型对象之间，而不是存在于实例与构造函数之间。<br>&emsp;&emsp;以前面使用Person构造函数和 Person.prototype创建实例的代码为例，图6-1展示了各个对象之间的关系。<br><img src="https://img-blog.csdnimg.cn/20190420200006450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">&emsp;&emsp;图6-1展示了person构造函数、person的原型属性以及person现有的两个实例之间的关系。在此，person.prototype 指向了原型对象，而Person.prototype.constructor又指回了Person。原型对象中除了包含constructor属性之外，还包括后来添加的其他属性。person的每个实例——person1和person2都包含一个内部属性，该属性仅仅指向了person.prototype；换句话说，它们与构造函数没有直接的关系。此外，要格外注意的是，虽然这两个实例都不包含属性和方法，但我们却可以调用person1.sayName（）。这是通过查找对象属性的过程来实现的。</p><blockquote><p>这可以这么理解，构造函数是一个空函数。创建一个实例的代码虽然是构造函数new出来的，可实际上是通过原型对象创建出来的，实例与构造函数并没有直接的关系，实例是基于原型对象创建的，而原型对象的constructor指向构造函数。</p></blockquote><p>&emsp;&emsp;虽然在所有实现中都无法访问到[[Prototype]]，但可以通过isPrototypeOf（）方法来确定对象之间是否存在这种关系。从本质上讲，如果[[Prototype]]指向调用isPrototypeof（）方法的对象（person.prototype），那么这个方法就返回true，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(Person.prototype.isPrototypeof(person1));<span class="comment">//true</span></span><br><span class="line">alert(Person.prototype.isPrototypeof(person2));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里，我们用原型对象的isPrototypeof（）方法测试了person1和person2。因为它们内部都有一个指向Person.prototype的指针，因此都返回了true。<br>&emsp;&emsp;ECMAScript5增加了一个新方法，叫object.getPrototypeof（），在所有支持的实现中，这个方法返回t[Prototype]]的值。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="built_in">Object</span>.getPrototypeof(personl)==Person.prototype);<span class="comment">//true </span></span><br><span class="line">alert(<span class="built_in">Object</span>.getPrototypeof(person1). name);<span class="comment">//"Nicholas"</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里的第一行代码只是确定object.getPrototypeof（）返回的对象实际就是这个对象的原型。第二行代码取得了原型对象中name属性的值，也就是“Nicholas”。使用object.getPrototypeof（）可以方便地取得一个对象的原型，而这在利用原型实现继承（本章稍后会讨论）的情况下是非常重要的。支持这个方法的浏览器有IE9+、Firefox 3.5+、Safari 5+、Opera12+和Chrome。<br>&emsp;&emsp;每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性。搜索首先从对象实例本身开始。如果在实例中找到了具有给定名字的属性，则返回该属性的值；如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性。如果在原型对象中找到了这个属性，则返回该属性的值。也就是说，在我们调用person1.sayName（）的时候，会先后执行两次搜索。首先，解析器会问：“实例 person1有sayName属性吗？”答：“没有。”然后，它继续搜索，再问：“person1的原型有sayName属性吗？”答：“有。”于是，它就读取那个保存在原型对象中的函数。当我们调用person2.sayName（）时，将会重现相同的搜索过程，得到相同的结果。而这正是多个对象实例共享原型所保存的属性和方法的基本原理。</p><blockquote><p>搜索首先从对象实例本身开始。如果在实例中找到了具有给定名字的属性，则返回该属性的值；如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性。</p></blockquote><p>&emsp;&emsp;虽然可以通过对象实例访问保存在原型中的值，但却不能通过对象实例重写原型中的值。如果我们在实例中添加了一个属性，而该属性与实例原型中的一个属性同名，那我们就在实例中创建该属性，该属性将会屏蔽原型中的那个属性。来看下面的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">Person. prototype. name=<span class="string">"Nicholas"</span>; </span><br><span class="line">Person. prototype. age=<span class="number">29</span>; </span><br><span class="line">Person. prototype. job=<span class="string">"Software Engineer"</span>; </span><br><span class="line">Person. prototype, sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">alert(this. name</span>);</span></span><br><span class="line"><span class="function">&#125;; </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">personl</span>=<span class="title">new</span> <span class="title">Person</span>(<span class="params"></span>);</span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">person2</span>=<span class="title">new</span> <span class="title">Person</span>(<span class="params"></span>);</span></span><br><span class="line"><span class="function"><span class="title">peraonl</span>.<span class="title">name</span> =<span class="title">nGreg</span>"；<span class="title">alert</span>（<span class="title">person1</span>.<span class="title">name</span>）；//"<span class="title">Greg</span>"—来自实例</span></span><br><span class="line"><span class="function"><span class="title">alert</span>（<span class="title">person2</span>.<span class="title">name</span>）；//"<span class="title">Nicholaa</span>"——来自原型</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在这个例子中，person1的name 被一个新值给屏蔽了。但无论访问person1.name还是访问person2.name都能够正常地返回值，即分别是“Greg*（来自对象实例）和“wicholas”（来自原型）。当在alert（）中访问 person1.name时，需要读取它的值，因此就会在这个实例上搜索一个名为name的属性。这个属性确实存在，于是就返回它的值而不必再搜索原型了。当以同样的方式访问 person2.name时，并没有在实例上发现该属性，因此就会继续搜索原型，结果在那里找到了name-属性。<br>&emsp;当为对象实例添加一个属性时，这个属性就会屏蔽原型对象中保存的同名属性；换句话说，添加这个属性只会阻止我们访问原型中的那个属性，但不会修改那个属性。即使将这个属性设置为nu11，也只会在实例中设置这个属性，而不会恢复其指向原型的连接。</p><blockquote><p>可以通过对象实例访问保存在原型中的值，但却不能通过对象实例重写原型中的值。如果实例中添加的属性与实例原型中一样则会断开该属性指向原型的连接</p></blockquote><p>不过，使用delete 操作符则可以完全删除实例属性，从而让我们能够重新访问原型中的属性，如下所示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name=<span class="string">"Nicholas"</span>;</span><br><span class="line">Person.prototype.age=<span class="number">29</span>;</span><br><span class="line">Person.prototype.job=<span class="string">"Software Engineer"</span>;</span><br><span class="line">Person.prototype.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert（<span class="keyword">this</span>.name）；</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> personl=<span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> pexson2=<span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">person1.name=<span class="string">"Greg"</span>;</span><br><span class="line">alert(personl.name);<span class="comment">//"Greg“——来自实例</span></span><br><span class="line">alert(person2.name);<span class="comment">//"Nicholas“——来自原型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> personl.name;</span><br><span class="line">alert(peraonl.name);<span class="comment">//"Nicholaa——来自原型</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在这个修改后的例子中，我们使用delete操作符删除了person1.name，之前它保存的“Greg”值屏蔽了同名的原型属性。把它删除以后，就恢复了对原型中name属性的连接。因此，接下来再调用person1.name时，返回的就是原型中name属性的值了。</p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>&emsp;&emsp;ECMAScript中描述了原型链的概念，并将原型链作为实现继承的主要方法。其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。简单回顾一下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么，假如我们让原型对象等于另一个类型的实例，结果会怎么样呢？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立，如此层层递进，就构成了实例与原型的链条。这就是所谓原型链的基本概念。</p><blockquote><p>可以简单理解成一个环套一个环和铁链一样。第一个环里的原型对象是第二个环里的实例，第二个环里的原型对象又是第三环里的实例则一环套一环。</p></blockquote><p>&emsp;&emsp;实现原型链有一种基本模式，其代码大致如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>. property=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Superrype.prototype.get SuperValue=<span class="function"><span class="keyword">function</span>（）</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.property;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>（）</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.subproperty=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承了SuperType </span></span><br><span class="line">Subrype.prototype=newSuperlype（）;</span><br><span class="line"></span><br><span class="line">SubType.prototype.getSubValue=<span class="function"><span class="keyword">function</span>（）</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.subproperty;</span><br><span class="line">）;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance=<span class="keyword">new</span> SubType（）;</span><br><span class="line">alert（instance.getSuperValue（））;<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;以上代码定义了两个类型：Superrype和SubType。每个类型分别有一个属性和一个方法。它们的主要区别是Subrype继承了superrype，而继承是通过创建Superrype的实例，并将该实例赋给SubType.prototype实现的。实现的本质是重写原型对象，代之以一个新类型的实例。换句话说，原来存在于Superrype的实例中的所有属性和方法，现在也存在于Sublype.prototype中了。在确立了继承关系之后，我们给SubType.prototype 添加了一个方法，这样就在继承了SuperType的属性和方法的基础上又添加了一个新方法。这个例子中的实例以及构造函数和原型之间的关系如图6-4所示。<br><img src="https://img-blog.csdnimg.cn/20190420203718399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">&emsp;&emsp;在上面的代码中，我们没有使用Subype默认提供的原型，而是给它换了一个新原型；这个新原型就是superrype的实例。于是，新原型不仅具有作为一个Superrype的实例所拥有的全部属性和方法，而且其内部还有一个指针，指向了superrype的原型。最终结果就是这样的：instance指向 Subrype的原型，subrype的原型又指向Superrype的原型。getSupervalue（）方法仍然还在SuperType.prototype中，但property 则位于SubType.prototype中。这是因为property是一个实例属性，而 getSuperValue（）则是一个原型方法。既然 SubType.prototype 现在是Superrype的实例，那么property当然就位于该实例中了。此外，要注意instance.constructor现在指向的是Supertype，这是因为原来subrype.prototype中的 constructor被重写了的缘故。<br>&emsp;&emsp;通过实现原型链，本质上扩展了本章前面介绍的原型搜索机制。读者大概还记得，当以读取模式访问一个实例属性时，首先会在实例中搜索该属性。如果没有找到该属性，则会继续搜索实例的原型。在通过原型链实现继承的情况下，搜索过程就得以沿着原型链继续向上。就拿上面的例子来说，调用instance.getSuperValue（）会经历三个搜索步骤：1）搜索实例；2）搜索Subrype.prototype；3）搜索SuperType.prototype，最后一步才会找到该方法。在找不到属性或方法的情况下，搜索过程总是要一环一环地前行到原型链末端才会停下来。</p><p>参考书籍：JavaScript高级程序设计（第三版）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 原型模式&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;我们创建的每一个函数都有一个prototype（原型）属性，这个属性是一个指针，指向一个对象，而这这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。如果按字面意思来理解，那么prototype就是通过调用构
      
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="原型" scheme="http://yoursite.com/tags/%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>匿名函数、自执行函数，自执行匿名函数和立即执行的函数表达式区别</title>
    <link href="http://yoursite.com/2019/05/10/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E3%80%81%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%EF%BC%8C%E8%87%AA%E6%89%A7%E8%A1%8C%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E5%92%8C%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E7%9A%84%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/05/10/匿名函数、自执行函数，自执行匿名函数和立即执行的函数表达式区别/</id>
    <published>2019-05-10T02:16:44.943Z</published>
    <updated>2019-05-09T13:01:18.094Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 匿名函数、自执行函数，自执行匿名函数和立即执行的函数表达式区别</p><p>今天在写代码的时候发现对自执行函数有点懵，便去查询资料。然后紧接着自执行匿名函数，立即执行函数，匿名函数一窝蜂的出来了，借此就好好谈谈这几个函数的区别吧。</p><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>匿名函数比较好理解，顾名思义就是没有名字的函数</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通函数:此函数声明了一个名为a的函数。 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//匿名函数:这时你会发现报错了</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这时你会发现单独运行一个匿名函数，由于不符合语法要求，会报错。解决方法：只需要用（）把匿名函数包起来即可</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;;）</span><br></pre></td></tr></table></figure><h3 id="自执行函数，立即执行的函数"><a href="#自执行函数，立即执行的函数" class="headerlink" title="自执行函数，立即执行的函数"></a>自执行函数，立即执行的函数</h3><p>在介绍这里之前，我们先聊一聊”自执行”这个说法，关于”自执行“每个人理解不一样，有人称他为：自动执行，也有称作：立即调用，在这里我比较认同另一种说法:立即调用的函数表达式。</p><h4 id="什么是自执行？"><a href="#什么是自执行？" class="headerlink" title="什么是自执行？"></a>什么是自执行？</h4><p> 我们创建了一个匿名的函数，并立即执行它，由于外部无法引用它内部的变量，因此在执行完后很快就会被释放，关键是这种机制不会污染全局对象。<br> 自执行函数，即定义和调用合为一体。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对于函数表达式，在后面加括号即可以让函数立即执行；例如下面这个函数，至于为什么加了括</span></span><br><span class="line">号就可以立即执行，我们可以这么理解，就是像f()；这样写的话，函数 可以立即执行是没问题的</span><br><span class="line">，我们在经常会用到，那么对于函数表达式来说，fn1就是对后面的匿名函数的一个引用，因此在</span><br><span class="line">后面的匿名函数后直接加括号，自然也就可以立即执行</span><br><span class="line">    <span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"ss"</span>);</span><br><span class="line">    &#125;();</span><br></pre></td></tr></table></figure><h4 id="自执行函数的其他几种写法"><a href="#自执行函数的其他几种写法" class="headerlink" title="自执行函数的其他几种写法"></a>自执行函数的其他几种写法</h4><p>我个人推荐第一种写法，好处是，能提醒阅读代码的人，这段代码是一个整体。</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1：最前最后加括号</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">alert(1);</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span><span class="params">()</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2：function外面加括号</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">alert(1);</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span>)<span class="params">()</span>;</span></span><br><span class="line"></span><br><span class="line">方法<span class="number">3</span>：<span class="function"><span class="keyword">function</span>前面加运算符，常见的是!与<span class="title">void</span> 。</span></span><br><span class="line"><span class="function">!<span class="title">function</span><span class="params">()</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">alert(1);</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span><span class="params">()</span>;</span></span><br><span class="line">void <span class="function"><span class="keyword">function</span><span class="params">()</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">alert(2);</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span><span class="params">()</span>;</span></span><br></pre></td></tr></table></figure><p> 在参考了多个网站总算将这些理念弄清楚一些。<br>     参考网址：<br>     <a href="http://www.cnblogs.com/TomXu/archive/2011/12/31/2289423.html" target="_blank" rel="noopener">http://www.cnblogs.com/TomXu/archive/2011/12/31/2289423.html</a><br>           <a href="https://www.cnblogs.com/jessiespur/p/9283101.html" target="_blank" rel="noopener">https://www.cnblogs.com/jessiespur/p/9283101.html</a><br>           <a href="https://www.jianshu.com/p/1d52ed86d52c" target="_blank" rel="noopener">https://www.jianshu.com/p/1d52ed86d52c</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 匿名函数、自执行函数，自执行匿名函数和立即执行的函数表达式区别&lt;/p&gt;
&lt;p&gt;今天在写代码的时候发现对自执行函数有点懵，便去查询资料。然后紧接着自执行匿名函数，立即执行函数，匿名函数一窝蜂的出来了，借此就好好谈谈这几个函数的区别吧。&lt;/p&gt;
&lt;h3 id=&quot;匿名函数
      
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="匿名函数 自执行函数" scheme="http://yoursite.com/tags/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0-%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>基本类型和引用类型的区别以及在内存中的分配</title>
    <link href="http://yoursite.com/2019/05/10/%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8C%BA%E5%88%AB%E4%BB%A5%E5%8F%8A%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%88%86%E9%85%8D/"/>
    <id>http://yoursite.com/2019/05/10/基本类型和引用类型的区别以及在内存中的分配/</id>
    <published>2019-05-10T02:16:02.255Z</published>
    <updated>2019-05-09T13:03:05.603Z</updated>
    
    <content type="html"><![CDATA[<p>﻿ECMAScript变量可能包含两种不同数据类型的值：基本类型值和引用类型值。基本类型值指的是简单的数据段，而引用类型值指那些可能由多个值构成的对象。</p><h3 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a>主要区别</h3><table><br>     <thead> <tr> <th>基本数据类型</th> <th>引用数据类型</th> &lt;</tr> </thead><br>      <tbody><br>          <tr> <td>在栈中进行分配</td> <td>在堆中进行分配</td> </tr><br>          <tr> <td>变量名指向具体的数值</td> <td>变量名指向存数据对象的内存地址,即变量名指向hash值</td>  </tr><br>          <tr> <td>变量在声明之后java就会立刻分配给他内存空间</td> <td>它以特殊的方式(类似C指针)指向对象实体（具体的值），这类变量声明时不会分配内存，只是存储了一个内存地址</td></tr><br>          <tr> <td>基本类型之间的赋值是创建新的拷贝</td> <td>对象之间的赋值只是传递引用</td> </tr><br>          <tr> <td>“==”和“!=”是在比较值</td> <td>    “==”和“!=”是在比较两个引用是否相同，需要自己实现equals()方法</td> </tr><br>          <tr> <td>基本类型变量创建和销毁很快</td> <td>    类对象需要JVM去销毁</td> </tr><br>     </tbody><br> </table><h3 id="动态的属性"><a href="#动态的属性" class="headerlink" title="动态的属性"></a>动态的属性</h3><p>定义基本类型值和引用类型值的方法时类似的：创建一个变量并为该变量赋值。但是对于不同类型值可以执行的操作就不一样了。</p><h5 id="引用类型值"><a href="#引用类型值" class="headerlink" title="引用类型值"></a>引用类型值</h5><p>我们可以为其添加属性和方法，也可以改变和删除其属性和方法。请看下面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.name = <span class="string">"Nicholas"</span>;<span class="comment">//添加属性并且赋值</span></span><br><span class="line">alert(person.name);<span class="comment">//输出Nicholas</span></span><br></pre></td></tr></table></figure><p>上面代码创建了一个对象并将其保存在了变量person中。然后为对象添加了一个名为name的属性并且将字符串“Nicholas”赋给了这个属性。</p><h5 id="基本类型值"><a href="#基本类型值" class="headerlink" title="基本类型值"></a>基本类型值</h5><p>我们不能给基本类型的值添加属性，尽管这样做并不会出错。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"Nicholas"</span>;</span><br><span class="line">name.age = <span class="number">27</span>;</span><br><span class="line">alert(name.age); <span class="comment">//得到：undefind</span></span><br></pre></td></tr></table></figure><p>在这个例子中，我们为字符串name定义了一个名为age的属性，并且赋值27。但在下面使用alert访问这个属性的时候，发现该属性不存在。这说明基本类型不能动态的添加属性。</p><h3 id="复制变量值"><a href="#复制变量值" class="headerlink" title="复制变量值"></a>复制变量值</h3><p>除了保存方式不同之外，在从一个变量向另一个变量复制基本类型和引用类型值时，也存在不同。</p><h5 id="基本类型值-1"><a href="#基本类型值-1" class="headerlink" title="基本类型值"></a>基本类型值</h5><p>如果从一个变量向另一个变量复制基本类型的值，会在变量对象上创建一个新值。然后把改制复制到新变量分配的位置上。看一个小例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = num1;</span><br></pre></td></tr></table></figure><p>在此，num1中保存的值时5.当使用num1的值来初始化num2时，num2中也保存了值5.但num2中的5与num1中 的5 是完全独立的。该值只是num1中5的一个副本。这两个变量可以参与任何操作而不会相会影响。<br><img src="https://img-blog.csdnimg.cn/20190328144441825.png" alt="在这里插入图片描述"></p><h5 id="引用类型值-1"><a href="#引用类型值-1" class="headerlink" title="引用类型值"></a>引用类型值</h5><p>当从一个变量向另一个变量复制引用类型的值时，同样也会将存储在变量对象中的值复制一份放到为新变量分配的空间中。不同的是，这个值的副本实际上是一个指针，而这个指针指向存储在堆中的一个对象。复制操作以后，这两个变量实际上将引用同一个对象。因此，改变其中一个变量，就会影响另一个变量。如下面的例子所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> object();</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">obj1.name = <span class="string">"Nicholaa"</span>;</span><br><span class="line">alert(obj2.name);<span class="comment">//输出“Nicholas”</span></span><br></pre></td></tr></table></figure><p>首先，变量obj1保存了一个对象的新实例。然后，这个值被复制到了obj2中；换句话说，obj1和obj2都指向同一个对象。这样，当为obj1添加属性name后，可以通过obj2来访问这个属性，因为这两个变量引用都是同一个对象。具体关系可以看下图：<br><img src="https://img-blog.csdnimg.cn/20190328145232755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">参考文献：JavaScript高级程序设计（第3版）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿ECMAScript变量可能包含两种不同数据类型的值：基本类型值和引用类型值。基本类型值指的是简单的数据段，而引用类型值指那些可能由多个值构成的对象。&lt;/p&gt;
&lt;h3 id=&quot;主要区别&quot;&gt;&lt;a href=&quot;#主要区别&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="基本类型和引用类型" scheme="http://yoursite.com/tags/%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的回调函数callback</title>
    <link href="http://yoursite.com/2019/05/10/JavaScript%E4%B8%AD%E7%9A%84%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0callback/"/>
    <id>http://yoursite.com/2019/05/10/JavaScript中的回调函数callback/</id>
    <published>2019-05-10T02:15:30.497Z</published>
    <updated>2019-05-09T12:55:45.452Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 解释</p><p>A callback is a function that is passed as an argument to another function and is executed after its parent function has completed.</p><blockquote><p>以上callback的英文解释，非常清晰简明，有时候英文理解要比翻译成中文二次理解更清楚。大概意思是：回调是一个函数，它作为参数传递给另一个函数，并在其父函数完成后执行。<br>其实函数也是一种数据类型，既可以当作参数进行传递，也可以当作方法的返回值传递</p></blockquote><hr><h2 id="先明白异步和同步"><a href="#先明白异步和同步" class="headerlink" title="先明白异步和同步"></a>先明白异步和同步</h2><p>想要理解清楚callback还是需要先把异步async/同步sync概念弄清楚。<br>先写一个异步小例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我是函数a开头'</span>)</span><br><span class="line"></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'我是setTimeout'</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我是函数a结尾'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我是函数b'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a()</span><br><span class="line">b()</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong><br><img src="https://img-blog.csdnimg.cn/20190419112843756.png" alt="在这里插入图片描述"></p><blockquote><p>从执行结果可以看出来执行顺序是之上而下执行下来，但setTimeout函数被放在了最后执行。这是一个异步操作，执行的时候并不会等待setTimeout而直接向下执行，等到所有任务执行完成在回过头来执行setTimeout函数。即使setTimeout第二个参数是0也会最后执行，setTimeout第二个参数的数字是表示执行最快时间不是一个确定时间。</p></blockquote><hr><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>&emsp;&emsp;回调函数字面上理解下来就是，回调就是一个函数的调用过程。函数a有一个参数，这个参数是个函数b，当函数a执行完以后执行函数b。那么这个过程就叫回调。字面意思也很好理解：回调，回调，就是回头调用的意思。函数a的事先干完，回头再调用函数b。<br>&emsp;&emsp;<strong>需要注意的是</strong>：所以回调与同步、异步并没有直接的联系，回调只是一种实现方式，既可以有同步回调，也可以有异步回调，还可以有事件处理回调和延迟函数回调，这些在我们工作中有很多的使用场景<br>&emsp;&emsp;所以其实并不是我们不认识回调函数，而是我们都萦绕在了这个“callback“ 这个词上，当你在一个函数中看到它是就会困惑，其实它只是一个形参名字而已。</p><p><strong>回调函数其实我们平时都使用过，来看看下面几个经典的：</strong></p><p>ajax中的回调函数：<br><img src="https://img-blog.csdnimg.cn/20190419114634238.png" alt="在这里插入图片描述"></p><p>点击事件的回调函数：<br><img src="https://img-blog.csdnimg.cn/2019041911470413.png" alt="在这里插入图片描述"></p><p>数组中遍历的回调函数：<br><img src="https://img-blog.csdnimg.cn/20190419114732317.png" alt="在这里插入图片描述"></p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>大多数情况下，callback是用来拿到函数中的数据，这牵扯到闭包的概念，可以看这篇文章：<a href="https://blog.csdn.net/qq_42068550/article/details/88838936" target="_blank" rel="noopener">javaScript里的闭包到底是什么？该怎么理解？</a></p><p><strong>就以Ajax的封装为例吧：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line">      oReq.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(oReq.responseText)</span><br><span class="line">      &#125;</span><br><span class="line">      oReq.open(<span class="string">"get"</span>,url,<span class="literal">true</span>)</span><br><span class="line">      oReq.send()</span><br></pre></td></tr></table></figure><blockquote><p>上面的是为封装的Ajax，我们请求到的数据responseText只能在onload中拿到，想要拿数据进行下一步操作也只能在onload函数中进行。但我们如果要封装给其他人使用，我们并不知道使用者需要拿这数据干什么，因此我们需要把responseText传递出去，这时候就需要使用callback。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url,callback</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line">        oReq.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//            console.log(oReq.responseText)</span></span><br><span class="line">            callback(oReq.responseText)</span><br><span class="line">        &#125;</span><br><span class="line">        oReq.open(<span class="string">"get"</span>,url,<span class="literal">true</span>)</span><br><span class="line">        oReq.send()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span>('data.json', function (data) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>上面这是封装以后的代码，我们通过callback把responseText传递出去,get方法的第二个参数就是回调函数callback，而data就是callback函数传递出来的responseText数据，通过回调函数拿到数据，使用者需要拿数据干什么都行了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 解释&lt;/p&gt;
&lt;p&gt;A callback is a function that is passed as an argument to another function and is executed after its parent function has co
      
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="callback" scheme="http://yoursite.com/tags/callback/"/>
    
  </entry>
  
  <entry>
    <title>定时调用和延时调用用法及区别</title>
    <link href="http://yoursite.com/2019/05/10/%E5%AE%9A%E6%97%B6%E8%B0%83%E7%94%A8%E5%92%8C%E5%BB%B6%E6%97%B6%E8%B0%83%E7%94%A8%E7%94%A8%E6%B3%95%E5%8F%8A%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/05/10/定时调用和延时调用用法及区别/</id>
    <published>2019-05-10T02:15:06.157Z</published>
    <updated>2019-05-09T13:03:56.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定时调用"><a href="#定时调用" class="headerlink" title="定时调用"></a>定时调用</h2><h4 id="setlnterval-定义和用法"><a href="#setlnterval-定义和用法" class="headerlink" title="setlnterval()定义和用法"></a>setlnterval()定义和用法</h4><p>setInterval() 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式。</p><p>setInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。由 setInterval() 返回的 ID 值可用作 clearInterval() 方法的参数。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>setInterval(code,millisec)</p><ul><li><p><strong>参数</strong></p><p>  1、code（必需）：回调函数， 每隔一段时间要执行一次的函数</p><p>  2、millisec（必需）：每次调用间隔时间，单位是ms</p><ul><li><strong>返回值</strong></li></ul></li></ul><p>一个可以传递给 Window.clearInterval() 从而取消对 code 的周期性执行的值。</p><ul><li><strong>实例</strong></li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每隔6000毫秒执行一次testFunction()函数，执行无数次。</span></span><br><span class="line"><span class="selector-tag">setInterval</span>(<span class="string">"testFunction()"</span>,<span class="string">"6000"</span>);</span><br></pre></td></tr></table></figure><h2 id="延时调用"><a href="#延时调用" class="headerlink" title="延时调用"></a>延时调用</h2><h4 id="setTimeout-定义和用法"><a href="#setTimeout-定义和用法" class="headerlink" title="setTimeout()定义和用法"></a>setTimeout()定义和用法</h4><p>setTimeout() 方法用于在指定的毫秒数后调用函数或计算表达式。</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><p>setTimeout(code,millisec)</p><ul><li><p><strong>参数</strong></p><p>1、回调函数， 需要隔一定时间后执行的函数</p><p>  2、每次调用间隔时间，单位是ms</p><ul><li><strong>提示和注释</strong></li></ul></li></ul><p>提示：setTimeout() 只执行 code 一次。如果要多次调用，请使用 setInterval() 或者让 code 自身再次调用 setTimeout()。</p><ul><li><strong>实例</strong></li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每隔6000毫秒执行一次testFunction()函数，执行无数次。</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="string">"testFunction()"</span>,<span class="string">"6000"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>小案例</strong></li><li><img src="https://img-blog.csdnimg.cn/20190326165852495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定时调用&quot;&gt;&lt;a href=&quot;#定时调用&quot; class=&quot;headerlink&quot; title=&quot;定时调用&quot;&gt;&lt;/a&gt;定时调用&lt;/h2&gt;&lt;h4 id=&quot;setlnterval-定义和用法&quot;&gt;&lt;a href=&quot;#setlnterval-定义和用法&quot; class=&quot;he
      
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="定时调用和延时调用" scheme="http://yoursite.com/tags/%E5%AE%9A%E6%97%B6%E8%B0%83%E7%94%A8%E5%92%8C%E5%BB%B6%E6%97%B6%E8%B0%83%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>javaScript正则表达式（内附最全的常用正则表达式）</title>
    <link href="http://yoursite.com/2019/05/10/javaScript%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E5%86%85%E9%99%84%E6%9C%80%E5%85%A8%E7%9A%84%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%89/"/>
    <id>http://yoursite.com/2019/05/10/javaScript正则表达式（内附最全的常用正则表达式）/</id>
    <published>2019-05-10T02:11:06.177Z</published>
    <updated>2019-05-09T12:58:45.978Z</updated>
    
    <content type="html"><![CDATA[<p>﻿### JavaScript 正则表达式</p><hr><p><strong>正则表达式</strong>（英语：Regular Expression，在代码中常简写为regex、regexp或RE）使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式。</p><p>搜索模式可用于文本搜索和文本替换。</p><hr><h4 id="什么是正则表达式？"><a href="#什么是正则表达式？" class="headerlink" title="什么是正则表达式？"></a>什么是正则表达式？</h4><p>正则表达式是由一个字符序列形成的搜索模式。<br>当你在文本中搜索数据时，你可以用搜索模式来描述你要查询的内容。<br>正则表达式可以是一个简单的字符，或一个更复杂的模式。<br>正则表达式可用于所有文本搜索和文本替换的操作。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/pattern/modifiers;</span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patt = <span class="regexp">/hello/i</span></span><br></pre></td></tr></table></figure><p><strong>实例解析</strong>：</p><p>/hello/i  是一个正则表达式。<br>hello  是一个模式 (用于检索匹配关键字)。<br>i  是一个修饰符 (搜索不区分大小写)。</p><hr><p><strong>使用字符串方法</strong></p><p>在 JavaScript 中，正则表达式通常用于两个字符串方法 : <strong>search()</strong> 和 <strong>replace()</strong>。</p><p><strong>search()</strong> 方法 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子字符串的<strong>起始位置</strong>。</p><p><strong>replace()</strong> 方法 用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子字符串。</p><hr><h5 id="search-方法使用"><a href="#search-方法使用" class="headerlink" title="search() 方法使用"></a>search() 方法使用</h5><p>使用正则表达式搜索 “make” 字符串，且不区分大小写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Visit make"</span>;</span><br><span class="line"><span class="keyword">var</span> n = str.search(<span class="regexp">/make/i</span>);</span><br><span class="line"><span class="comment">//结果：6</span></span><br></pre></td></tr></table></figure><p>search 方法可使用字符串作为参数。字符串参数会转换为正则表达式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Visit make"</span>;</span><br><span class="line"><span class="keyword">var</span> n = str.search(<span class="string">"make"</span>);</span><br><span class="line"><span class="comment">//结果：6</span></span><br></pre></td></tr></table></figure><hr><h5 id="replace-方法使用"><a href="#replace-方法使用" class="headerlink" title="replace() 方法使用"></a>replace() 方法使用</h5><p>使用正则表达式且不区分大小写将字符串中的 Microsoft 替换为 make :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Visit Microsoft!"</span>;</span><br><span class="line"><span class="keyword">var</span> res = str.replace(<span class="regexp">/microsoft/i</span>, <span class="string">"make"</span>);</span><br><span class="line"><span class="comment">//结果：Visit make!</span></span><br></pre></td></tr></table></figure><p>replace() 方法将接收字符串作为参数：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var str</span> = <span class="string">"Visit Microsoft!"</span>;</span><br><span class="line"><span class="attribute">var res</span> = str.replace(<span class="string">"Microsoft"</span>, <span class="string">"make"</span>);</span><br></pre></td></tr></table></figure><hr><h4 id="正则表达式修饰符"><a href="#正则表达式修饰符" class="headerlink" title="正则表达式修饰符"></a>正则表达式修饰符</h4><p><strong>修饰符</strong> 可以在全局搜索中不区分大小写:<br><img src="https://img-blog.csdnimg.cn/20190408122324407.png" alt="在这里插入图片描述"><hr><br><strong>正则表达式模式</strong></p><p>方括号用于查找某个范围内的字符：<br><img src="https://img-blog.csdnimg.cn/20190408122521988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h3><h5 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> 数字：^[<span class="number">0</span><span class="number">-9</span>]*$</span><br><span class="line"> <span class="number">2</span> n位的数字：^\d&#123;n&#125;$</span><br><span class="line"> <span class="number">3</span> 至少n位的数字：^\d&#123;n,&#125;$</span><br><span class="line"> <span class="number">4</span> m-n位的数字：^\d&#123;m,n&#125;$</span><br><span class="line"> <span class="number">5</span> 零和非零开头的数字：^(<span class="number">0</span>|[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)$</span><br><span class="line"> <span class="number">6</span> 非零开头的最多带两位小数的数字：^([<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)+(.[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?$</span><br><span class="line"> <span class="number">7</span> 带<span class="number">1</span><span class="number">-2</span>位小数的正数或负数：^(\-)?\d+(\.\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?$</span><br><span class="line"> <span class="number">8</span> 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$</span><br><span class="line"> <span class="number">9</span> 有两位小数的正实数：^[<span class="number">0</span><span class="number">-9</span>]+(.[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">2</span>&#125;)?$</span><br><span class="line"><span class="number">10</span> 有<span class="number">1</span>~<span class="number">3</span>位小数的正实数：^[<span class="number">0</span><span class="number">-9</span>]+(.[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;)?$</span><br><span class="line"><span class="number">11</span> 非零的正整数：^[<span class="number">1</span><span class="number">-9</span>]\d*$ 或 ^([<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)&#123;<span class="number">1</span>,<span class="number">3</span>&#125;$ 或 ^\+?[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*$</span><br><span class="line"><span class="number">12</span> 非零的负整数：^\-[<span class="number">1</span><span class="number">-9</span>][]<span class="number">0</span><span class="number">-9</span><span class="string">"*$ 或 ^-[1-9]\d*$</span></span><br><span class="line"><span class="string">13 非负整数：^\d+$ 或 ^[1-9]\d*|0$</span></span><br><span class="line"><span class="string">14 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</span></span><br><span class="line"><span class="string">15 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</span></span><br><span class="line"><span class="string">16 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</span></span><br><span class="line"><span class="string">17 正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</span></span><br><span class="line"><span class="string">18 负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</span></span><br><span class="line"><span class="string">19 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</span></span><br></pre></td></tr></table></figure><h5 id="二、校验字符的表达式"><a href="#二、校验字符的表达式" class="headerlink" title="二、校验字符的表达式"></a>二、校验字符的表达式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> 汉字：^[\u4e00-\u9fa5]&#123;<span class="number">0</span>,&#125;$</span><br><span class="line"> <span class="number">2</span> 英文和数字：^[A-Za-z0<span class="number">-9</span>]+$ 或 ^[A-Za-z0<span class="number">-9</span>]&#123;<span class="number">4</span>,<span class="number">40</span>&#125;$</span><br><span class="line"> <span class="number">3</span> 长度为<span class="number">3</span><span class="number">-20</span>的所有字符：^.&#123;<span class="number">3</span>,<span class="number">20</span>&#125;$</span><br><span class="line"> <span class="number">4</span> 由<span class="number">26</span>个英文字母组成的字符串：^[A-Za-z]+$</span><br><span class="line"> <span class="number">5</span> 由<span class="number">26</span>个大写英文字母组成的字符串：^[A-Z]+$</span><br><span class="line"> <span class="number">6</span> 由<span class="number">26</span>个小写英文字母组成的字符串：^[a-z]+$</span><br><span class="line"> <span class="number">7</span> 由数字和<span class="number">26</span>个英文字母组成的字符串：^[A-Za-z0<span class="number">-9</span>]+$</span><br><span class="line"> <span class="number">8</span> 由数字、<span class="number">26</span>个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w&#123;<span class="number">3</span>,<span class="number">20</span>&#125;$</span><br><span class="line"> <span class="number">9</span> 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0<span class="number">-9</span>_]+$</span><br><span class="line"><span class="number">10</span> 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0<span class="number">-9</span>]+$ 或 ^[\u4E00-\u9FA5A-Za-z0<span class="number">-9</span>]&#123;<span class="number">2</span>,<span class="number">20</span>&#125;$</span><br><span class="line"><span class="number">11</span> 可以输入含有^%&amp;<span class="string">',;=?$\"等字符：[^%&amp;'</span>,;=?$\x22]+</span><br><span class="line"><span class="number">12</span> 禁止输入含有~的字符：[^~\x22]+</span><br></pre></td></tr></table></figure><h5 id="三、特殊需求表达式"><a href="#三、特殊需求表达式" class="headerlink" title="三、特殊需求表达式"></a>三、特殊需求表达式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</span><br><span class="line"> <span class="number">2</span> 域名：[a-zA-Z0<span class="number">-9</span>][-a-zA-Z0<span class="number">-9</span>]&#123;<span class="number">0</span>,<span class="number">62</span>&#125;(<span class="regexp">/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/</span>.?</span><br><span class="line"> <span class="number">3</span> InternetURL：[a-zA-z]+:<span class="comment">//[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</span></span><br><span class="line"> <span class="number">4</span> 手机号码：^(<span class="number">13</span>[<span class="number">0</span><span class="number">-9</span>]|<span class="number">14</span>[<span class="number">0</span><span class="number">-9</span>]|<span class="number">15</span>[<span class="number">0</span><span class="number">-9</span>]|<span class="number">16</span>[<span class="number">0</span><span class="number">-9</span>]|<span class="number">17</span>[<span class="number">0</span><span class="number">-9</span>]|<span class="number">18</span>[<span class="number">0</span><span class="number">-9</span>]|<span class="number">19</span>[<span class="number">0</span><span class="number">-9</span>])\d&#123;<span class="number">8</span>&#125;$ (由于工信部放号段不定时，所以建议使用泛解析 ^([<span class="number">1</span>][<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])\d&#123;<span class="number">9</span>&#125;$)</span><br><span class="line"> <span class="number">5</span> 电话号码(<span class="string">"XXX-XXXXXXX"</span>、<span class="string">"XXXX-XXXXXXXX"</span>、<span class="string">"XXX-XXXXXXX"</span>、<span class="string">"XXX-XXXXXXXX"</span>、<span class="string">"XXXXXXX"</span>和<span class="string">"XXXXXXXX)：^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$ </span></span><br><span class="line"><span class="string"> 6 国内电话号码(0511-4405222、021-87888822)：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125; </span></span><br><span class="line"><span class="string"> 7 18位身份证号码(数字、字母x结尾)：^((\d&#123;18&#125;)|([0-9x]&#123;18&#125;)|([0-9X]&#123;18&#125;))$</span></span><br><span class="line"><span class="string"> 8 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$</span></span><br><span class="line"><span class="string"> 9 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;5,17&#125;$</span></span><br><span class="line"><span class="string">10 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$  </span></span><br><span class="line"><span class="string">11 日期格式：^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;</span></span><br><span class="line"><span class="string">12 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</span></span><br><span class="line"><span class="string">13 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$ </span></span><br><span class="line"><span class="string">14 钱的输入格式：</span></span><br><span class="line"><span class="string">15    1.有四种钱的表示形式我们可以接受:"</span><span class="number">10000.00</span><span class="string">" 和 "</span><span class="number">10</span>,<span class="number">000.00</span><span class="string">", 和没有 "</span>分<span class="string">" 的 "</span><span class="number">10000</span><span class="string">" 和 "</span><span class="number">10</span>,<span class="number">000</span><span class="string">"：^[1-9][0-9]*$ </span></span><br><span class="line"><span class="string">16    2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符"</span><span class="number">0</span><span class="string">"不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$ </span></span><br><span class="line"><span class="string">17    3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$ </span></span><br><span class="line"><span class="string">18    4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ </span></span><br><span class="line"><span class="string">19    5.必须说明的是,小数点后面至少应该有1位数,所以"</span><span class="number">10.</span><span class="string">"是不通过的,但是 "</span><span class="number">10</span><span class="string">" 和 "</span><span class="number">10.2</span><span class="string">" 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$ </span></span><br><span class="line"><span class="string">20    6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$ </span></span><br><span class="line"><span class="string">21    7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$ </span></span><br><span class="line"><span class="string">22    8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$ </span></span><br><span class="line"><span class="string">23    备注：这就是最终结果了,别忘了"</span>+<span class="string">"可以用"</span>*<span class="string">"替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</span></span><br><span class="line"><span class="string">24 xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$</span></span><br><span class="line"><span class="string">25 中文字符的正则表达式：[\u4e00-\u9fa5]</span></span><br><span class="line"><span class="string">26 双字节字符：[^\x00-\xff]    (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</span></span><br><span class="line"><span class="string">27 空白行的正则表达式：\n\s*\r    (可以用来删除空白行)</span></span><br><span class="line"><span class="string">28 HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt;    (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</span></span><br><span class="line"><span class="string">29 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$)    (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</span></span><br><span class="line"><span class="string">30 腾讯QQ号：[1-9][0-9]&#123;4,&#125;    (腾讯QQ号从10000开始)</span></span><br><span class="line"><span class="string">31 中国邮政编码：[1-9]\d&#123;5&#125;(?!\d)    (中国邮政编码为6位数字)</span></span><br><span class="line"><span class="string">32 IP地址：\d+\.\d+\.\d+\.\d+    (提取IP地址时有用)</span></span><br><span class="line"><span class="string">33 IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</span></span><br></pre></td></tr></table></figure><p>参考文章：<a href="https://www.w3cschool.cn/javascript/js-regexp.html" target="_blank" rel="noopener">https://www.w3cschool.cn/javascript/js-regexp.html</a><br><a href="http://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html" target="_blank" rel="noopener">http://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿### JavaScript 正则表达式&lt;/p&gt;
&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;正则表达式&lt;/strong&gt;（英语：Regular Expression，在代码中常简写为regex、regexp或RE）使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式。
      
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
</feed>
