<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OuYang&#39;blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-18T10:22:38.673Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>OuYang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>本地存储和离线缓存的作用和区别</title>
    <link href="http://yoursite.com/2019/06/18/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E5%92%8C%E7%A6%BB%E7%BA%BF%E7%BC%93%E5%AD%98%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/06/18/本地存储和离线缓存的作用和区别/</id>
    <published>2019-06-18T10:20:35.219Z</published>
    <updated>2019-06-18T10:22:38.673Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 前言</p><p>前端的存储方式有：localStorage、sessionStorage、cookie、UserData、webSQL、indexeddb、HTML5离线存储等。各个存储方式有各自的优缺点，本文我们来探讨一下不同存储的功能及区别。</p><h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><h3 id="1-cookie"><a href="#1-cookie" class="headerlink" title="1.cookie"></a>1.cookie</h3><p>在h5之前，存储主要用的是cookie。cookie会随着每次http请求头信息一起发送，无形中增加了网络流量，另外，cookie能存储的数据容量有限，根据浏览器类型不同而不同，IE6大约只能存储2K。</p><h4 id="1）cookie的存取方法"><a href="#1）cookie的存取方法" class="headerlink" title="1）cookie的存取方法"></a>1）cookie的存取方法</h4><ul><li>1.存:赋值（键值对）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">"键=值"</span>; <span class="comment">//一次只能存一个键值对</span></span><br></pre></td></tr></table></figure><ul><li>2.取：不赋值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v=<span class="built_in">document</span>.cookie; <span class="comment">//取出字符串</span></span><br><span class="line">常用操作：</span><br><span class="line"><span class="keyword">var</span> arr1 = v.split(<span class="string">"; "</span>);<span class="comment">//分割</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(obj); <span class="comment">//对象转换为字符串存入</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(str);  <span class="comment">//JSON字符串转换为对象取出</span></span><br></pre></td></tr></table></figure><ul><li>3.删：（设置存储有效时长为过去时间）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">date.setDate(date.getDate()+<span class="string">"设置时长"</span>);</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">"key=value;expires="</span>+date.toUTCString();</span><br></pre></td></tr></table></figure><h4 id="2）cookie的优缺点"><a href="#2）cookie的优缺点" class="headerlink" title="2）cookie的优缺点"></a>2）cookie的优缺点</h4><ul><li><strong>优点</strong>：<br>可控制过期时间，使其不会长期有效<br>可扩展、可用性比较好<br>可加密减少cookie被破解的可能性</li><li><strong>缺点</strong>：<br>数量和长度有限制，最多20条，最长不能超过40k<br>在请求头上带着数据安全性差</li></ul><h4 id="3）cookie的应用场景"><a href="#3）cookie的应用场景" class="headerlink" title="3）cookie的应用场景"></a>3）cookie的应用场景</h4><p>主要应用：购物车、客户端登录</p><hr><h2 id="2-localStorage"><a href="#2-localStorage" class="headerlink" title="2.localStorage"></a>2.localStorage</h2><p>localStorage（本地存储）,可以长期存储数据，没有时间限制，一天，一年，两年甚至更长，数据都可以使用。<br>localStorage中一般浏览器支持的是5M大小，这个在不同的浏览器中localStorage会有所不同</p><h3 id="1）使用方法"><a href="#1）使用方法" class="headerlink" title="1）使用方法"></a>1）使用方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">localStorage.setItem(<span class="string">"key"</span>,<span class="string">"value"</span>);<span class="comment">//存储</span></span><br><span class="line">localStorage.getItems(key);<span class="comment">//按key进行取值</span></span><br><span class="line">localStorage.removeItems(key);<span class="comment">//按key单个删除</span></span><br><span class="line">localStorage.clear();<span class="comment">//删除全部数据</span></span><br><span class="line">localStorage.length;<span class="comment">//获得数据的数量</span></span><br><span class="line">localStorage.valueOf();<span class="comment">//获取全部值</span></span><br></pre></td></tr></table></figure><h3 id="2）优缺点"><a href="#2）优缺点" class="headerlink" title="2）优缺点"></a>2）优缺点</h3><ul><li><strong>优点：</strong><br>localStorage拓展了cookie的4k限制<br>localStorage可以将第一次请求的5M大小数据直接存储到本地，相比于cookie可以节约带宽<br>localStorage的使用也是遵循同源策略的，所以不同的网站直接是不能共用相同的localStorage</li><li><strong>缺点：</strong><br>需要手动删除，否则长期存在<br>浏览器大小不一，版本的支持也不一样<br>localStorage只支持string类型的存储，JSON对象需要转换<br>localStorage本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡</li><li><strong>特点：</strong><br>同源策略限制、只在本地存储、永久保存、同浏览器共享</li></ul><h3 id="3）应用场合"><a href="#3）应用场合" class="headerlink" title="3）应用场合"></a>3）应用场合</h3><p>数据比较大的临时保存方案。如在线编辑文章时的自动保存。<br>多页面访问共同数据。sessionStorage只适用于同一个标签页，localStorage相比而言可以在多个标签页中共享数据。</p><hr><h2 id="3-sessionStorage"><a href="#3-sessionStorage" class="headerlink" title="3.sessionStorage"></a>3.sessionStorage</h2><p>sessionStorage（会话存储），只有在浏览器被关闭之前使用，创建另一个页面时同意可以使用，关闭浏览器之后数据就会消失</p><h3 id="1）使用方法-1"><a href="#1）使用方法-1" class="headerlink" title="1）使用方法"></a>1）使用方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.setItem(<span class="string">"key"</span>,<span class="string">"value"</span>);<span class="comment">//存储</span></span><br><span class="line"> sessionStorage.getItems(key);<span class="comment">//按key进行取值</span></span><br><span class="line"> sessionStorage.removeItems(key);<span class="comment">//按key单个删除</span></span><br><span class="line"> sessionStorage.clear();<span class="comment">//删除全部数据</span></span><br><span class="line"> sessionStorage.length;<span class="comment">//获得数据的数量</span></span><br><span class="line"> sessionStorage.valueOf();<span class="comment">//获取全部值</span></span><br></pre></td></tr></table></figure><h3 id="2）特点"><a href="#2）特点" class="headerlink" title="2）特点"></a>2）特点</h3><ul><li><strong>同源策略限制</strong>。若想在不同页面之间对同一个sessionStorage进行操作，这些页面必须在同一协议、同一主机名和同一端口下。</li><li><strong>单标签页限制</strong>。sessionStorage操作限制在单个标签页中，在此标签页进行同源页面访问都可以共享sessionStorage数据。</li><li><strong>只在本地存储</strong>。seesionStorage的数据不会跟随HTTP请求一起发送到服务器，只会在本地生效，并在关闭标签页后清除数据</li><li><strong>存储方式</strong>。seesionStorage的存储方式采用key、value的方式。value的值必须为字符串类型(传入非字符串，也会在存储时转换为字符串。)。</li><li><strong>存储上限限制</strong>。不同的浏览器存储的上限也不一样，但大多数浏览器把上限限制在5MB以下。</li></ul><h3 id="3）应用场合-1"><a href="#3）应用场合-1" class="headerlink" title="3）应用场合"></a>3）应用场合</h3><p>sessionStorage 非常适合单页应用程序，可以方便在各业务模块进行传值。</p><hr><h2 id="4-localStorange与sessionStorage的相同点和不同点"><a href="#4-localStorange与sessionStorage的相同点和不同点" class="headerlink" title="4.localStorange与sessionStorage的相同点和不同点"></a>4.localStorange与sessionStorage的相同点和不同点</h2><p>是不敢看完上面两个感觉有点懵，好像一样的？他们还是有所区别的，让我们看看他们的相同点和不同点：</p><ul><li><strong>相同点：</strong><br>存值都是以键值对形式存在，值也是存入字符串类型（如果是对象，就序列化以后再存入）；<br>localStorage和sessionStorage使用时使用相同的API；<br>都是用来存储客户端临时信息的对象；<br>解决cookie大小4k的问题；解决请求头常带存储信息的问题；解决关系型存储的问题</li><li><strong>不同点：</strong><br>H5的两种存储技术的最大区别就是生命周期。<br>localStorage是本地存储，存储期限不限；<br>sessionStorage是会话存储，页面关闭数据就会丢失。</li></ul><h2 id="5-web-storage和cookie的区别"><a href="#5-web-storage和cookie的区别" class="headerlink" title="5. web storage和cookie的区别"></a>5. web storage和cookie的区别</h2><p>Web Storage包括localStorange与sessionStorage。它的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。</p><p>除此之外，Web Storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie。</p><p>但是Cookie也是不可以或缺的：<strong>Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生。</strong></p><hr><h2 id="离线缓存"><a href="#离线缓存" class="headerlink" title="离线缓存"></a>离线缓存</h2><p>Html5 引入了应用程序缓存，这意味着 web 应用可在没有因特网连接时进行访问</p><h3 id="为什么要使用离线缓存？"><a href="#为什么要使用离线缓存？" class="headerlink" title="为什么要使用离线缓存？"></a>为什么要使用离线缓存？</h3><p><strong>应用程序缓存为应用带来的优势：</strong></p><ul><li>离线浏览：用户可在应用离线时使用它们</li><li>速度：已缓存资源加载速度块</li><li>减少服务器负载：浏览器只从服务器下载更新过的资源</li></ul><h3 id="2-Application-Cache-（Manifest）"><a href="#2-Application-Cache-（Manifest）" class="headerlink" title="2.Application Cache （Manifest）"></a>2.Application Cache （Manifest）</h3><h4 id="1）使用方法："><a href="#1）使用方法：" class="headerlink" title="1）使用方法："></a>1）使用方法：</h4><h5 id="1-在html标签添加manifest属性"><a href="#1-在html标签添加manifest属性" class="headerlink" title="1. 在html标签添加manifest属性"></a>1. 在html标签添加manifest属性</h5><p>在页面的html标签中添加manifest属性，属性值为manifest文件的路径。如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">manifest</span>=<span class="string">"../js/demo.manifest"</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-编写manifest文件2-gt-编写manifest文件"><a href="#2-编写manifest文件2-gt-编写manifest文件" class="headerlink" title="2. 编写manifest文件2&gt; 编写manifest文件"></a>2. 编写manifest文件2&gt; 编写manifest文件</h5><p>manifest文件是简单的文本文件，它会告知浏览器需要缓存的内容以及不需要缓存的内容。</p><blockquote><p>manifest文件可分为三部分：<br>(1) CACHE MANIFEST - 在此标题下列出的文件将在首次下载后进行缓存<br>(2)NETWORK - 在此标题下列出的文件需要与服务器的连接，且不会被缓存<br>(3)FALLBACK - 在此标题下列出的文件规定当页面无法访问时的回退页面（比如 404 页面）</p></blockquote><p>简单示例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line">   #version 1.1   /*版本号*/</span><br><span class="line">   CACHE:</span><br><span class="line">       html/index.html <span class="comment">/*需要缓存的文件*/</span></span><br><span class="line">   NETWORK:</span><br><span class="line">       js/jquery.js <span class="comment">/*不需要缓存的文件*/</span></span><br><span class="line">   FALLBACK: </span><br><span class="line">       html/index.html <span class="comment">/*当页面无法访问时的回退页面*/</span></span><br></pre></td></tr></table></figure><h4 id="2）注意事项："><a href="#2）注意事项：" class="headerlink" title="2）注意事项："></a>2）注意事项：</h4><ol><li>浏览器对缓存数据的容量限制可能不太一样</li><li>如果manifest文件，或者内部列举的某一个文件不能正常下载，整个更新过程将视为失败，浏览器会继续加载之前的缓存</li><li>引用的manifest文件必须和html文件同源，同域</li><li>浏览器的自动缓存会导致更改了的html文件必须更新版本才能更新页面</li><li>更新版本后，必须刷新一次才会启动新版本</li><li>当manifest文件发生改变时，资源请求本身也会触发更新</li></ol><h4 id="3-离线缓存与传统浏览器缓存区别："><a href="#3-离线缓存与传统浏览器缓存区别：" class="headerlink" title="3)离线缓存与传统浏览器缓存区别："></a>3)离线缓存与传统浏览器缓存区别：</h4><p>浏览器缓存（Browser Caching）是为了节约网络的资源加速浏览，浏览器在用户磁盘上对最近请求过的文档进行存储，当访问者再次请求这个页面时，浏览器就可以从本地磁盘显示文档，这样就可以加速页面的阅览</p><p><strong>区别：</strong></p><ol><li>离线缓存是针对整个应用，浏览器缓存是单个文件</li><li>离线缓存断网了还是可以打开页面，浏览器缓存不行</li><li>离线缓存可以主动通知浏览器更新资源</li></ol><h2 id="本地存储和离线存储有什么相同和不同"><a href="#本地存储和离线存储有什么相同和不同" class="headerlink" title="本地存储和离线存储有什么相同和不同"></a>本地存储和离线存储有什么相同和不同</h2><p><strong>相同：</strong><br>本地存储与离线缓存都是为了方便网页的加载，提高用户体验等。</p><p><strong>不同：</strong><br>本地存储一般存储的都是数据，而离线缓存一般存储的是网页等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 前言&lt;/p&gt;
&lt;p&gt;前端的存储方式有：localStorage、sessionStorage、cookie、UserData、webSQL、indexeddb、HTML5离线存储等。各个存储方式有各自的优缺点，本文我们来探讨一下不同存储的功能及区别。&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="本地存储和离线缓存" scheme="http://yoursite.com/tags/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E5%92%8C%E7%A6%BB%E7%BA%BF%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Ajax详细剖析</title>
    <link href="http://yoursite.com/2019/06/18/Ajax%E8%AF%A6%E7%BB%86%E5%89%96%E6%9E%90/"/>
    <id>http://yoursite.com/2019/06/18/Ajax详细剖析/</id>
    <published>2019-06-18T10:20:35.219Z</published>
    <updated>2019-06-18T10:21:52.975Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 前言</p><p>手写Ajax是前端面试常考的，所以对于手写Ajax是很必要的，不过我们不只要会默写更要理解。</p><h2 id="基本模板"><a href="#基本模板" class="headerlink" title="基本模板"></a>基本模板</h2><p>下面是Ajax请求的基本模板<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">"GET"</span>,url);</span><br><span class="line">xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(xhr.readyState==<span class="number">4</span> &amp;&amp; xhr.status==<span class="number">200</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure></p><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>接下来我们一句一句的来解释一下什么意思。</p><p><code>var xhr=new XMLHttpRequest();</code></p><blockquote><p>获取一个XMLHttpRequest 对象，XMLHttpRequest 用于和服务器交换数据。</p></blockquote><p><code>xhr.open(&quot;GET&quot;,url)</code></p><blockquote><p>open(method,url,async)<br>规定请求的类型、URL 以及是否异步处理请求。<br>method：请求的类型；GET 或 POST<br>url：文件在服务器上的位置<br>async：true（异步默认）或 false（同步）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(xhr.readyState==<span class="number">4</span> &amp;&amp; xhr.status==<span class="number">200</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>onreadyStateChange事件是在readyState属性发生改变时触发的，readyState的值表示了当前请求的状态，在事件处理程序中可以根据这个值来进行不同的处理。 readyState有五种可取值0：尚未初始化，1：正在加载，2：加载完毕，3：正在处理；4：处理完毕。一旦readyState属性的值变成了4，就可以从服务器返回的响应数据进行访问了。<br>status 返回了XMLHttpRequest 响应中的数字状态码。status 200 代表一个成功的请求。如果服务器响应中没有明确指定status码，XMLHttpRequest.status 将会默认为200。<br>上面代码意思就是：当请求处理完毕并成功的时候打印信息</p></blockquote><p><code>xhr.send();</code></p><blockquote><p>send() 方法用于发送 HTTP 请求。如果是异步请求（默认为异步请求），则此方法会在请求发送后立即返回；如果是同步请求，则此方法直到响应到达后才会返回。</p></blockquote><h2 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="keyword">var</span> url=<span class="string">"http://127.0.0.1:8080/xxx.do?username=testuser&amp;userno=123"</span>;</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">"GET"</span>,url);</span><br><span class="line">xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(xhr.readyState==<span class="number">4</span> &amp;&amp; xhr.status==<span class="number">200</span>)&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><h2 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="keyword">var</span> url=<span class="string">"http://127.0.0.1:8080/xxx.do"</span>;</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">"POST"</span>,url);</span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/www-form-urlencoded"</span>)</span><br><span class="line">xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(xhr.readyState==<span class="number">4</span> &amp;&amp; xhr.status==<span class="number">200</span>)&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">xhr.send(<span class="string">"username=testuser&amp;usernum=123"</span>);</span><br></pre></td></tr></table></figure><p><strong>解释一下GET和POST请求的一些区别：</strong></p><ol><li><strong>setRequestHeader</strong><br>语法：myReq.setRequestHeader(header, value);<blockquote><p>通 常在HTTP协议里，客户端像服务器取得某个网页的时候，必须发送一个HTTP协议的头文件，告诉服务器客户端要下载什么信息以及相关的参数。而 XMLHTTP 就是通过HTTP协议取得网站上的文件数据的，所以也要发送HTTP头给服务器。 但是 XMLHTTP 默认的情况下有些参数可能没有说明在HTTP头里，这是当我们需要修改或添加这些参数时就用到了<br>setRequestHeader 方法</p></blockquote></li></ol><p>一般GET请求不需要设置，因为get的请求直接拼接在url后面，例如：<code>var url=&quot;http://127.0.0.1:8080/xxx.do?username=testuser&amp;userno=123&quot;;</code> 但是post请求一般就需要设置请求头。<br>常见的：CONTENT-TYPE:application/x-www-form-urlencoded含义是表示客户端提交给服务器文本内容的编码方式 是URL编码，即除了标准字符外，每字节以双字节16进制前加个“%”表示</p><ol start="2"><li><strong>send</strong><br>GET请求一般直接send()为空，因为GET请求不需要发送数据，请求已经拼接在URL后面了，而POST一般就需要，例如：<code>xhr.send(&quot;username=testuser&amp;usernum=123&quot;);</code>这里send里面写的就是postdata。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 前言&lt;/p&gt;
&lt;p&gt;手写Ajax是前端面试常考的，所以对于手写Ajax是很必要的，不过我们不只要会默写更要理解。&lt;/p&gt;
&lt;h2 id=&quot;基本模板&quot;&gt;&lt;a href=&quot;#基本模板&quot; class=&quot;headerlink&quot; title=&quot;基本模板&quot;&gt;&lt;/a&gt;基本模板&lt;/
      
    
    </summary>
    
      <category term="Ajax" scheme="http://yoursite.com/categories/Ajax/"/>
    
    
      <category term="Ajax" scheme="http://yoursite.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>双向绑定</title>
    <link href="http://yoursite.com/2019/06/18/%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"/>
    <id>http://yoursite.com/2019/06/18/双向绑定/</id>
    <published>2019-06-18T00:14:33.320Z</published>
    <updated>2019-06-18T00:16:55.937Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 前言</p><p>单向绑定非常简单，就是把Model绑定到View，当我们用JavaScript代码更新Model时，View就会自动更新。</p><p>有单向绑定，就有双向绑定。如果用户更新了View，Model的数据也自动被更新了，这种情况就是双向绑定。</p><h2 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h2><p>什么情况下用户可以更新View呢？填写表单就是一个最直接的例子。当用户填写表单时，View的状态就被更新了，如果此时MVVM框架可以自动更新Model的状态，那就相当于我们把Model和View做了双向绑定：<br><img src="https://img-blog.csdnimg.cn/20190617143734148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在浏览器中，当用户修改了表单的内容时，我们绑定的Model会自动更新：<br><img src="https://img-blog.csdnimg.cn/20190617143751359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="vue中实现"><a href="#vue中实现" class="headerlink" title="vue中实现"></a>vue中实现</h2><p>在Vue中，使用双向绑定非常容易，我们先创建一个VM实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">'#vm'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            email: <span class="string">''</span>,</span><br><span class="line">            name: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">window</span>.vm = vm;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后，编写一个HTML FORM表单，并用v-model指令把某个<input>和Model的某个属性作双向绑定：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"vm"</span> <span class="attr">action</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"email"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以在表单中输入内容，然后在浏览器console中用window.vm.$data查看Model的内容，也可以用window.vm.name查看Model的name属性，它的值和FORM表单对应的<input>是一致的。</p><p>如果在浏览器console中用JavaScript更新Model，例如，执行window.vm.name=’Bob’，表单对应的<input>内容就会立刻更新。</p><h3 id="处理事件"><a href="#处理事件" class="headerlink" title="处理事件"></a>处理事件</h3><p>当用户提交表单时，传统的做法是响应onsubmit事件，用jQuery获取表单内容，检查输入是否有效，最后提交表单，或者用AJAX提交表单。</p><p>现在，获取表单内容已经不需要了，因为双向绑定直接让我们获得了表单内容，并且获得了合适的数据类型。</p><p>响应onsubmit事件也可以放到VM中。我们在<form>元素上使用指令：</form></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"vm"</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"register"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，v-on:submit=”register”指令就会自动监听表单的submit事件，并调用register方法处理该事件。使用.prevent表示阻止事件冒泡，这样，浏览器不再处理<form>的submit事件。</form></p><p>因为我们指定了事件处理函数是register，所以需要在创建VM时添加一个register函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#vm'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        register: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 显示JSON格式的Model:</span></span><br><span class="line">            alert(<span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.$data));</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> AJAX POST...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在register()函数内部，我们可以用AJAX把JSON格式的Model发送给服务器，就完成了用户注册的功能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 前言&lt;/p&gt;
&lt;p&gt;单向绑定非常简单，就是把Model绑定到View，当我们用JavaScript代码更新Model时，View就会自动更新。&lt;/p&gt;
&lt;p&gt;有单向绑定，就有双向绑定。如果用户更新了View，Model的数据也自动被更新了，这种情况就是双向绑定。&lt;/
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="双向绑定" scheme="http://yoursite.com/tags/%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"/>
    
  </entry>
  
  <entry>
    <title>新版本vue中没有dev-server.js文件，如何进行后台数据模拟？</title>
    <link href="http://yoursite.com/2019/06/18/%E6%B5%85%E6%9E%90BFC%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%9C%E7%94%A8/"/>
    <id>http://yoursite.com/2019/06/18/浅析BFC原理及作用/</id>
    <published>2019-06-18T00:14:33.273Z</published>
    <updated>2019-06-18T00:17:40.618Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 什么是BFC</p><p>块格式化上下文（Block Formatting Context，BFC） 是Web页面的可视化CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。</p><h2 id="怎么创建BFC"><a href="#怎么创建BFC" class="headerlink" title="怎么创建BFC"></a>怎么创建BFC</h2><p>下列方式会创建块格式化上下文：<br><img src="https://img-blog.csdnimg.cn/20190617194052347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上面太多了不太好记，主要可以记住以下四种：</p><ul><li>body 根元素</li><li>浮动元素：float 除 none 以外的值</li><li>绝对定位元素：position (absolute、fixed)</li><li>display 为 inline-block、table-cells、flex</li><li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li></ul><h2 id="BFC-特性"><a href="#BFC-特性" class="headerlink" title="BFC 特性"></a>BFC 特性</h2><ol><li>使 BFC 内部浮动元素不会到处乱跑；</li><li>和浮动元素产生边界。</li></ol><h2 id="BFC常见作用"><a href="#BFC常见作用" class="headerlink" title="BFC常见作用"></a>BFC常见作用</h2><h4 id="1、阻止外边距折叠"><a href="#1、阻止外边距折叠" class="headerlink" title="1、阻止外边距折叠"></a>1、阻止外边距折叠</h4><p><strong>margin塌陷问题</strong>：在标准文档流中，块级标签之间竖直方向的margin会以大的为准，这就是margin的塌陷现象。可以用overflow：hidden产生bfc来解决。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">div&#123;</span></span><br><span class="line"><span class="undefined">    width: 100px;</span></span><br><span class="line"><span class="undefined">    height: 100px;</span></span><br><span class="line"><span class="undefined">    background: lightblue;</span></span><br><span class="line"><span class="undefined">    margin: 100px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190617195129423.png" alt="在这里插入图片描述"></p><blockquote><p>从效果上看，因为两个div元素都处于同一个BFC容器下（这里指body元素），所以第一个div的下边距和第二个div的上边距发生了重叠，所以两个盒子之间距离只有100px，而不是200px。</p></blockquote><p>但这不是 CSS 的 bug，我们可以理解为一种规范，如果想要避免外边距的重叠，可以将其放在<strong>不同的 BFC 容器中</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .content1,.content2&#123;</span></span><br><span class="line"><span class="undefined">            overflow: hidden;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        .div1,.div2 &#123;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="undefined">            background: lightblue;</span></span><br><span class="line"><span class="undefined">            margin: 100px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190617195942593.png" alt="在这里插入图片描述"></p><h4 id="2、包含浮动元素"><a href="#2、包含浮动元素" class="headerlink" title="2、包含浮动元素"></a>2、包含浮动元素</h4><p><strong>高度塌陷问题</strong>，在通常情况下父元素的高度会被子元素撑开，而在这里因为其子元素为浮动元素所以父元素发生了高度坍塌，上下边界重合，这时就可以用BFC来清除浮动了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border: 1px solid #000;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 100px;background: grey;float: left;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190617200221169.png" alt="在这里插入图片描述"><br>由于容器内元素浮动，脱离了文档流，所以容器只剩下2px的边距高度。如果触发容器的BFC，那么容器将会包裹浮动元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border: 1px solid #000;overflow: hidden"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 100px;background: grey;float: left;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190617200344179.png" alt="在这里插入图片描述"></p><h4 id="3、阻止元素被浮动元素覆盖"><a href="#3、阻止元素被浮动元素覆盖" class="headerlink" title="3、阻止元素被浮动元素覆盖"></a>3、阻止元素被浮动元素覆盖</h4><p><strong>兄弟div浮动问题</strong>：由于左侧块级元素发生了浮动，所以和右侧未发生浮动的块级元素不在同一层内，所以会发生div遮挡问题。可以给右侧元素添加 overflow: hidden，触发BFC来解决遮挡问题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 100px;width: 100px;float: left;background: lightblue"</span>&gt;</span>我是一个左浮动的元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 200px; height: 200px;background: grey"</span>&gt;</span>我是一个没有设置浮动, </span><br><span class="line">也没有触发 BFC 元素, width: 200px; height:200px; background: grey;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2019061720054364.png" alt="在这里插入图片描述"><br>这时候其实第二个元素有部分被浮动元素所覆盖，但是文本信息不会被浮动元素所覆盖，如果想避免元素被覆盖，可触发第二个元素的BFC特性，在第二个元素中加入overflow：hidden，就会变成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 100px;width: 100px;float: left;background: lightblue"</span>&gt;</span>我是一个左浮动的元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 200px; height: 200px;background: grey;overflow:hidden"</span>&gt;</span>我是一个没有设置浮动, </span><br><span class="line">也没有触发 BFC 元素, width: 200px; height:200px; background: grey;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190617200639361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 什么是BFC&lt;/p&gt;
&lt;p&gt;块格式化上下文（Block Formatting Context，BFC） 是Web页面的可视化CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。&lt;/p&gt;
&lt;h2 id=&quot;怎么创建BFC&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="css/html" scheme="http://yoursite.com/categories/css-html/"/>
    
    
      <category term="dev-server" scheme="http://yoursite.com/tags/dev-server/"/>
    
  </entry>
  
  <entry>
    <title>单向绑定</title>
    <link href="http://yoursite.com/2019/06/18/%E5%8D%95%E5%90%91%E7%BB%91%E5%AE%9A/"/>
    <id>http://yoursite.com/2019/06/18/单向绑定/</id>
    <published>2019-06-18T00:14:33.273Z</published>
    <updated>2019-06-18T00:16:32.226Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 简单理解</p><p>单向绑定非常简单，就是把Model绑定到View，当我们用JavaScript代码更新Model时，View就会自动更新。</p><blockquote><p>MVVM就是在前端页面上，应用了扩展的MVC模式，我们关心Model的变化，MVVM框架自动把Model的变化映射到DOM结构上，这样，用户看到的页面内容就会随着Model的变化而更新。</p></blockquote><p>例如，我们定义好一个JavaScript对象作为Model，并且把这个Model的两个属性绑定到DOM节点上：<br><img src="https://img-blog.csdnimg.cn/20190617142336722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>经过MVVM框架的自动转换，浏览器就可以直接显示Model的数据了：<br><img src="https://img-blog.csdnimg.cn/20190617142355371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="下面我们在vue中看看"><a href="#下面我们在vue中看看" class="headerlink" title="下面我们在vue中看看"></a>下面我们在vue中看看</h2><p>首先，我们就可以在HTML页面中编写JavaScript代码。我们的Model是一个JavaScript对象，它包含两个属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name: <span class="string">'Robot'</span>,</span><br><span class="line">    age: <span class="number">15</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而负责显示的是DOM节点可以用和来引用Model的属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"vm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, &#123;&#123; name &#125;&#125;!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>You are &#123;&#123; age &#125;&#125; years old!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后一步是用Vue把两者关联起来。要特别注意的是，在<head><meta name="generator" content="Hexo 3.8.0">内部编写的JavaScript代码，需要用jQuery把MVVM的初始化代码推迟到页面加载完毕后执行，否则，直接在<head><meta name="generator" content="Hexo 3.8.0">内执行MVVM代码时，DOM节点尚未被浏览器加载，初始化将失败。正确的写法如下：</head></head></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引用jQuery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引用Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 初始化代码:</span></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#vm'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            name: <span class="string">'Robot'</span>,</span></span><br><span class="line"><span class="undefined">            age: 15</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.vm = vm;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"vm"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, &#123;&#123; name &#125;&#125;!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>You are &#123;&#123; age &#125;&#125; years old!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，el指定了要把Model绑定到哪个DOM根节点上，语法和jQuery类似。这里的’#vm’对应ID为vm的一个\<div>节点</div></p><p>在该节点以及该节点内部，就是Vue可以操作的View。Vue可以自动把Model的状态映射到View上，但是不能操作View范围之外的其他DOM节点。</p><p>然后，data属性指定了Model，我们初始化了Model的两个属性<code>name</code>和<code>age</code>，在View内部的\</p><p>节点上，可以直接用<code></code>引用Model的某个属性。</p><p>一切正常的话，我们在浏览器中访问<code>http://localhost:3000/static/index.html</code>，可以看到页面输出为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello, Robot!</span><br><span class="line">You are 15 years old!</span><br></pre></td></tr></table></figure><p>如果打开浏览器console，因为我们用代码window.vm = vm，把VM变量绑定到了window对象上，所以，可以直接修改VM的Model：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.vm.name = <span class="string">'Bob'</span></span><br></pre></td></tr></table></figure><p>执行上述代码，可以观察到页面立刻发生了变化，原来的<code>Hello, Robot!</code>自动变成了<code>Hello, Bob!</code>。Vue作为MVVM框架会自动监听Model的任何变化，在Model数据变化时，更新View的显示。<strong>这种Model到View的绑定我们称为单向绑定。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 简单理解&lt;/p&gt;
&lt;p&gt;单向绑定非常简单，就是把Model绑定到View，当我们用JavaScript代码更新Model时，View就会自动更新。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MVVM就是在前端页面上，应用了扩展的MVC模式，我们关心Model的变化，M
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="单向绑定" scheme="http://yoursite.com/tags/%E5%8D%95%E5%90%91%E7%BB%91%E5%AE%9A/"/>
    
  </entry>
  
  <entry>
    <title>clientX,screenX,pageX,offsetX的区别</title>
    <link href="http://yoursite.com/2019/06/17/clientX,screenX,pageX,offsetX%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/06/17/clientX,screenX,pageX,offsetX的区别/</id>
    <published>2019-06-17T04:57:11.330Z</published>
    <updated>2019-06-17T05:00:16.763Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 前言</p><p>关于clientX,screenX,pageX,offsetX的区别之前也比较迷糊，然后自己写了几个demo算是弄明白了，在这记录一下。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>一、clientX、clientY</strong><br>点击位置距离当前body可视区域的x，y坐标。<br>可以理解为距离浏览器窗口的距离，但注意这里不包括浏览器的导航栏距离只是浏览器内容区域。</p><p><strong>二、pageX、pageY</strong><br>对于整个页面来说，包括了被卷去的body部分的长度<br>相对于文档边缘,包含滚动条距离</p><p><strong>三、screenX、screenY</strong><br>点击位置距离当前电脑屏幕的x，y坐标</p><p><strong>四、offsetX、offsetY</strong><br>相对于带有定位的父盒子的x，y坐标</p><h2 id="贴图"><a href="#贴图" class="headerlink" title="贴图"></a>贴图</h2><p>下面这张图很清楚的标明了<br><img src="https://img-blog.csdnimg.cn/20190617115103431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>下面来看一个小demo加深理解</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        *&#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        .big&#123;</span></span><br><span class="line"><span class="undefined">            width: 300px;</span></span><br><span class="line"><span class="undefined">            height: 1000px;</span></span><br><span class="line"><span class="undefined">            background-color: greenyellow;</span></span><br><span class="line"><span class="undefined">            margin: 0 auto;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        #div&#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            background-color: skyblue;</span></span><br><span class="line"><span class="undefined">            margin: 150px auto;</span></span><br><span class="line"><span class="undefined">            position: relative;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        var div = document.getElementById("div")</span></span><br><span class="line"><span class="undefined">        div.onclick = function (e) &#123; </span></span><br><span class="line"><span class="undefined">            console.log('clientY',e.clientY)</span></span><br><span class="line"><span class="undefined">            console.log('screenY',e.screenY)</span></span><br><span class="line"><span class="undefined">            console.log('pageY',e.pageY)</span></span><br><span class="line"><span class="undefined">            console.log('offsetY',e.offsetY)</span></span><br><span class="line"><span class="undefined">            console.log('下一个')</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p>未滚动时：<br><img src="https://img-blog.csdnimg.cn/20190617115614654.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>滚动时：<br><img src="https://img-blog.csdnimg.cn/20190617120143940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 前言&lt;/p&gt;
&lt;p&gt;关于clientX,screenX,pageX,offsetX的区别之前也比较迷糊，然后自己写了几个demo算是弄明白了，在这记录一下。&lt;/p&gt;
&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="H5/C3" scheme="http://yoursite.com/categories/H5-C3/"/>
    
    
      <category term="clientX" scheme="http://yoursite.com/tags/clientX/"/>
    
  </entry>
  
  <entry>
    <title>图片验证码的实现方法</title>
    <link href="http://yoursite.com/2019/06/17/%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/06/17/图片验证码的实现方法/</id>
    <published>2019-06-17T04:57:11.330Z</published>
    <updated>2019-06-17T04:59:46.127Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 前言</p><p>图片验证码是我们日常经常用到的，本文将介绍如何实现以及其原理，并没有过多注重css样式（有些简陋）。如果对滑块验证码感兴趣的可以看这篇文章：<a href="https://blog.csdn.net/qq_42068550/article/details/92604316" target="_blank" rel="noopener">滑块验证码实现及原理</a><br><img src="https://img-blog.csdnimg.cn/20190617124138737.png" alt="在这里插入图片描述"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>主要是利用canvas画布加上随机字母，以及适当的旋转，移动，颜色。这一块主要利用的是css3的内容。</p><p>对于代码看不懂的可以看注释，注释标注的很详细。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图片验证码<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"120"</span> <span class="attr">height</span>=<span class="string">"40"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"提交"</span> <span class="attr">id</span>=<span class="string">"bt"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        var canvas = document.getElementById("canvas");//演员</span></span><br><span class="line"><span class="undefined">        var context = canvas.getContext("2d");//舞台，getContext() 方法可返回一个对象，该对象提供了用于在画布上绘图的方法和属性。</span></span><br><span class="line"><span class="undefined">        var button = document.getElementById("bt");//获取按钮</span></span><br><span class="line"><span class="undefined">        var input = document.getElementById("text");//获取输入框</span></span><br><span class="line"><span class="undefined">        draw();</span></span><br><span class="line"><span class="undefined">        canvas.onclick = function () &#123;</span></span><br><span class="line"><span class="undefined">            context.clearRect(0, 0, 120, 40);//在给定的矩形内清除指定的像素</span></span><br><span class="line"><span class="undefined">            draw();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        // 随机颜色函数</span></span><br><span class="line"><span class="undefined">        function getColor() &#123;</span></span><br><span class="line"><span class="undefined">            var r = Math.floor(Math.random() * 256);</span></span><br><span class="line"><span class="undefined">            var g = Math.floor(Math.random() * 256);</span></span><br><span class="line"><span class="undefined">            var b = Math.floor(Math.random() * 256);</span></span><br><span class="line"><span class="undefined">            return "rgb(" + r + "," + g + "," + b + ")";</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        function draw() &#123;</span></span><br><span class="line"><span class="undefined">            context.strokeRect(0, 0, 120, 40);//绘制矩形（无填充）</span></span><br><span class="line"><span class="undefined">            var aCode = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];</span></span><br><span class="line"><span class="undefined">            // 绘制字母</span></span><br><span class="line"><span class="undefined">            var arr = [] //定义一个数组用来接收产生的随机数</span></span><br><span class="line"><span class="undefined">            var num //定义容器接收验证码</span></span><br><span class="line"><span class="undefined">            for (var i = 0; i &lt; 4; i++) &#123;</span></span><br><span class="line"><span class="undefined">                var x = 20 + i * 20;//每个字母之间间隔20</span></span><br><span class="line"><span class="undefined">                var y = 20 + 10 * Math.random();//y轴方向位置为20-30随机</span></span><br><span class="line"><span class="undefined">                var index = Math.floor(Math.random() * aCode.length);//随机索引值</span></span><br><span class="line"><span class="undefined">                var txt = aCode[index];</span></span><br><span class="line"><span class="undefined">                context.font = "bold 20px 微软雅黑";//设置或返回文本内容的当前字体属性</span></span><br><span class="line"><span class="undefined">                context.fillStyle=getColor();//设置或返回用于填充绘画的颜色、渐变或模式，随机</span></span><br><span class="line"><span class="undefined">                context.translate(x,y);//重新映射画布上的 (0,0) 位置，字母不可以旋转移动，所以移动容器</span></span><br><span class="line"><span class="undefined">                var deg=90*Math.random()*Math.PI/180;//0-90度随机旋转</span></span><br><span class="line"><span class="undefined">                context.rotate(deg);// 旋转当前绘图</span></span><br><span class="line"><span class="undefined">                context.fillText(txt, 0, 0);//在画布上绘制“被填充的”文本</span></span><br><span class="line"><span class="undefined">                context.rotate(-deg);//将画布旋转回初始状态</span></span><br><span class="line"><span class="undefined">                context.translate(-x,-y);//将画布移动回初始状态</span></span><br><span class="line"><span class="undefined">                arr[i] = txt //接收产生的随机数</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            num = arr[0] + arr[1] + arr[2] + arr[3] //将产生的验证码放入num</span></span><br><span class="line"><span class="undefined">            // 绘制干扰线条</span></span><br><span class="line"><span class="undefined">            for (var i = 0; i &lt; 8; i++) &#123;</span></span><br><span class="line"><span class="undefined">                context.beginPath();//起始一条路径，或重置当前路径</span></span><br><span class="line"><span class="undefined">                context.moveTo(Math.random() * 120, Math.random() * 40);//把路径移动到画布中的随机点，不创建线条</span></span><br><span class="line"><span class="undefined">                context.lineTo(Math.random() * 120, Math.random() * 40);//添加一个新点，然后在画布中创建从该点到最后指定点的线条</span></span><br><span class="line"><span class="undefined">                context.strokeStyle=getColor();//随机线条颜色</span></span><br><span class="line"><span class="undefined">                context.stroke();// 绘制已定义的路径</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            // 绘制干扰点，和上述步骤一样，此处用长度为1的线代替点</span></span><br><span class="line"><span class="undefined">            for (var i = 0; i &lt; 20; i++) &#123;</span></span><br><span class="line"><span class="undefined">                context.beginPath();</span></span><br><span class="line"><span class="undefined">                var x = Math.random() * 120;</span></span><br><span class="line"><span class="undefined">                var y = Math.random() * 40;</span></span><br><span class="line"><span class="undefined">                context.moveTo(x, y);</span></span><br><span class="line"><span class="undefined">                context.lineTo(x + 1, y + 1);</span></span><br><span class="line"><span class="undefined">                context.strokeStyle=getColor();</span></span><br><span class="line"><span class="undefined">                context.stroke();</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            //点击按钮验证</span></span><br><span class="line"><span class="undefined">            button.onclick = function () &#123; </span></span><br><span class="line"><span class="undefined">            var text = input.value //获取输入框的值</span></span><br><span class="line"><span class="undefined">            if (text === num) &#123;</span></span><br><span class="line"><span class="undefined">                alert('验证通过')</span></span><br><span class="line"><span class="undefined">            &#125; else &#123;</span></span><br><span class="line"><span class="undefined">                alert('验证失败')</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://img-blog.csdnimg.cn/20190617124505848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 前言&lt;/p&gt;
&lt;p&gt;图片验证码是我们日常经常用到的，本文将介绍如何实现以及其原理，并没有过多注重css样式（有些简陋）。如果对滑块验证码感兴趣的可以看这篇文章：&lt;a href=&quot;https://blog.csdn.net/qq_42068550/article/de
      
    
    </summary>
    
      <category term="H5/C3" scheme="http://yoursite.com/categories/H5-C3/"/>
    
    
      <category term="图片验证码" scheme="http://yoursite.com/tags/%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>滑块验证码实现及原理</title>
    <link href="http://yoursite.com/2019/06/17/%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8F%8A%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2019/06/17/滑块验证码实现及原理/</id>
    <published>2019-06-17T04:57:11.298Z</published>
    <updated>2019-06-17T04:59:24.350Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 前言</p><p>滑块验证码也是生活中常见的，本文会介绍如何实现以及原理。如果对<a href="https://blog.csdn.net/qq_42068550/article/details/92602534" target="_blank" rel="noopener">图片验证码</a>感兴趣的话可以查看这篇文章：<a href="https://blog.csdn.net/qq_42068550/article/details/92602534" target="_blank" rel="noopener">图片验证码的实现方法</a><br><img src="https://img-blog.csdnimg.cn/20190617124741647.png" alt="在这里插入图片描述"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>滑块验证码主要用到几个属性:clientX,screenX,pageX,offsetX,如果对此有疑惑可以查看这篇文章：<a href="https://blog.csdn.net/qq_42068550/article/details/92594961" target="_blank" rel="noopener">clientX,screenX,pageX,offsetX的区别</a></p><p>代码的解释在注释中已经写的很清楚了，还不了解的欢迎留言。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>滑块验证码<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0px;</span></span><br><span class="line"><span class="undefined">            padding: 0px;</span></span><br><span class="line"><span class="undefined">            font-family: "微软雅黑";</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .drag &#123;</span></span><br><span class="line"><span class="undefined">            width: 300px;</span></span><br><span class="line"><span class="undefined">            height: 40px;</span></span><br><span class="line"><span class="undefined">            line-height: 40px;</span></span><br><span class="line"><span class="undefined">            background-color: #e8e8e8;</span></span><br><span class="line"><span class="undefined">            position: relative;</span></span><br><span class="line"><span class="undefined">            margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .bg &#123;</span></span><br><span class="line"><span class="undefined">            width: 40px;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            background-color: #75CDF9;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .text &#123;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            width: 100%;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            text-align: center;</span></span><br><span class="line"><span class="undefined">            user-select: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .btn &#123;</span></span><br><span class="line"><span class="undefined">            width: 40px;</span></span><br><span class="line"><span class="undefined">            height: 38px;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            border: 1px solid #ccc;</span></span><br><span class="line"><span class="undefined">            cursor: move;</span></span><br><span class="line"><span class="undefined">            font-family: "宋体";</span></span><br><span class="line"><span class="undefined">            text-align: center;</span></span><br><span class="line"><span class="undefined">            background-color: #fff;</span></span><br><span class="line"><span class="undefined">            user-select: none;</span></span><br><span class="line"><span class="undefined">            color: #666;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"drag"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text"</span> <span class="attr">onselectstart</span>=<span class="string">"return false"</span>&gt;</span>请拖动滑块解锁<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>&amp;gt;&amp;gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        //一、定义一个获取DOM元素的方法</span></span><br><span class="line"><span class="undefined">        var $ = function (selector) &#123;</span></span><br><span class="line"><span class="undefined">            return document.querySelector(selector);</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">            box = $(".drag"),//容器</span></span><br><span class="line"><span class="undefined">            bg = $(".bg"),//背景</span></span><br><span class="line"><span class="undefined">            text = $(".text"),//文字</span></span><br><span class="line"><span class="undefined">            btn = $(".btn"),//滑块</span></span><br><span class="line"><span class="undefined">            success = false,//是否通过验证的标志</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            distance = box.offsetWidth - btn.offsetWidth;//滑动成功的宽度（距离）</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        //二、给滑块注册鼠标按下事件</span></span><br><span class="line"><span class="undefined">        btn.onmousedown = function (e) &#123;</span></span><br><span class="line"><span class="undefined">            //1.鼠标按下之前必须清除掉后面设置的过渡属性</span></span><br><span class="line"><span class="undefined">            btn.style.transition = "";</span></span><br><span class="line"><span class="undefined">            bg.style.transition = "";</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            //说明：clientX 事件属性会返回当事件被触发时，鼠标指针向对于浏览器页面(或客户区)的水平坐标。</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            //2.当滑块位于初始位置时，得到鼠标按下时的水平位置</span></span><br><span class="line"><span class="undefined">            var e = e || window.event;</span></span><br><span class="line"><span class="undefined">            var downX = e.clientX;</span></span><br><span class="line"><span class="undefined">            //三、给文档注册鼠标移动事件</span></span><br><span class="line"><span class="undefined">            document.onmousemove = function (e) &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                var e = e || window.event;//是为了更好的兼容IE浏览器和非ie浏览器。在ie浏览器中,window.event是全局变量,在非ie中，就需要自己传入一个参数来获取event啦，所以就有了var e = e||window.event</span></span><br><span class="line"><span class="undefined">                //1.获取鼠标移动后的水平位置</span></span><br><span class="line"><span class="undefined">                var moveX = e.clientX;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                //2.得到鼠标水平位置的偏移量（鼠标移动时的位置 - 鼠标按下时的位置）</span></span><br><span class="line"><span class="undefined">                var offsetX = moveX - downX;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                //3.在这里判断一下：鼠标水平移动的距离 与 滑动成功的距离 之间的关系</span></span><br><span class="line"><span class="undefined">                if (offsetX &gt; distance) &#123;</span></span><br><span class="line"><span class="undefined">                    offsetX = distance;//如果滑过了终点，就将它停留在终点位置</span></span><br><span class="line"><span class="undefined">                &#125; else if (offsetX &lt; 0) &#123;</span></span><br><span class="line"><span class="undefined">                    offsetX = 0;//如果滑到了起点的左侧，就将它重置为起点位置</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                //4.根据鼠标移动的距离来动态设置滑块的偏移量和背景颜色的宽度</span></span><br><span class="line"><span class="undefined">                btn.style.left = offsetX + "px";</span></span><br><span class="line"><span class="undefined">                bg.style.width = offsetX + "px";</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                //如果鼠标的水平移动距离 = 滑动成功的宽度</span></span><br><span class="line"><span class="undefined">                if (offsetX == distance) &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                    //1.设置滑动成功后的样式</span></span><br><span class="line"><span class="undefined">                    text.innerHTML = "验证通过";</span></span><br><span class="line"><span class="undefined">                    text.style.color = "#fff";</span></span><br><span class="line"><span class="undefined">                    btn.innerHTML = "&amp;radic;";</span></span><br><span class="line"><span class="undefined">                    btn.style.color = "green";</span></span><br><span class="line"><span class="undefined">                    bg.style.backgroundColor = "lightgreen";</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                    //2.设置滑动成功后的状态</span></span><br><span class="line"><span class="undefined">                    success = true;</span></span><br><span class="line"><span class="undefined">                    //成功后，清除掉鼠标按下事件和移动事件（因为移动时并不会涉及到鼠标松开事件）</span></span><br><span class="line"><span class="undefined">                    btn.onmousedown = null;</span></span><br><span class="line"><span class="undefined">                    document.onmousemove = null;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                    //3.成功解锁后的回调函数</span></span><br><span class="line"><span class="undefined">                    setTimeout(function () &#123;</span></span><br><span class="line"><span class="undefined">                        alert('解锁成功！');</span></span><br><span class="line"><span class="undefined">                    &#125;, 100);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            //四、给文档注册鼠标松开事件</span></span><br><span class="line"><span class="undefined">            document.onmouseup = function (e) &#123;</span></span><br><span class="line"><span class="undefined">                //如果鼠标松开时，滑到了终点，则验证通过</span></span><br><span class="line"><span class="undefined">                if (success) &#123;</span></span><br><span class="line"><span class="undefined">                    return;</span></span><br><span class="line"><span class="undefined">                &#125; else &#123;</span></span><br><span class="line"><span class="undefined">                    //反之，则将滑块复位（设置了1s的属性过渡效果）</span></span><br><span class="line"><span class="undefined">                    btn.style.left = 0;</span></span><br><span class="line"><span class="undefined">                    bg.style.width = 0;</span></span><br><span class="line"><span class="undefined">                    btn.style.transition = "left 1s ease";</span></span><br><span class="line"><span class="undefined">                    bg.style.transition = "width 1s ease";</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">                //只要鼠标松开了，说明此时不需要拖动滑块了，那么就清除鼠标移动和松开事件。</span></span><br><span class="line"><span class="undefined">                document.onmousemove = null;</span></span><br><span class="line"><span class="undefined">                document.onmouseup = null;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://img-blog.csdnimg.cn/20190617125329400.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 前言&lt;/p&gt;
&lt;p&gt;滑块验证码也是生活中常见的，本文会介绍如何实现以及原理。如果对&lt;a href=&quot;https://blog.csdn.net/qq_42068550/article/details/92602534&quot; target=&quot;_blank&quot; rel=&quot;no
      
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="滑块验证码" scheme="http://yoursite.com/tags/%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>vue-router的详细介绍使用</title>
    <link href="http://yoursite.com/2019/06/16/vue-router%E7%9A%84%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/06/16/vue-router的详细介绍使用/</id>
    <published>2019-06-16T11:17:40.801Z</published>
    <updated>2019-06-16T11:18:39.676Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 什么是路由？</p><p>路由，其实就是指向的意思。例如:当我点击页面上的home按钮时，页面中就要显示home的内容，如果点击页面上的about 按钮，页面中就要显示about 的内容。Home按钮  =&gt; home 内容， about按钮 =&gt; about 内容，也可以说是一种映射. 所以在页面上有两个部分，一个是点击部分，一个是点击之后，显示内容的部分。点击之后，怎么做到正确的对应，比如，我点击home 按钮，页面中怎么就正好能显示home的内容。这就要在js 文件中配置路由。 </p><hr><h2 id="路由的基本概念"><a href="#路由的基本概念" class="headerlink" title="路由的基本概念"></a>路由的基本概念</h2><p>路由中有三个基本的概念： <strong>route, routes, router</strong>。</p><ol><li><p><strong>route</strong>，它是一条路由，由这个英文单词也可以看出来，它是单数， Home按钮  =&gt; home内容， 这是一条route,  about按钮 =&gt; about 内容， 这是另一条路由。</p><ol start="2"><li><strong>routes</strong> 是一组路由，把上面的每一条路由组合起来，形成一个数组。[{home 按钮 =&gt;home内容 }， { about按钮 =&gt; about 内容}]</li></ol></li><li><p><strong>router</strong> 是一个机制，相当于一个管理者，它来管理路由。因为routes 只是定义了一组路由，它放在哪里是静止的，当真正来了请求，怎么办？ 就是当用户点击home 按钮的时候，怎么办？这时router 就起作用了，它到routes 中去查找，去找到对应的 home 内容，所以页面中就显示了 home 内容。</p></li></ol><blockquote><p>客户端中的路由，实际上就是dom 元素的显示和隐藏。当页面中显示home 内容的时候，about 中的内容全部隐藏，反之也是一样。客户端路由有两种实现方式：基于hash 和基于html5 history api.</p></blockquote><hr><h2 id="路由的实现"><a href="#路由的实现" class="headerlink" title="路由的实现"></a>路由的实现</h2><p>在vue中实现路由还是相对简单的。因为我们页面中所有内容都是组件化的，我们只要把路径和组件对应起来就可以了，然后在页面中把组件渲染出来。</p><h4 id="页面实现"><a href="#页面实现" class="headerlink" title="页面实现"></a>页面实现</h4><ul><li><p>html模板中</p><p>  在vue-router中, 我们定义两个标签\<router-link> 和\<router-view>来对应点击和显示部分。\<router-link> 就是定义页面中点击的部分，\<router-view> 定义显示部分，就是点击后，区配的内容显示在什么地方。所以 \<router-link> 还有一个非常重要的属性 to，定义点击之后，要到哪里去， 如：\<router-link to="/home">Home\</router-link></router-link></router-view></router-link></router-view></router-link></p></li><li><p>js 中配置路由</p><p>  首先要定义route,  一条路由的实现。它是一个对象，由两个部分组成： path和component.  path 指路径，component 指的是组件。如：{path:’/home’, component: home}</p></li></ul><p>我们这里有两条路由，组成一个routes:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/home'</span>, <span class="attr">component</span>: Home &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/about'</span>, <span class="attr">component</span>: About &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>创建router 对路由进行管理，它是由构造函数 new vueRouter() 创建，接受routes 参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">      routes <span class="comment">// routes: routes 的简写</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>配置完成后，把router 实例注入到 vue 根实例中,就可以使用路由了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p><strong>执行过程</strong>：当用户点击 router-link 标签时，会去寻找它的 to 属性， 它的 to 属性和 js 中配置的路径{ path: ‘/home’, component: Home}  path 一一对应，从而找到了匹配的组件， 最后把组件渲染到 <router-view> 标签所在的地方。所有的这些实现才是基于hash 实现的。</router-view></p><hr><h3 id="vue-cli-下实现"><a href="#vue-cli-下实现" class="headerlink" title="vue-cli 下实现"></a>vue-cli 下实现</h3><ol><li>在src 目录下新建两个组件，home.vue 和 about.vue</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">        data () &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                msg: <span class="string">"我是home 组件"</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>about<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;aboutMsg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">        data () &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                aboutMsg: <span class="string">'我是about组件'</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在 App.vue中 定义\<router-link> 和 \  </router-link></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./assets/logo.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- router-link 定义点击后导航到哪个路径下 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/about"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对应的组件内容渲染到router-view中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span>   </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在 src目录下的index.js定义router, 就是定义 路径到 组件的 映射。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">"./home.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> about <span class="keyword">from</span> <span class="string">"./about.vue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要告诉 vue 使用 vueRouter</span></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path:<span class="string">"/home"</span>,</span><br><span class="line">        component: home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">"/about"</span>,</span><br><span class="line">        component: about</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> router =  <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><ol start="4"><li>把路由注入到根实例中，启动路由。这里其实还有一种方法，就像vuex  store 注入到根实例中一样，我们也可以把vueRouter 直接注入到根实例中。在main.js中引入路由，注入到根实例中。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入路由</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">"./router.js"</span>    <span class="comment">// import router 的router 一定要小写， 不要写成Router, 否则报 can't match的报错</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,  <span class="comment">// 注入到根实例中</span></span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="5"><li>最后，我们看一下路由是怎么实现的<blockquote><p>打开浏览器控制台，首先看到 router-link 标签渲染成了 a 标签，to 属性变成了a 标签的 href 属性，这时就明白了点击跳转的意思。router-view 标签渲染成了我们定义的组件，其实它就是一个占位符，它在什么地方，匹配路径的组件就在什么地方，所以 router-link 和router-view 标签一一对应，成对出现。</p></blockquote></li></ol><p><img src="https://img-blog.csdnimg.cn/20190616190111261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><hr></p><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>上面我们定义的路由，都是严格匹配的，只有router-link 中的to属性和 js 中一条路由route中 path 一模一样，才能显示相应的组件component. 但有时现实却不是这样的，当我们去访问网站并登录成功后，它会显示 欢迎你，+ 你的名字。不同的用户登录， 只是显示“你的名字” 部分不同，其它部分是一样的。这就表示，它是一个组件，假设是user组件。不同的用户（就是用户的id不同），它都会导航到同一个user  组件中。这样我们在配置路由的时候，就不能写死, 就是路由中的path属性，不能写死，那要怎么设置? 导航到 user 组件，路径中肯定有user, id 不同，那就给路径一个动态部分来匹配不同的id.  在vue-router中，动态部分 以 : 开头，那么路径就变成了 /user/:id, 这条路由就可以这么写：  { path:”/user/:id”, component: user }.</p><h3 id="实现动态路由"><a href="#实现动态路由" class="headerlink" title="实现动态路由"></a>实现动态路由</h3><p>我们定义一个user组件，页面中再添加两个router-link 用于导航， 最后router.js中添加路由配置，来体验一下</p><ol><li>app.vue 中添加两个router-link：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./assets/logo.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/about"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--  增加两个到user组件的导航，可以看到这里使用了不同的to属性 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/user/123"</span>&gt;</span>User123<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/user/456"</span>&gt;</span>User456<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span>   </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>index.js 配置user动态路由：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path:<span class="string">"/home"</span>,</span><br><span class="line">        component: home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">"/about"</span>,</span><br><span class="line">        component: about</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/*新增user路径，配置了动态的id*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">"/user/:id"</span>,</span><br><span class="line">        component: user</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/'</span>, </span><br><span class="line">        redirect: <span class="string">'/home'</span> </span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="3"><li>user组件</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>User<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是user组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这时在页面中点击user123 和user456, 可以看到它们都导航到user组件，配置正确。 </p><p>在动态路由中，怎么获取到动态部分？ 因为在组件中是可以显示不同部分的，就是上面提到的“你的名字”。其实，当整个vue-router 注入到根实例后，在组件的内部，可以通过this.$route 来获取到 router 实例。它有一个params 属性，就是来获得这个动态部分的。它是一个对象，属性名，就是路径中定义的动态部分 id, 属性值就是router-link中to 属性中的动态部分，如123。使用vuex时，组件中想要获取到state 中的状态，是用computed 属性，在这里也是一样，在组件中，定义一个computed 属性dynamicSegment， user 组件修改如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>User<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是user组件, 动态部分是&#123;&#123;dynamicSegment&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">        computed: &#123;</span></span><br><span class="line"><span class="undefined">            dynamicSegment () &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="keyword">this</span>.$route.params.id</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>嵌套路由，主要是由我们的页面结构所决定的。当我们进入到home页面的时候，它下面还有分类，如手机系列，平板系列，电脑系列。当我们点击各个分类的时候，它还是需要路由到各个部分，如点击手机，它肯定到对应到手机的部分。</p><blockquote><p>在路由的设计上，首先进入到 home ,然后才能进入到phone, tablet, computer.  Phone, tablet, compute 就相当于进入到了home的子元素。所以vue  提供了childrens 属性，它也是一组路由,相当于我们所写的routes。</p></blockquote><p>首先，在home页面上定义三个router-link 标签用于导航，然后再定义一个router-view标签，用于渲染对应的组件。router-link 和router-view 标签要一一对应。home.vue 组件修改如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- router-link 的to属性要注意，路由是先进入到home,然后才进入相应的子路由如 phone,所以书写时要把 home 带上 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home/phone"</span>&gt;</span>手机<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home/tablet"</span>&gt;</span>平板<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home/computer"</span>&gt;</span>电脑<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>index.js 配置路由，修改如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path:<span class="string">"/home"</span>,</span><br><span class="line">　　　　　<span class="comment">// 下面这个属性也不少，因为，我们是先进入home页面，才能进入子路由</span></span><br><span class="line">        component: home,</span><br><span class="line">　　　　 <span class="comment">// 子路由</span></span><br><span class="line">        children: [</span><br><span class="line">            &#123;</span><br><span class="line">                path: <span class="string">"phone"</span>,</span><br><span class="line">                component: phone</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                path: <span class="string">"tablet"</span>,</span><br><span class="line">                component: tablet</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                path: <span class="string">"computer"</span>,</span><br><span class="line">                component: computer</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">"/about"</span>,</span><br><span class="line">        component: about</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">"/user/:id"</span>,</span><br><span class="line">        component: user</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/'</span>, </span><br><span class="line">        redirect: <span class="string">'/home'</span> </span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这时当我们点击home 时，它下面出现手机等字样，但没有任何对应的组件进行显示，这通常不是我们想要的。要想点击home时，要想渲染相对应的子组件，那还需要配置一条路由。当进入到home 时，它在children中对应的路由path 是空 ‘’，完整的childrens 如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">children: [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">"phone"</span>,</span><br><span class="line">        component: phone</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">"tablet"</span>,</span><br><span class="line">        component: tablet</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">"computer"</span>,</span><br><span class="line">        component: computer</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 当进入到home时，下面的组件显示</span></span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">""</span>,</span><br><span class="line">        component: phone</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 什么是路由？&lt;/p&gt;
&lt;p&gt;路由，其实就是指向的意思。例如:当我点击页面上的home按钮时，页面中就要显示home的内容，如果点击页面上的about 按钮，页面中就要显示about 的内容。Home按钮  =&amp;gt; home 内容， about按钮 =&amp;gt; a
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="route" scheme="http://yoursite.com/tags/route/"/>
    
  </entry>
  
  <entry>
    <title>编程思想：面向对象和面向过程</title>
    <link href="http://yoursite.com/2019/06/16/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/06/16/编程思想：面向对象和面向过程/</id>
    <published>2019-06-16T04:35:46.055Z</published>
    <updated>2019-06-16T04:36:45.198Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 前言</p><p>　什么是面向对象？面向过程又是什么？对于这编程界的两大思想，一直贯穿在我们学习和工作当中。也许我们心里对这两个概念有个模糊的理解，却又说不出个所以然。</p><h2 id="一、面向过程"><a href="#一、面向过程" class="headerlink" title="一、面向过程"></a>一、面向过程</h2><p>　首先我们来认识下，什么是面向过程？如果咬文嚼字的话可以这样来理解，面向过程就是面向解决问题的过程进行编程。仔细思考一下，我们在学习和工作中，当我们去实现某项功能或完成某项任务时，是不是会不自觉的按部就班的罗列出我们要做的事情？而当我们按着我们罗列的步骤去解决问题时，实质上就是按照面向过程的思想去解决问题。我们罗列的步骤就是过程，按照步骤解决问题就是面向过程。</p><p>传统的面向过程的编程思想总结起来就八个字——<strong>自顶向下，逐步细化</strong>！</p><p>实现步骤如下：</p><p>将要实现的功能描述为一个从开始到结束按部就班的连续的步骤（过程）；</p><p>依次逐步完成这些步骤，如果某一步的难度较大，又可以将该步骤再次细化为若干个子步骤，以此类推，一直到结束得到想要的结果；</p><p>程序的主体是函数，一个函数就是一个封装起来的模块，可以实现一定的功能，各个子步骤往往就是通过各个函数来完成的，从而实现代码的重用和模块化编程！</p><p>面向过程，就是按照我们分析好了的步骤，按部就班的依次执行就行了！所以当我们用面向过程的思想去编程或解决问题时，首先一定要把详细的实现过程弄清楚。一旦过程设计清楚，代码的实现简直轻而易举。</p><h2 id="二、面向对象"><a href="#二、面向对象" class="headerlink" title="二、面向对象"></a>二、面向对象</h2><p>　　讨论完了面向过程，我们再来认识下面向对象。所谓的面向对象，就是在编程的时候尽可能的去模拟真实的现实世界，按照现实世界中的逻辑去处理一个问题，分析问题中参与其中的有哪些实体，这些实体应该有什么属性和方法，我们如何通过调用这些实体的属性和方法去解决问题。当我们使用面向对象进行编程时，一定要建立这样一个观念：<strong>万物皆对象！</strong></p><p>现实世界中，任何一个操作或者是业务逻辑的实现都需要一个实体来完成，也就是说，实体就是动作的支配者，没有实体，就肯定没有动作发生！</p><p>有动词就一定有实现这个动作的实体！</p><p>　　所谓的模拟现实世界，就是使计算机的编程语言在解决相关业务逻辑的方式，与真实的业务逻辑的发生保持一致！需要使每一个动作的背后都一个完成这个动作的实体！</p><p>　　因为任何功能的实现都是依赖于一个具体的实体的“动作|操作|行动”，可以看作是一个又一个的实体在发挥其各自的“能力”并在内部进行协调有序的调用过程！</p><p>　　当采用面向对象的思想解决问题时，可分为下面几步：</p><ul><li>分析哪些动作是由哪些实体发出的；</li><li>定义这些实体，为其增加相应的属性和功能；</li><li>让实体去执行相应的功能或动作。</li></ul><h2 id="贴图加深理解"><a href="#贴图加深理解" class="headerlink" title="贴图加深理解"></a>贴图加深理解</h2><p><img src="https://img-blog.csdnimg.cn/20190616122304593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>这张图里就把苹果放进冰箱这件事，分别用面向过程和面向对象来实现。面向过程更像是我们日常的行为一步一步的做，站在第一人称视角；而面向对象，把冰箱和人看成两个对象，赋予特定行为和属性，类似于第三人称视角。</p></blockquote><h2 id="三、面向对象和面向过程的比较"><a href="#三、面向对象和面向过程的比较" class="headerlink" title="三、面向对象和面向过程的比较"></a>三、面向对象和面向过程的比较</h2><p>在我们将面向过程和面向对象讨论完后，会明显的感觉两者之间有着很大的区别。面向过程简单直接，易于入门理解，模块化程度较低。而面向对象相对于面向过程较为复杂，不易理解，模块化程度较高。可总结为下面三点：</p><ol><li>都可以实现代码重用和模块化编程，但是面对对象的模块化更深，数据更封闭，也更安全！因为面向对象的封装性更强！</li><li>面对对象的思维方式更加贴近于现实生活，更容易解决大型的复杂的业务逻辑</li><li>从前期开发角度上来看，面对对象远比面向过程要复杂，但是从维护和扩展功能的角度上来看，面对对象远比面向过程要简单！</li></ol><p>如何选择面向对象还是面向过程，对于一个有着丰富开发经验的老手来说，这是个得心应手的过程。而对于一个新手而言，其实从两者的对比就可以看出，当我们的业务逻辑比较简单时，使用面向过程能更快的实现。但是当我们的业务逻辑比较复杂时，为了将来的维护和扩展，还是面向对象更为靠谱点！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 前言&lt;/p&gt;
&lt;p&gt;　什么是面向对象？面向过程又是什么？对于这编程界的两大思想，一直贯穿在我们学习和工作当中。也许我们心里对这两个概念有个模糊的理解，却又说不出个所以然。&lt;/p&gt;
&lt;h2 id=&quot;一、面向过程&quot;&gt;&lt;a href=&quot;#一、面向过程&quot; class=&quot;he
      
    
    </summary>
    
      <category term="编程思想" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
    
      <category term="面向对象和面向过程" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>CSS3动画</title>
    <link href="http://yoursite.com/2019/06/16/css3%E5%8A%A8%E7%94%BB/"/>
    <id>http://yoursite.com/2019/06/16/css3动画/</id>
    <published>2019-06-16T04:35:43.904Z</published>
    <updated>2019-06-16T04:37:51.473Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 什么是 CSS3 中的动画？</p><p>动画是使元素从一种样式逐渐变化为另一种样式的效果。</p><p>您可以改变任意多的样式任意多的次数。</p><h2 id="keyframes"><a href="#keyframes" class="headerlink" title="@keyframes"></a>@keyframes</h2><ul><li>语法：@keyframes animationname {keyframes-selector {css-styles;}}</li></ul><p>通过 @keyframes 规则，您能够创建动画。</p><p>创建动画的原理是，将一套 CSS 样式逐渐变化为另一套样式。</p><p>在动画过程中，您能够多次改变这套 CSS 样式。</p><p>以百分比来规定改变发生的时间，或者通过关键词 “from” 和 “to”，等价于 0% 和 100%。</p><p>0% 是动画的开始时间，100% 动画的结束时间。</p><p>为了获得最佳的浏览器支持，您应该始终定义 0% 和 100% 选择器。</p><h2 id="CSS3-动画属性"><a href="#CSS3-动画属性" class="headerlink" title="CSS3 动画属性"></a>CSS3 动画属性</h2><p><img src="https://img-blog.csdnimg.cn/20190616104236237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>运行名为 myfirst 的动画，其中设置了所有动画属性：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        div &#123;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="undefined">            background: red;</span></span><br><span class="line"><span class="undefined">            position: relative;</span></span><br><span class="line"><span class="undefined">            animation-name: myfirst;</span></span><br><span class="line"><span class="undefined">            animation-duration: 5s;</span></span><br><span class="line"><span class="undefined">            animation-timing-function: linear;</span></span><br><span class="line"><span class="undefined">            animation-delay: 2s;</span></span><br><span class="line"><span class="undefined">            animation-iteration-count: infinite;</span></span><br><span class="line"><span class="undefined">            /* 规定动画应该无限次播放。 */</span></span><br><span class="line"><span class="undefined">            animation-direction: alternate;</span></span><br><span class="line"><span class="undefined">            /*动画应该轮流反向播放。*/</span></span><br><span class="line"><span class="undefined">            animation-play-state: running;</span></span><br><span class="line"><span class="undefined">            /*规定动画正在播放。*/</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        @keyframes myfirst &#123;</span></span><br><span class="line"><span class="undefined">            0% &#123;</span></span><br><span class="line"><span class="undefined">                background: red;</span></span><br><span class="line"><span class="undefined">                left: 0px;</span></span><br><span class="line"><span class="undefined">                top: 0px;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            25% &#123;</span></span><br><span class="line"><span class="undefined">                background: yellow;</span></span><br><span class="line"><span class="undefined">                left: 200px;</span></span><br><span class="line"><span class="undefined">                top: 0px;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            50% &#123;</span></span><br><span class="line"><span class="undefined">                background: blue;</span></span><br><span class="line"><span class="undefined">                left: 200px;</span></span><br><span class="line"><span class="undefined">                top: 200px;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            75% &#123;</span></span><br><span class="line"><span class="undefined">                background: green;</span></span><br><span class="line"><span class="undefined">                left: 0px;</span></span><br><span class="line"><span class="undefined">                top: 200px;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            100% &#123;</span></span><br><span class="line"><span class="undefined">                background: red;</span></span><br><span class="line"><span class="undefined">                left: 0px;</span></span><br><span class="line"><span class="undefined">                top: 0px;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>另外一种简洁写法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">animation</span>: myfirst <span class="number">5s</span> linear <span class="number">2s</span> infinite alternate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 什么是 CSS3 中的动画？&lt;/p&gt;
&lt;p&gt;动画是使元素从一种样式逐渐变化为另一种样式的效果。&lt;/p&gt;
&lt;p&gt;您可以改变任意多的样式任意多的次数。&lt;/p&gt;
&lt;h2 id=&quot;keyframes&quot;&gt;&lt;a href=&quot;#keyframes&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="H5/C3" scheme="http://yoursite.com/categories/H5-C3/"/>
    
    
      <category term="css3动画" scheme="http://yoursite.com/tags/css3%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>redis与mysql的区别和使用</title>
    <link href="http://yoursite.com/2019/06/13/redis%E4%B8%8Emysql%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/06/13/redis与mysql的区别和使用/</id>
    <published>2019-06-13T04:21:09.621Z</published>
    <updated>2019-06-13T04:24:08.361Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 区别</p><ul><li><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4>  <strong>redis</strong>是一个key-value存储系统,是nosql,即非关系型数据库,和memcached都是缓存数据库.<br>   <strong>mysql</strong>是关系型数据库</li><li><h4 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h4> <strong>redis</strong>用于存储使用相对频繁的数据到内存中,<br> <strong>mysql</strong>用于存放持久化数据到磁盘中</li><li><h4 id="速度"><a href="#速度" class="headerlink" title="速度"></a>速度</h4>  <strong>redis</strong>读取速度快<br>  <strong>mysql</strong>相对速度较慢</li><li><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4>  <strong>redis</strong>数据类型:字符串类型（string），散列类型（hash），列表类型（list），集合类型（set），有序集合类型（zset）<br>  <strong>mysql</strong>数据类型,大致三类:数值,日期,字符<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2>一般来说，mysql用于写入和更新，redis用于读取。 这样就说 mysql-&gt;redis的同步用的比较多。 mysql作为数据持久化和管理比redis好太多，redis大多只用来做 数据读取缓存、队列、锁、等等的使用. 因为需求的不同，要根据具体业务场景去选型,一般都是配合使用. </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;类型&quot;&gt;&lt;a href=&quot;#类型&quot; class=&quot;headerlink&quot; title=&quot;类型&quot;&gt;&lt;/a&gt;类型&lt;/h4&gt;  &lt;strong&gt;redis&lt;/strong&gt;是一个key-value存储系统,是nosql,即非
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>nodejs连接mysql</title>
    <link href="http://yoursite.com/2019/06/11/nodejs%E8%BF%9E%E6%8E%A5mysql/"/>
    <id>http://yoursite.com/2019/06/11/nodejs连接mysql/</id>
    <published>2019-06-11T01:06:52.312Z</published>
    <updated>2019-06-13T04:22:27.489Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## nodejs连接mysql</p><p>想要成为一个全栈工程师，自然需要会后端，那nodejs连接mysql就更不能不会了。</p><ul><li><p>首先安装sql依赖：<code>npm i sql</code></p></li><li><p>编写代码连接</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建链接对象</span></span><br><span class="line"><span class="keyword">const</span> con = mysql.createConnection(&#123;</span><br><span class="line">    host: <span class="string">'localhost'</span>,</span><br><span class="line">    user: <span class="string">'root'</span>,</span><br><span class="line">    password: <span class="string">'123456'</span>,</span><br><span class="line">    port: <span class="string">'3306'</span>,</span><br><span class="line">    database: <span class="string">'myblog'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始链接</span></span><br><span class="line">con.connect()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 sql 语句</span></span><br><span class="line"><span class="keyword">const</span> sql = <span class="string">'select * from users;'</span></span><br><span class="line">con.query(sql,(err,result)=&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭链接</span></span><br><span class="line">con.end()</span><br></pre></td></tr></table></figure><ul><li>运行 ：<code>node index.js</code></li></ul><p><img src="https://img-blog.csdnimg.cn/20190611085516814.png" alt="在这里插入图片描述">如果遇到报错： Client does not support authentication protocol requested by server</p><p>可看这篇文章:<a href="https://blog.csdn.net/qq_42068550/article/details/91411091" target="_blank" rel="noopener">连接MySQL报错：Client does not support authentication protocol requested by server</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## nodejs连接mysql&lt;/p&gt;
&lt;p&gt;想要成为一个全栈工程师，自然需要会后端，那nodejs连接mysql就更不能不会了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先安装sql依赖：&lt;code&gt;npm i sql&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编写代
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="nodejs连接mysql" scheme="http://yoursite.com/tags/nodejs%E8%BF%9E%E6%8E%A5mysql/"/>
    
  </entry>
  
  <entry>
    <title>连接MySQL报错：Client does not support authentication protocol requested by server</title>
    <link href="http://yoursite.com/2019/06/11/%E8%BF%9E%E6%8E%A5MySQL%E6%8A%A5%E9%94%99%EF%BC%9AClient%20does%20not%20support%20authentication%20protocol%20requested%20by%20server/"/>
    <id>http://yoursite.com/2019/06/11/连接MySQL报错：Client does not support authentication protocol requested by server/</id>
    <published>2019-06-11T01:06:52.306Z</published>
    <updated>2019-06-13T04:24:18.040Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 在使用nodejs连接MySQL报错：</p><p> Client does not support authentication protocol requested by server; consider upgrading MySQL client<br>大概意思是：客户端不支持服务器请求的身份验证协议;考虑升级MySQL客户端</p><h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h2><p>将mysql升级到5.x版本后，用客户端登录时出现了 Client does not support authentication protocol requested by server错误，是由于新旧版本的mysql的密码算法不同引起</p><h2 id="解决方法如下："><a href="#解决方法如下：" class="headerlink" title="解决方法如下："></a>解决方法如下：</h2><p>登录mysql，输入如下命令即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">identified</span> <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">'123456'</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><p>这样就能解决这个问题了。<br><img src="https://img-blog.csdnimg.cn/20190611090233277.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 在使用nodejs连接MySQL报错：&lt;/p&gt;
&lt;p&gt; Client does not support authentication protocol requested by server; consider upgrading MySQL client&lt;br&gt;大
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL报错" scheme="http://yoursite.com/tags/MySQL%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>TCP的三次握手与四次挥手 TCP</title>
    <link href="http://yoursite.com/2019/06/09/TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>http://yoursite.com/2019/06/09/TCP的三次握手与四次挥手/</id>
    <published>2019-06-09T11:37:02.709Z</published>
    <updated>2019-06-09T11:50:34.785Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## TCP的位置</p><p>TCP工作在网络OSI的七层模型中的第四层——Transport层，IP在第三层——Network层，ARP在第二层——Data Link层；</p><p>在第二层上的数据，我们把它叫Frame，在第三层上的数据叫Packet，第四层的数据叫Segment。</p><p>数据从应用层发下来，会在每一层都会加上头部信息，进行封装，然后再发送到数据接收端。这个基本的流程你需要知道，就是每个数据都会经过数据的封装和解封装的过程。 在OSI七层模型中，每一层的作用和对应的协议如下：<br><img src="https://images0.cnblogs.com/blog2015/545411/201505/231502235464253.gif" alt="https://images0.cnblogs.com/blog2015/545411/201505/231502235464253.gif"></p><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p><strong>第一次握手</strong>：主机A发送位码为syn＝1,随机产生seq number=x的数据包到服务器，客户端进入SYN_SEND状态，等待服务器的确认；主机B由SYN=1知道，A要求建立联机；</p><p><strong>第二次握手</strong>：主机B收到请求后要确认联机信息，向A发送ack number(主机A的seq+1),syn=1,ack=1,随机产生seq=y的包,此时服务器进入SYN_RECV状态;</p><p><strong>第三次握手</strong>：主机A收到后检查ack number是否正确，即第一次发送的seq number+1,以及位码ack是否为1，若正确，主机A会再发送ack number(主机B的seq+1),ack=1，主机B收到后确认seq值与ack=1则连接建立成功。客户端和服务器端都进入ESTABLISHED状</p><p>态，完成TCP三次握手。</p><p>TCP位码,有6种标示:SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急) Sequence number(顺序号码) Acknowledge number(确认号码)</p><p><img src="https://images0.cnblogs.com/blog2015/545411/201505/231506144997010.png" alt="https://images0.cnblogs.com/blog2015/545411/201505/231506144997010.png"></p><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p><strong>第一次挥手</strong>：主机1（可以使客户端，也可以是服务器端），设置Sequence Number和Acknowledgment Number，向主机2发送一个FIN报文段；此时，主机1进入FIN_WAIT_1状态；这表示主机1没有数据要发送给主机2了；</p><p><strong>第二次挥手</strong>：主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknowledgment Number为Sequence Number加1；主机1进入FIN_WAIT_2状态；主机2告诉主机1，我也没有数据要发送了，可以进行关闭连接了；</p><p><strong>第三次挥手</strong>：主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入CLOSE_WAIT状态；</p><p><strong>第四次挥</strong>手：主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入TIME_WAIT状态；主机2收到主机1的ACK报文段以后，就关闭连接；此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。</p><p><img src="https://images0.cnblogs.com/blog2015/545411/201505/231512425935841.png" alt="https://images0.cnblogs.com/blog2015/545411/201505/231512425935841.png"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><strong>1.为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？</strong></p><p>虽然按道理，四个报文都发送完毕，我们可以直接进入CLOSE状态了，但是我们必须假象网络是不可靠的，有可以最后一个ACK丢失。所以TIME_WAIT状态就是用来重发可能丢失的ACK报文。</p><p><strong>2.client发送完最后一个ack之后，进入time_wait状态，但是他怎么知道server有没有收到这个ack呢？莫非sever也要等待一段时间，如果收到了这个ack就close，如果没有收到就再发一个fin给client？这么说server最后也有一个time_wait哦？求解答！</strong></p><p>因为网络原因，主动关闭的一方发送的这个ACK包很可能延迟，从而触发被动连接一方重传FIN包。极端情况下，这一去一回，就是两倍的MSL时长。如果主动关闭的一方跳过TIME_WAIT直接进入CLOSED，或者在TIME_WAIT停留的时长不足两倍的MSL，那么当被动</p><p>关闭的一方早先发出的延迟包到达后，就可能出现类似下面的问题：1.旧的TCP连接已经不存在了，系统此时只能返回RST包2.新的TCP连接被建立起来了，延迟包可能干扰新的连接，这就是为什么time_wait需要等待2MSL时长的原因。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## TCP的位置&lt;/p&gt;
&lt;p&gt;TCP工作在网络OSI的七层模型中的第四层——Transport层，IP在第三层——Network层，ARP在第二层——Data Link层；&lt;/p&gt;
&lt;p&gt;在第二层上的数据，我们把它叫Frame，在第三层上的数据叫Packet，第四层的
      
    
    </summary>
    
      <category term="计算机基础" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>一张图理清Vue中的生命周期和钩子函数</title>
    <link href="http://yoursite.com/2019/06/04/%E4%B8%80%E5%BC%A0%E5%9B%BE%E7%90%86%E6%B8%85Vue%E4%B8%AD%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/06/04/一张图理清Vue中的生命周期和钩子函数/</id>
    <published>2019-06-04T07:04:49.203Z</published>
    <updated>2019-06-04T07:02:29.939Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 前言</p><p>Vue 框架的入口就是 Vue 实例，其实就是框架中的 view model ，它包含页面中的业务<br>处理逻辑、数据模型等，它的生命周期中有多个事件钩子，让我们在控制整个Vue实例的<br>过程时更容易形成好的逻辑。</p><h2 id="贴图"><a href="#贴图" class="headerlink" title="贴图"></a>贴图</h2><p>下面的图片是在官方文档的图片上进行了解释说明，帮大家更好的理解这张图。<br><img src="https://img-blog.csdnimg.cn/20190428121934513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>贴上一个小案例辅助理解</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/vue.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"修改"</span> @<span class="attr">click</span>=<span class="string">"msg='no'"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"h3"</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="actionscript">            msg:<span class="string">'ok'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods:&#123;</span></span><br><span class="line"><span class="undefined">            show()&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'执行了show方法'</span>);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="actionscript">        beforeCreate()&#123;<span class="comment">// 这是我们遇到的第一个生命周期函数，表示实例完全被创建出来之前，会执行它</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//            console.log(this.msg);</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//           this.show()</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 注意： 在 beforeCreate 生命周期函数执行的时候，data 和 methods 中的 数据都还没有没初始化</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        created()&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 这是遇到的第二个生命周期函数</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.msg);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.show()</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        beforeMount()&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 这是遇到的第3个生命周期函数，表示 模板已经在内存中编辑完成了，但是尚未把 模板渲染到 页面中</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">'h3'</span>).innerText);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 在 beforeMount 执行的时候，页面中的元素，还没有被真正替换过来，只是之前写的一些模板字符串</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        mounted()&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 这是遇到的第4个生命周期函数，表示，内存中的模板，已经真实的挂载到了页面中，用户已经可以看到渲染好的页面了</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">'h3'</span>).innerText);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 注意： mounted 是 实例创建期间的最后一个生命周期函数，当执行完 mounted 就表示，实例已经被完全创建好了，此时，</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 03如果没有其它操作的话，这个实例，就静静的 躺在我们的内存中，一动不动</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 接下来的是运行中的两个事件</span></span></span><br><span class="line"><span class="undefined">        beforeUpdate()&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 这时候，表示 我们的界面还没有被更新【数据被更新了吗？  数据肯定被更新了】</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'界面上元素的内容：'</span>+<span class="built_in">document</span>.getElementById(<span class="string">'h3'</span>).innerText);</span></span><br><span class="line"><span class="javascript">           <span class="built_in">console</span>.log(<span class="string">'  data中的msg数据是：'</span>+ <span class="keyword">this</span>.msg);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 得出结论： 当执行 beforeUpdate 的时候，页面中的显示的数据，还是旧的，此时 data 数据是最新的，页面尚未和 最新的数据保持同步</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        updated()&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'界面上元素的内容：'</span>+<span class="built_in">document</span>.getElementById(<span class="string">'h3'</span>).innerText);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'  data中的msg数据是：'</span>+ <span class="keyword">this</span>.msg);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 前言&lt;/p&gt;
&lt;p&gt;Vue 框架的入口就是 Vue 实例，其实就是框架中的 view model ，它包含页面中的业务&lt;br&gt;处理逻辑、数据模型等，它的生命周期中有多个事件钩子，让我们在控制整个Vue实例的&lt;br&gt;过程时更容易形成好的逻辑。&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="生命周期和钩子函数" scheme="http://yoursite.com/tags/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>新版本vue中没有dev-server.js文件，如何进行后台数据模拟？</title>
    <link href="http://yoursite.com/2019/06/04/%E6%96%B0%E7%89%88%E6%9C%ACvue%E4%B8%AD%E6%B2%A1%E6%9C%89dev-server.js%E6%96%87%E4%BB%B6%EF%BC%8C%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%90%8E%E5%8F%B0%E6%95%B0%E6%8D%AE%E6%A8%A1%E6%8B%9F%EF%BC%9F/"/>
    <id>http://yoursite.com/2019/06/04/新版本vue中没有dev-server.js文件，如何进行后台数据模拟？/</id>
    <published>2019-06-04T07:04:49.198Z</published>
    <updated>2019-06-04T07:03:33.377Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 前言</p><p>今天在写一个vue项目时，发现build中并没有dev-server.js文件，那如何进行后台数据模拟呢？</p><hr><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>最新的vue里dev-server.js被替换成了webpack-dev-conf.js</p><p>在模拟后台数据的时候直接在webpack-dev-conf.js文件中修改</p><hr><h4 id="第一步-在const-portfinder-require-‘portfinder’-后面添加"><a href="#第一步-在const-portfinder-require-‘portfinder’-后面添加" class="headerlink" title="第一步:在const portfinder = require(‘portfinder’)后面添加"></a>第一步:在const portfinder = require(‘portfinder’)后面添加</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>) <span class="keyword">const</span> app = express()<span class="comment">//请求server</span></span><br><span class="line"><span class="keyword">var</span> appData = <span class="built_in">require</span>(<span class="string">'../data.json'</span>)<span class="comment">//加载本地数据文件</span></span><br><span class="line"><span class="keyword">var</span> seller = appData.seller<span class="comment">//获取对应的本地数据</span></span><br><span class="line"><span class="keyword">var</span> goods = appData.goods <span class="keyword">var</span> ratings = appData.ratings <span class="keyword">var</span> apiRoutes = express.Router() app.use(<span class="string">'/api'</span>, apiRoutes)<span class="comment">//通过路由请求数据</span></span><br></pre></td></tr></table></figure><h3 id="第二步：找到devServer-在里面加上before（）方法"><a href="#第二步：找到devServer-在里面加上before（）方法" class="headerlink" title="第二步：找到devServer,在里面加上before（）方法"></a>第二步：找到devServer,在里面加上before（）方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    clientLogLevel: <span class="string">'warning'</span>,</span><br><span class="line">    historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    host: HOST || config.dev.host,</span><br><span class="line">    port: PORT || config.dev.port,</span><br><span class="line">    open: config.dev.autoOpenBrowser,</span><br><span class="line">    overlay: config.dev.errorOverlay</span><br><span class="line">      ? &#123; <span class="attr">warnings</span>: <span class="literal">false</span>, <span class="attr">errors</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      : <span class="literal">false</span>,</span><br><span class="line">    publicPath: config.dev.assetsPublicPath,</span><br><span class="line">    proxy: config.dev.proxyTable,</span><br><span class="line">    quiet: <span class="literal">true</span>, <span class="comment">// necessary for FriendlyErrorsPlugin</span></span><br><span class="line">    watchOptions: &#123;</span><br><span class="line">      poll: config.dev.poll,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//第二步找到devServer,在里面添加</span></span><br><span class="line">before(app) &#123;</span><br><span class="line">  app.get(<span class="string">'/api/seller'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      errno: <span class="number">0</span>,</span><br><span class="line">      data: seller</span><br><span class="line">    &#125;)<span class="comment">//接口返回json数据，上面配置的数据seller就赋值给data请求后调用</span></span><br><span class="line">  &#125;),</span><br><span class="line">  app.get(<span class="string">'/api/goods'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      errno: <span class="number">0</span>,</span><br><span class="line">      data: goods</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;),</span><br><span class="line">  app.get(<span class="string">'/api/ratings'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      errno: <span class="number">0</span>,</span><br><span class="line">      data: ratings</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意：要确保项目根目录有data-json，这里提供一个json数据"><a href="#注意：要确保项目根目录有data-json，这里提供一个json数据" class="headerlink" title="注意：要确保项目根目录有data.json，这里提供一个json数据"></a>注意：要确保项目根目录有data.json，这里提供一个json数据</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"seller"</span>: &#123; <span class="attr">"name"</span>: <span class="string">"粥品香坊（回龙观）"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"蜂鸟专送"</span>,</span><br><span class="line">    <span class="attr">"deliveryTime"</span>: <span class="number">38</span>,</span><br><span class="line">    <span class="attr">"score"</span>: <span class="number">4.2</span>,</span><br><span class="line">    <span class="attr">"serviceScore"</span>: <span class="number">4.1</span>,</span><br><span class="line">    <span class="attr">"foodScore"</span>: <span class="number">4.3</span>,</span><br><span class="line">    <span class="attr">"rankRate"</span>: <span class="number">69.2</span>,</span><br><span class="line">    <span class="attr">"minPrice"</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">"deliveryPrice"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">"ratingCount"</span>: <span class="number">24</span>,</span><br><span class="line">    <span class="attr">"sellCount"</span>: <span class="number">90</span>,</span><br><span class="line">    <span class="attr">"bulletin"</span>: <span class="string">"粥品香坊其烹饪粥料的秘方源于中国千年古法，在融和现代制作工艺，由世界烹饪大师屈浩先生领衔研发。坚守纯天然、0添加的良心品质深得消费者青睐，发展至今成为粥类的引领品牌。是2008年奥运会和2013年园博会指定餐饮服务商。"</span>,</span><br><span class="line">    <span class="attr">"supports"</span>: [ &#123; <span class="attr">"type"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"在线支付满28减5"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">"type"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"VC无限橙果汁全场8折"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">"type"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"单人精彩套餐"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">"type"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"该商家支持发票,请下单写好发票抬头"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">"type"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"已加入“外卖保”计划,食品安全保障"</span></span><br><span class="line">      &#125; ],</span><br><span class="line">    <span class="attr">"avatar"</span>: <span class="string">"http://static.galileo.xiaojukeji.com/static/tms/seller_avatar_256px.jpg"</span>,</span><br><span class="line">    <span class="attr">"pics"</span>: [ <span class="string">"http://fuss10.elemecdn.com/8/71/c5cf5715740998d5040dda6e66abfjpeg.jpeg?imageView2/1/w/180/h/180"</span>,</span><br><span class="line">      <span class="string">"http://fuss10.elemecdn.com/b/6c/75bd250e5ba69868f3b1178afbda3jpeg.jpeg?imageView2/1/w/180/h/180"</span>,</span><br><span class="line">      <span class="string">"http://fuss10.elemecdn.com/f/96/3d608c5811bc2d902fc9ab9a5baa7jpeg.jpeg?imageView2/1/w/180/h/180"</span>,</span><br><span class="line">      <span class="string">"http://fuss10.elemecdn.com/6/ad/779f8620ff49f701cd4c58f6448b6jpeg.jpeg?imageView2/1/w/180/h/180"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"infos"</span>: [ <span class="string">"该商家支持发票,请下单写好发票抬头"</span>,</span><br><span class="line">      <span class="string">"品类:其他菜系,包子粥店"</span>,</span><br><span class="line">      <span class="string">"北京市昌平区回龙观西大街龙观置业大厦底商B座102单元1340"</span>,</span><br><span class="line">      <span class="string">"营业时间:10:00-20:30"</span></span><br><span class="line">    ] &#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 前言&lt;/p&gt;
&lt;p&gt;今天在写一个vue项目时，发现build中并没有dev-server.js文件，那如何进行后台数据模拟呢？&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="dev-server" scheme="http://yoursite.com/tags/dev-server/"/>
    
  </entry>
  
  <entry>
    <title>mock数据时，http___localhost_8080_#_api_goods 无法访问到数据</title>
    <link href="http://yoursite.com/2019/06/04/mock%E6%95%B0%E6%8D%AE%E6%97%B6%EF%BC%8Chttp___localhost_8080_#_api_goods%20%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E5%88%B0%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2019/06/04/mock数据时，http___localhost_8080_#_api_goods 无法访问到数据/</id>
    <published>2019-06-04T07:04:49.194Z</published>
    <updated>2019-06-04T06:53:53.529Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 前言</p><p>在mock数据时，<a href="http://localhost:8080/#/api/goods" target="_blank" rel="noopener">http://localhost:8080/#/api/goods</a> 无法访问到数据，经过查询发现是将build目录下的webpack.dev.conf.js文件出问题了</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>将build目录下的webpack.dev.conf.js文件改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> baseWebpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.base.conf'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> FriendlyErrorsPlugin = <span class="built_in">require</span>(<span class="string">'friendly-errors-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> portfinder = <span class="built_in">require</span>(<span class="string">'portfinder'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> appData = <span class="built_in">require</span>(<span class="string">'../data.json'</span>)</span><br><span class="line"><span class="keyword">const</span> seller = appData.seller</span><br><span class="line"><span class="keyword">const</span> goods = appData.goods</span><br><span class="line"><span class="keyword">const</span> ratings = appData.ratings</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> devWebpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: utils.styleLoaders(&#123; <span class="attr">sourceMap</span>: config.dev.cssSourceMap, <span class="attr">usePostCSS</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// cheap-module-eval-source-map is faster for development</span></span><br><span class="line">  devtool: config.dev.devtool,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// these devServer options should be customized in /config/index.js</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    before(app) &#123;</span><br><span class="line">      app.get(<span class="string">'/api/seller'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        res.json(&#123;</span><br><span class="line">          errno: <span class="number">0</span>,</span><br><span class="line">          data: seller</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">      app.get(<span class="string">'/api/goods'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        res.json(&#123;</span><br><span class="line">          errno: <span class="number">0</span>,</span><br><span class="line">          data: goods</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">      app.get(<span class="string">'/api/ratings'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        res.json(&#123;</span><br><span class="line">          errno: <span class="number">0</span>,</span><br><span class="line">          data: ratings</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    clientLogLevel: <span class="string">'warning'</span>,</span><br><span class="line">    historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    host: process.env.HOST || config.dev.host,</span><br><span class="line">    port: process.env.PORT || config.dev.port,</span><br><span class="line">    open: config.dev.autoOpenBrowser,</span><br><span class="line">    overlay: config.dev.errorOverlay ? &#123;</span><br><span class="line">      warnings: <span class="literal">false</span>,</span><br><span class="line">      errors: <span class="literal">true</span>,</span><br><span class="line">    &#125; : <span class="literal">false</span>,</span><br><span class="line">    publicPath: config.dev.assetsPublicPath,</span><br><span class="line">    proxy: config.dev.proxyTable,</span><br><span class="line">    quiet: <span class="literal">true</span>, <span class="comment">// necessary for FriendlyErrorsPlugin</span></span><br><span class="line">    watchOptions: &#123;</span><br><span class="line">      poll: config.dev.poll,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env'</span>: <span class="built_in">require</span>(<span class="string">'../config/dev.env'</span>)</span><br><span class="line">    &#125;), </span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.NamedModulesPlugin(), <span class="comment">// HMR shows correct file names in console on update.</span></span><br><span class="line">    <span class="keyword">new</span> webpack.NoEmitOnErrorsPlugin(),</span><br><span class="line">    <span class="comment">// https://github.com/ampedandwired/html-webpack-plugin</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'index.html'</span>,</span><br><span class="line">      template: <span class="string">'index.html'</span>,</span><br><span class="line">      inject: <span class="literal">true</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  portfinder.basePort = process.env.PORT || config.dev.port</span><br><span class="line">  portfinder.getPort(<span class="function">(<span class="params">err, port</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// publish the new Port, necessary for e2e tests</span></span><br><span class="line">      process.env.PORT = port</span><br><span class="line">      <span class="comment">// add port to devServer config</span></span><br><span class="line">      devWebpackConfig.devServer.port = port</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// Add FriendlyErrorsPlugin</span></span><br><span class="line">      devWebpackConfig.plugins.push(<span class="keyword">new</span> FriendlyErrorsPlugin(&#123;</span><br><span class="line">        compilationSuccessInfo: &#123;</span><br><span class="line">          messages: [<span class="string">`Your application is running here: http://<span class="subst">$&#123;config.dev.host&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">        onErrors: config.dev.notifyOnErrors</span><br><span class="line">        ? utils.createNotifierCallback()</span><br><span class="line">        : <span class="literal">undefined</span></span><br><span class="line">      &#125;))</span><br><span class="line"> </span><br><span class="line">      resolve(devWebpackConfig)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>如果devServer下面的before(app)里面的内容要根据自己数据名称进行修改，修改时文件头部const也要跟着一起修改。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 前言&lt;/p&gt;
&lt;p&gt;在mock数据时，&lt;a href=&quot;http://localhost:8080/#/api/goods&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://localhost:8080/#/api/goods&lt;/a&gt; 无
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="mock数据" scheme="http://yoursite.com/tags/mock%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件间传值</title>
    <link href="http://yoursite.com/2019/06/04/Vue%E7%BB%84%E4%BB%B6%E9%97%B4%E4%BC%A0%E5%80%BC/"/>
    <id>http://yoursite.com/2019/06/04/Vue组件间传值/</id>
    <published>2019-06-04T07:04:49.190Z</published>
    <updated>2019-06-04T07:01:21.780Z</updated>
    
    <content type="html"><![CDATA[<p>﻿# Vue组件间传值</p><hr><h2 id="父组件向子组件传递数据"><a href="#父组件向子组件传递数据" class="headerlink" title="父组件向子组件传递数据"></a>父组件向子组件传递数据</h2><p>在 Vue 中，通过 props 向子组件传递数据。</p><h4 id="子组件部分："><a href="#子组件部分：" class="headerlink" title="子组件部分："></a>子组件部分：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"1ogo"</span>&gt;</span>&#123;&#123;1ogo&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"nav in navs"</span>&gt;</span>&#123;&#123;nav.li&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这是 header.vue 的 HTML 部分，logo 是在 data 中定义的变量。<br>如果需要从父组件获取 logo 的值，就需要使用 props: [‘logo’]</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="actionscript">name:<span class="string">'headerDiv'</span>,</span></span><br><span class="line"><span class="undefined">data()&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="undefined">navs:[</span></span><br><span class="line"><span class="actionscript">&#123;<span class="number">1</span>i:<span class="string">'主页'</span>&#125;,&#123;<span class="number">1</span>i:<span class="string">'日志'</span>&#125;,&#123;<span class="number">1</span>i:<span class="string">'说说'</span>&#125;,&#123;<span class="number">1</span>i:<span class="string">'主页'</span>&#125;,&#123;<span class="number">1</span>i:<span class="string">'相册&#125;</span></span></span><br><span class="line"><span class="undefined">]</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="actionscript">props:[<span class="string">'logo'</span>]</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="父组件部分："><a href="#父组件部分：" class="headerlink" title="父组件部分："></a>父组件部分：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">HeaderDiv</span> <span class="attr">:logo</span>=<span class="string">"logoMsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">HeaderDiv</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在调用组件的时候，使用 v-bind 将 logo 的值绑定为 App.vue 中定义的变量 logoMsg</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> HeaderDiv <span class="keyword">from</span><span class="string">'./components/header'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="actionscript">name:<span class="string">'app'</span>,</span></span><br><span class="line"><span class="undefined">data()&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="actionscript">logoMsg:<span class="string">'WiseWrong'</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">components:&#123;</span></span><br><span class="line"><span class="undefined">HeaderDiv</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后就能将App.vue中 logoMsg 的值传给 header.vue 了：<br><img src="https://img-blog.csdnimg.cn/20190531195121131.png" alt="在这里插入图片描述"></p><hr><h2 id="子组件向父组件传递数据"><a href="#子组件向父组件传递数据" class="headerlink" title="子组件向父组件传递数据"></a>子组件向父组件传递数据</h2><p>子组件主要通过事件传递数据给父组件</p><h4 id="子组件部分"><a href="#子组件部分" class="headerlink" title="子组件部分"></a>子组件部分</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"username"</span>@<span class="attr">change</span>=<span class="string">"setUser"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这是 login.vue 的 HTML 部分，当<input>的值发生变化的时候，将 username 传递给 App.vue<br>首先声明一个了方法 setUser，用 change 事件来调用 setUser<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="actionscript">name:<span class="string">' login'</span>, </span></span><br><span class="line"><span class="undefined">data()&#123; </span></span><br><span class="line"><span class="actionscript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="actionscript">username:<span class="string">''</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">methods:&#123;</span></span><br><span class="line"><span class="actionscript">setUser: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.$emit(<span class="string">' transferUser'</span>, <span class="keyword">this</span>. username)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在 setUser 中，使用了 $emit 来遍历 transferUser 事件，并返回 this.username<br>其中 transferUser 是一个自定义的事件，功能类似于一个中转，this.username 将通过这个事件传递给父组件 </p></blockquote><h4 id="父组件部分"><a href="#父组件部分" class="headerlink" title="父组件部分"></a>父组件部分</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LoginDiv</span>  @<span class="attr">transferUser</span>=<span class="string">"getUser"</span>&gt;</span><span class="tag">&lt;/<span class="name">LoginDiv</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名为：&#123;&#123;user&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在父组件 App.vue 中，声明了一个方法 getUser，用 transferUser 事件调用 getUser 方法，获取到从子组件传递过来的参数 username<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> LoginDiv <span class="keyword">from</span><span class="string">'./components/login'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">name:<span class="string">' app'</span>,</span></span><br><span class="line"><span class="undefined">data()&#123; </span></span><br><span class="line"><span class="actionscript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="actionscript">user:<span class="string">''</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;, </span></span><br><span class="line"><span class="undefined">methods:&#123;</span></span><br><span class="line"><span class="actionscript">getUser(msg)&#123; <span class="keyword">this</span>. user=msg</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">components:&#123;</span></span><br><span class="line"><span class="undefined">LoginDiv</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>getUser 方法中的参数 msg 就是从子组件传递过来的参数 username<br><img src="https://img-blog.csdnimg.cn/20190531200050730.png" alt="在这里插入图片描述"></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿# Vue组件间传值&lt;/p&gt;
&lt;hr&gt;

&lt;h2 id=&quot;父组件向子组件传递数据&quot;&gt;&lt;a href=&quot;#父组件向子组件传递数据&quot; class=&quot;headerlink&quot; title=&quot;父组件向子组件传递数据&quot;&gt;&lt;/a&gt;父组件向子组件传递数据&lt;/h2&gt;&lt;p&gt;在 Vue 中，通
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="组件间传值" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6%E9%97%B4%E4%BC%A0%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 2.0 中#$on与$emit如何理解使用</title>
    <link href="http://yoursite.com/2019/06/04/Vue.js%202.0%20%E4%B8%AD#$on%E4%B8%8E$emit%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/06/04/Vue.js 2.0 中#$on与$emit如何理解使用/</id>
    <published>2019-06-04T07:04:49.185Z</published>
    <updated>2019-06-04T07:00:52.835Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 先看看官方文档的解释</p><hr><h3 id="vm-on-event-callback"><a href="#vm-on-event-callback" class="headerlink" title="vm.$on( event, callback )"></a>vm.$on( event, callback )</h3><ul><li><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li>{string | Array<string>} event (数组只在 2.2.0+ 中支持)</string></li><li>{Function} callback</li></ul></li><li><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4>  监听当前实例上的自定义事件。事件可以由vm.$emit触发。回调函数会接收所有传入事件触发函数的额外参数。</li><li><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vm.$on(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(msg)</span><br><span class="line">&#125;)</span><br><span class="line">vm.$emit(<span class="string">'test'</span>, <span class="string">'hi'</span>)</span><br><span class="line"><span class="comment">// =&gt; "hi"</span></span><br></pre></td></tr></table></figure><blockquote><p>这里$emit监听test事件，附加参数（hi）都会传给监听器回调。<br>然后$on和$emit监听同一个事件，接收到$emit传过来的数据（hi），然后通过回调函数打印出来。</p></blockquote><h3 id="vm-emit-eventName-…args"><a href="#vm-emit-eventName-…args" class="headerlink" title="vm.$emit( eventName, […args] )"></a>vm.$emit( eventName, […args] )</h3><ul><li><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><ul><li>{string} eventName</li><li>[…args]</li></ul></li><li><h4 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h4><ul><li>触发当前实例上的事件。附加参数都会传给监听器回调。</li></ul></li><li><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4></li></ul><p>先定义一个计数组件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'simple-com'</span>,&#123;</span><br><span class="line">    template:<span class="string">'&lt;button v-on:click="incresone"&gt;&#123;&#123;count&#125;&#125;&lt;/button&gt;'</span>,</span><br><span class="line">    data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            count:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        incresone:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.count+=<span class="number">1</span></span><br><span class="line">            <span class="comment">//监听自定义的事件</span></span><br><span class="line">            <span class="keyword">this</span>.$on(<span class="string">'increment'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">                <span class="comment">//获取$emit方法传递的第二个参数</span></span><br><span class="line">                <span class="built_in">console</span>.log(msg);</span><br><span class="line">                alert(<span class="string">"1"</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">//触发自定义的事件</span></span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">'increment'</span>,<span class="keyword">this</span>.count)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure></p><p>使用组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">simple-com</span> <span class="attr">v-on:increment</span>=<span class="string">"incretol"</span>&gt;</span><span class="tag">&lt;/<span class="name">simple-com</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">simple-com</span> <span class="attr">v-on:increment</span>=<span class="string">"incretol"</span>&gt;</span><span class="tag">&lt;/<span class="name">simple-com</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">simple-com</span> <span class="attr">v-on:increment</span>=<span class="string">"incretol"</span>&gt;</span><span class="tag">&lt;/<span class="name">simple-com</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;total&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实例化vue的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        total:<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    methods:&#123;</span><br><span class="line">        incretol:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.total+=<span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>当我点击计数的时候，$on监听increment事件，当increment事件执行时，便会弹出1，然后再继续执行后面的代码。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190601101551127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 先看看官方文档的解释&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;vm-on-event-callback&quot;&gt;&lt;a href=&quot;#vm-on-event-callback&quot; class=&quot;headerlink&quot; title=&quot;vm.$on( event, callback 
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="$on和$emit" scheme="http://yoursite.com/tags/on%E5%92%8C-emit/"/>
    
  </entry>
  
</feed>
