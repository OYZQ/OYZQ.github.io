<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OuYang&#39;blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-04T13:45:40.599Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>OuYang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jianshu-react项目总结</title>
    <link href="http://yoursite.com/2019/10/04/jianshu-react%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/10/04/jianshu-react项目总结/</id>
    <published>2019-10-04T13:43:50.603Z</published>
    <updated>2019-10-04T13:45:40.599Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 目录</p><ul><li><a href="#user-content-技术栈">技术栈</a></li><li><a href="#user-content-项目结构及技术点介绍">项目结构及技术点介绍</a><ul><li><a href="#user-content-项目结构">项目结构</a></li><li><a href="#styled-components">styled components</a><ul><li><a href="#user-content-使用iconfont嵌入图标">使用iconfont嵌入图标</a></li><li><a href="#user-content-动画库的使用">使用react-transition-group动画库</a></li><li><a href="#user-content-使用react-redux及其中间件">使用react-redux及其中间件</a></li><li>等等。。。</li></ul></li></ul></li><li><a href="#user-content-代码和性能优化">项目代码和性能优化</a><ul><li><a href="#user-content-this绑定优化">this绑定的性能优化</a></li><li><a href="#user-content-使用无状态组件提高性能">合理使用无状态组件</a></li><li><a href="#user-content-immutablejs与redux结合使用">Immutable.js与redux结合使用</a></li><li><a href="#user-content-避免无意义的网络请求">避免无意义的网络请求</a></li><li><a href="#user-content-异步操作代码拆分优化">异步操作代码拆分优化</a></li><li><a href="#user-content-使用PureComponent">使用PureComponent</a></li></ul></li></ul><h1 id="技术栈："><a href="#技术栈：" class="headerlink" title="技术栈："></a>技术栈：</h1><p>  react + redux + redux-thunk（让redux支持异步的中间件） +  webpack + react-router + ES6/7/8 + axios + react-transition-group（react动画库）+ react-loadable（使组件按需载） + styled-components（css组件化） + immutable.js</p><h2 id="运行打包（nodejs-6-0-）："><a href="#运行打包（nodejs-6-0-）：" class="headerlink" title="运行打包（nodejs 6.0+）："></a>运行打包（nodejs 6.0+）：</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/CoderZF/jianshu-<span class="keyword">pc</span>.git</span><br><span class="line"></span><br><span class="line"><span class="keyword">cd</span> jianshu-<span class="keyword">pc</span></span><br><span class="line"></span><br><span class="line">npm i  或者运行  yarn(推荐)</span><br><span class="line"> </span><br><span class="line">npm start</span><br><span class="line"></span><br><span class="line">npm run build （发布）</span><br></pre></td></tr></table></figure><h2 id="项目结构及技术点介绍："><a href="#项目结构及技术点介绍：" class="headerlink" title="项目结构及技术点介绍："></a>项目结构及技术点介绍：</h2><p><em>该项目由 <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="noopener">Create React App</a> 搭建.</em></p><h4 id="项目结构："><a href="#项目结构：" class="headerlink" title="项目结构："></a>项目结构：</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">jianshu-pc</span><br><span class="line">│   README.md</span><br><span class="line">│   package.json</span><br><span class="line">└───src</span><br><span class="line">│   │   App.js</span><br><span class="line">│   │   idnex.js</span><br><span class="line">│   │   style.js</span><br><span class="line">│   └───common</span><br><span class="line">│   │      └───header</span><br><span class="line">│   │             │   index.js</span><br><span class="line">│   │             │   style.js</span><br><span class="line">│   │             └───store   </span><br><span class="line">│   │                  │   actionCreators.js</span><br><span class="line">│   │                  │   constants<span class="selector-class">.js</span>  </span><br><span class="line">│   │                  │   index<span class="selector-class">.js</span>  </span><br><span class="line">│   │                  │   reducer<span class="selector-class">.js</span>  </span><br><span class="line">│   └───pages</span><br><span class="line">│   │      └───detail</span><br><span class="line">│   │      │       │   index.js</span><br><span class="line">│   │      │       │   style.js</span><br><span class="line">│   │      │       │   loadable.js</span><br><span class="line">│   │      │       └───store   </span><br><span class="line">│   │      │           │   actionCreators.js</span><br><span class="line">│   │      │           │   constants<span class="selector-class">.js</span>  </span><br><span class="line">│   │      │           │   index<span class="selector-class">.js</span>  </span><br><span class="line">│   │      │           │   reducer<span class="selector-class">.js</span>  </span><br><span class="line">│   │      └───home</span><br><span class="line">│   │      │       │   index.js</span><br><span class="line">│   │      │       │   style.js</span><br><span class="line">│   │      │       └───store   </span><br><span class="line">│   │      │       │      actionCreators.js</span><br><span class="line">│   │      │       │      constants<span class="selector-class">.js</span>  </span><br><span class="line">│   │      │       │      index<span class="selector-class">.js</span>  </span><br><span class="line">│   │      │       │      reducer<span class="selector-class">.js</span>   </span><br><span class="line">│   │      │       └───components   </span><br><span class="line">│   │      │           │   List.js</span><br><span class="line">│   │      │           │   Recommend<span class="selector-class">.js</span>  </span><br><span class="line">│   │      │           │   Topic<span class="selector-class">.js</span>  </span><br><span class="line">│   │      │           │   Writer<span class="selector-class">.js</span>   </span><br><span class="line">│   │      └───login</span><br><span class="line">│   │      │       │   index.js</span><br><span class="line">│   │      │       │   style.js</span><br><span class="line">│   │      │       └───store   </span><br><span class="line">│   │      │           │   actionCreators.js</span><br><span class="line">│   │      │           │   constants<span class="selector-class">.js</span>  </span><br><span class="line">│   │      │           │   index<span class="selector-class">.js</span>  </span><br><span class="line">│   │      │           │   reducer<span class="selector-class">.js</span>   </span><br><span class="line">│   │      └───write</span><br><span class="line">│   │      │       │   index.js</span><br><span class="line">│   │      │       │   style.js</span><br><span class="line">│   └───statics</span><br><span class="line">│   │      │   logo.png</span><br><span class="line">│   │      │   ...</span><br><span class="line">│   │      └───iconfont</span><br><span class="line">│   │             │   iconfont.eot</span><br><span class="line">│   │             │   iconfont.js</span><br><span class="line">│   │             │   ...</span><br><span class="line">│   └───store</span><br><span class="line">│   │      │   index.js</span><br><span class="line">│   │      │   reducer.js</span><br><span class="line">│        </span><br><span class="line">└───public</span><br><span class="line">    │   ...</span><br></pre></td></tr></table></figure><h4 id="styled-components："><a href="#styled-components：" class="headerlink" title="styled components："></a>styled components：</h4><p>使用styled components，可将组件分为逻辑组件和展示组件，逻辑组件只关注逻辑相关的部分，展示组件只关注样式。通过解耦成两种组件，可以使代码变得更加清晰可维护。当逻辑有变化，如后台拉取的数据的格式有所变化时，只需关注并修改逻辑组件上的代码，展示组件的代码不用动。而当UI需要变化时，只需改变展示组件上的代码，并保证展示组件暴露的props接口不变即可。逻辑组件和展示组件各司其职，修改代码时错误发生率也会有所减少。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; injectGlobal &#125; <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"></span><br><span class="line">injectGlobal<span class="string">`</span></span><br><span class="line"><span class="string">html, body, div, span, applet, object, iframe,</span></span><br><span class="line"><span class="string">h1, h2, h3, h4, h5, h6, p, blockquote, pre,</span></span><br><span class="line"><span class="string">a, abbr, acronym, address, big, cite, code,</span></span><br><span class="line"><span class="string">del, dfn, em, img, ins, kbd, q, s, samp,</span></span><br><span class="line"><span class="string">small, strike, strong, sub, sup, tt, var,</span></span><br><span class="line"><span class="string">b, u, i, center,</span></span><br><span class="line"><span class="string">dl, dt, dd, ol, ul, li,</span></span><br><span class="line"><span class="string">fieldset, form, label, legend,</span></span><br><span class="line"><span class="string">table, caption, tbody, tfoot, thead, tr, th, td,</span></span><br><span class="line"><span class="string">article, aside, canvas, details, embed, </span></span><br><span class="line"><span class="string">figure, figcaption, footer, header, hgroup, </span></span><br><span class="line"><span class="string">menu, nav, output, ruby, section, summary,</span></span><br><span class="line"><span class="string">time, mark, audio, video &#123;</span></span><br><span class="line"><span class="string">margin: 0;</span></span><br><span class="line"><span class="string">padding: 0;</span></span><br><span class="line"><span class="string">border: 0;</span></span><br><span class="line"><span class="string">font-size: 100%;</span></span><br><span class="line"><span class="string">font: inherit;</span></span><br><span class="line"><span class="string">vertical-align: baseline;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure></p><p>上面js可以看出全局公用样式使用injectGlobal，所有css写在字符串模板中，vscode下载vscode-styled-components插件可支持语法高亮。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">"styled-components"</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">const</span> RecommendWrapper = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  margin: 30px 0;</span></span><br><span class="line"><span class="string">  width: 280px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">const</span> RecommendItem = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  width: 280px;</span></span><br><span class="line"><span class="string">  height: 50px;</span></span><br><span class="line"><span class="string">  background: url(<span class="subst">$&#123;props =&gt; props.imgUrl&#125;</span>);</span></span><br><span class="line"><span class="string">  background-size: contain;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; RecommendWrapper, RecommendItem &#125; <span class="keyword">from</span> <span class="string">'../style'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Recommend</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">render() &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;RecommendWrapper&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.props.list.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">RecommendItem</span> <span class="attr">imgUrl</span>=<span class="string">&#123;item.get(</span>'<span class="attr">imgUrl</span>')&#125; <span class="attr">key</span>=<span class="string">&#123;item.get(</span>'<span class="attr">id</span>')&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">RecommendWrapper</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面2个js就是styled components最常用的使用方法，将视图和逻辑彻底分离。</p><h4 id="使用iconfont嵌入图标"><a href="#使用iconfont嵌入图标" class="headerlink" title="使用iconfont嵌入图标"></a>使用iconfont嵌入图标</h4><p>[外链图片转存失败(img-E4M00HYU-1568882130487)(<a href="https://upload-images.jianshu.io/upload_images/1517219-ce2bf5c272f293f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)]" target="_blank" rel="noopener">https://upload-images.jianshu.io/upload_images/1517219-ce2bf5c272f293f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)]</a><br>[外链图片转存失败(img-u7nNWtY2-1568882130489)(<a href="https://upload-images.jianshu.io/upload_images/1517219-4ea045f8f4ef401e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)]" target="_blank" rel="noopener">https://upload-images.jianshu.io/upload_images/1517219-4ea045f8f4ef401e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)]</a></p><h4 id="动画库的使用"><a href="#动画库的使用" class="headerlink" title="动画库的使用"></a>动画库的使用</h4><p> react-transition-group是react官方提供的动画库，也是之前两个的合体版本，此动画库总共提供三个组件Transition，CSSTransition和TransitonGroup。<br>本项目为实现输入框在聚焦和失去焦点时其长度的变化，使用了CSSTransition这个组件。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;CSSTransition <span class="keyword">in</span>=&#123;focused&#125; timeout=&#123;<span class="number">200</span>&#125; classNames=<span class="string">"slide"</span>&gt;</span><br><span class="line">  &lt;NavSearch</span><br><span class="line">    className=&#123;focused ? <span class="string">"focused"</span> : <span class="string">""</span>&#125;</span><br><span class="line">    onFocus=&#123;() =&gt; handleInputFocus(list)&#125;</span><br><span class="line">    onBlur=&#123;handleInputBlur&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;<span class="regexp">/CSSTransition&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">export</span> <span class="keyword">const</span> NavSearch = styled.input.attrs(&#123;</span><br><span class="line">          placeholder: <span class="string">"搜索"</span></span><br><span class="line">    &#125;)<span class="string">`</span></span><br><span class="line"><span class="string">          width: 160px;</span></span><br><span class="line"><span class="string">          height: 38px;</span></span><br><span class="line"><span class="string">          padding: 0 30px 0 20px;</span></span><br><span class="line"><span class="string">          margin-top: 9px;</span></span><br><span class="line"><span class="string">          margin-left: 20px;</span></span><br><span class="line"><span class="string">          box-sizing: border-box;</span></span><br><span class="line"><span class="string">          border: none;</span></span><br><span class="line"><span class="string">          outline: none;</span></span><br><span class="line"><span class="string">          border-radius: 19px;</span></span><br><span class="line"><span class="string">          background: #eee;</span></span><br><span class="line"><span class="string">          font-size: 14px;</span></span><br><span class="line"><span class="string">          color: #666;</span></span><br><span class="line"><span class="string">          &amp;::placeholder &#123;</span></span><br><span class="line"><span class="string">               color: #999;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          &amp;.focused &#123;</span></span><br><span class="line"><span class="string">              width: 240px;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          &amp;.slide-enter &#123;</span></span><br><span class="line"><span class="string">               transition: all 0.2s ease-out;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          &amp;.slide-enter-active &#123;</span></span><br><span class="line"><span class="string">            width: 240px;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          &amp;.slide-exit &#123;</span></span><br><span class="line"><span class="string">            transition: all 0.2s ease-out;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          &amp;.slide-exit-active &#123;</span></span><br><span class="line"><span class="string">            width: 160px;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><p>CSSTransition包装的组件会给其组件自动包装不同状态的类名，如上slide-enter，slide-enter-active，slide-exit，slide-exit-active 就是其根据classNames-xxx自动挂载的。</p><h4 id="使用react-redux及其中间件"><a href="#使用react-redux及其中间件" class="headerlink" title="使用react-redux及其中间件"></a>使用react-redux及其中间件</h4><p> 首先为根组件用react-redux提供的Provider包裹，其目的就是让整个项目的组件可以使用store。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">      &lt;BrowserRouter&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">            &lt;Header /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">'/'</span> exact component=&#123;Home&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">            &lt;Route path=<span class="string">'/login'</span> exact component=&#123;Login&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">            &lt;Route path=<span class="string">'/write'</span> exact component=&#123;Write&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">      &lt;Route path=<span class="string">'/detail/:id'</span> exact component=&#123;Detail&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>BrowserRouter&gt;</span><br><span class="line">      &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>然后让组件通过connect连接store，connect第一次调用的两个参数分别是store和dispatch对其组件props的映射回调函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispathToProps</span><br><span class="line">)(Header);</span><br></pre></td></tr></table></figure></p><h2 id="代码和性能优化："><a href="#代码和性能优化：" class="headerlink" title="代码和性能优化："></a>代码和性能优化：</h2><h4 id="this绑定优化"><a href="#this绑定优化" class="headerlink" title="this绑定优化"></a>this绑定优化</h4><ol><li><p>当使用bind()绑定时，最好把所有需要绑定的方法都放在构造函数constructor中，这样就仅需要绑定一次就可以，避免每次渲染时都要重新绑定，函数在别处复用时也无需再次绑定。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> (props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleClick (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render () &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123; <span class="keyword">this</span>.handleClick &#125;&gt;Say Hello&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>箭头函数则会捕获其所在上下文的this值，作为自己的this值，使用箭头函数就不用担心函数内的this不是指向组件内部了。可以按下面这种方式使用箭头函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> (props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;<span class="attr">message</span>: <span class="string">'Allo!'</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleClick (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.message)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render () &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123; ()=&gt;&#123; <span class="keyword">this</span>.handleClick() &#125; &#125;&gt;Say Hello&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>使用这个语法有个问题就是每次 Test 渲染的时候都会创建一个不同的回调函数。在大多数情况下，这没有问题。然而如果这个回调函数作为一个属性值传入低阶组件，这些组件可能会进行额外的重新渲染。我们通常建议在构造函数中绑定或像下面代码使用属性初始化器语法来避免这类性能问题。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> (props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;<span class="attr">message</span>: <span class="string">'Allo!'</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleClick = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.message)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render () &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123; <span class="keyword">this</span>.handleClick &#125;&gt;Say Hello&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="使用无状态组件提高性能"><a href="#使用无状态组件提高性能" class="headerlink" title="使用无状态组件提高性能"></a>使用无状态组件提高性能</h4><p>如此组件没有状态的影响或者仅仅纯静态展示时，完全可以用无状态组件来替代有状态组件，因其除render无任何其他生命周期方法且仅仅返回的是个函数，无实例化过程，大大提升了性能。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; WriterWrapper &#125; <span class="keyword">from</span> <span class="string">'../style'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Writer</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;WriterWrapper&gt;HomeWork&lt;<span class="regexp">/WriterWrapper&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Writer;</span></span><br></pre></td></tr></table></figure></p><p>上面组件就可以完全改装成如下无状态组件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; WriterWrapper &#125; <span class="keyword">from</span> <span class="string">"../style"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Writer = <span class="function"><span class="params">()</span> =&gt;</span> &lt;WriterWrapper&gt;HomeWork&lt;<span class="regexp">/WriterWrapper&gt;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Writer;</span></span><br></pre></td></tr></table></figure></p><h4 id="immutable-js与redux结合使用"><a href="#immutable-js与redux结合使用" class="headerlink" title="immutable.js与redux结合使用"></a>immutable.js与redux结合使用</h4><p>当我们对一个Immutable对象进行操作的时候，ImmutableJS基于哈希映射树(hash map tries)和vector map tries，只clone该节点以及它的祖先节点，其他保持不变，这样可以共享相同的部分，大大提高性能。在对Immutable对象的操作均会返回新的对象，所以使用redux的reducer中就不需要总是想着不能修改原state，因为对Immutable对象的操作返回就是新的对象，且比普通js深拷贝产生的性能消耗要低得多。<br>  我在项目中也是大量使用immutable.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> constants <span class="keyword">from</span> <span class="string">'./constants'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fromJS &#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultState = fromJS(&#123;</span><br><span class="line">focused: <span class="literal">false</span>,</span><br><span class="line">mouseIn: <span class="literal">false</span>,</span><br><span class="line">list: [],</span><br><span class="line">page: <span class="number">1</span>,</span><br><span class="line">totalPage: <span class="number">1</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state = defaultState, action) =&gt; &#123;</span><br><span class="line"><span class="keyword">switch</span>(action.type) &#123;</span><br><span class="line"><span class="keyword">case</span> constants.SEARCH_FOCUS:</span><br><span class="line"><span class="keyword">return</span> state.set(<span class="string">'focused'</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">case</span> constants.SEARCH_BLUR:</span><br><span class="line"><span class="keyword">return</span> state.set(<span class="string">'focused'</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">case</span> constants.CHANGE_LIST:</span><br><span class="line"><span class="keyword">return</span> state.merge(&#123;</span><br><span class="line">list: action.data,</span><br><span class="line">totalPage: action.totalPage</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">case</span> constants.MOUSE_ENTER:</span><br><span class="line"><span class="keyword">return</span> state.set(<span class="string">'mouseIn'</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">case</span> constants.MOUSE_LEAVE:</span><br><span class="line"><span class="keyword">return</span> state.set(<span class="string">'mouseIn'</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">case</span> constants.CHANGE_PAGE:</span><br><span class="line"><span class="keyword">return</span> state.set(<span class="string">'page'</span>, action.page);</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> constants <span class="keyword">from</span> <span class="string">'./constants'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fromJS &#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> changeList = <span class="function">(<span class="params">data</span>) =&gt;</span> (&#123;</span><br><span class="line"><span class="keyword">type</span>: constants.CHANGE_LIST,</span><br><span class="line">data: fromJS(data),</span><br><span class="line">totalPage: <span class="built_in">Math</span>.ceil(data.length / <span class="number">10</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getList = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">axios.get(<span class="string">'/api/headerList.json'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> data = res.data;</span><br><span class="line">dispatch(changeList(data.data));</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'error'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="避免无意义的网络请求"><a href="#避免无意义的网络请求" class="headerlink" title="避免无意义的网络请求"></a>避免无意义的网络请求</h4><p>比如在请求热门搜索提示项的时候，只有当size是0的时候我才去发送请求。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapDispathToProps = <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  handleInputFocus(list) &#123;</span><br><span class="line">    list.size === <span class="number">0</span> &amp;&amp; dispatch(actionCreators.getList());</span><br><span class="line">    dispatch(actionCreators.searchFocus());</span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></p><h4 id="异步操作代码拆分优化"><a href="#异步操作代码拆分优化" class="headerlink" title="异步操作代码拆分优化"></a>异步操作代码拆分优化</h4><p>在UI组件中因尽量减少业务逻辑操作，像与服务器交互的大量代码都应该解耦出来，所以结合redux-thunk的使用将大量的网络请求代码写在action中就解决了这一问题。<br>下面是home页的actionCreators.js，当前模块的所有action和网络请求都在此文件中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> constants <span class="keyword">from</span> <span class="string">'./constants'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fromJS &#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> changHomeData = <span class="function">(<span class="params">result</span>) =&gt;</span> (&#123;</span><br><span class="line">type: constants.CHANGE_HOME_DATA,</span><br><span class="line">topicList: result.topicList,</span><br><span class="line">articleList: result.articleList,</span><br><span class="line">recommendList: result.recommendList</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addHomeList = <span class="function">(<span class="params">list, nextPage</span>) =&gt;</span> (&#123;</span><br><span class="line">type: constants.ADD_ARTICLE_LIST,</span><br><span class="line">list: fromJS(list),</span><br><span class="line">nextPage</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getHomeInfo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">axios.get(<span class="string">'/api/home.json'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> result = res.data.data;</span><br><span class="line">dispatch(changHomeData(result));</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getMoreList = <span class="function">(<span class="params">page</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">axios.get(<span class="string">'/api/homeList.json?page='</span> + page).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> result = res.data.data;</span><br><span class="line">dispatch(addHomeList(result, page + <span class="number">1</span>));</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> toggleTopShow = <span class="function">(<span class="params">show</span>) =&gt;</span> (&#123;</span><br><span class="line">type: constants.TOGGLE_SCROLL_TOP,</span><br><span class="line">show</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这样在组件中就可以轻松的去调用网络请求，然后将返回结果发送给reducer进行处理<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ListItem, ListInfo, LoadMore &#125; <span class="keyword">from</span> <span class="string">'../style'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; actionCreators &#125; <span class="keyword">from</span> <span class="string">'../store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">render() &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; list, getMoreList, page &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&#123;</span><br><span class="line">list.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;Link key=&#123;index&#125; to=&#123;<span class="string">'/detail/'</span> + item.get(<span class="string">'id'</span>)&#125;&gt;</span><br><span class="line">&lt;ListItem &gt;</span><br><span class="line">&lt;img alt=<span class="string">''</span> className=<span class="string">'pic'</span> src=&#123;item.get(<span class="string">'imgUrl'</span>)&#125; /&gt;</span><br><span class="line">&lt;ListInfo&gt;</span><br><span class="line">&lt;h3 className=<span class="string">'title'</span>&gt;&#123;item.get(<span class="string">'title'</span>)&#125;&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">&lt;p className='desc'&gt;&#123;item.get('desc')&#125;&lt;/</span>p&gt;</span><br><span class="line">&lt;<span class="regexp">/ListInfo&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>ListItem&gt;</span><br><span class="line">&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;LoadMore onClick=&#123;() =&gt; getMoreList(page)&#125;&gt;更多文字&lt;/</span>LoadMore&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const mapState = (state) =&gt; (&#123;</span></span><br><span class="line"><span class="regexp">list: state.getIn(['home', 'articleList']),</span></span><br><span class="line"><span class="regexp">page: state.getIn(['home', 'articlePage'])</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const mapDispatch = (dispatch) =&gt; (&#123;</span></span><br><span class="line"><span class="regexp">getMoreList(page) &#123;</span></span><br><span class="line"><span class="regexp">dispatch(actionCreators.getMoreList(page))</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default connect(mapState, mapDispatch)(List);</span></span><br></pre></td></tr></table></figure></p><h4 id="使用PureComponent"><a href="#使用PureComponent" class="headerlink" title="使用PureComponent"></a>使用PureComponent</h4><p>继承Component的普通组件，使用react-redux的connect连接了store，那么只要store内的数据发生改变就会让所有连接的组件触发render，这样就会产生不必要的渲染开销，当然使用shouldComponentUpdate也可以阻止不必要的渲染，但这样的话每个组件都要写同样的shouldComponentUpdate方法；继承PureComponent的组件正好解决了这一痛点，默认实现的shouldComponentUpdate。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNTE3MjE5LTk4YzhjYTNiM2I3MDg1YjgucG5n?x-oss-process=image/format,png" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 目录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#user-content-技术栈&quot;&gt;技术栈&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#user-content-项目结构及技术点介绍&quot;&gt;项目结构及技术点介绍&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#user
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="项目总结" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>关于React中使用bind(this)的理解</title>
    <link href="http://yoursite.com/2019/09/26/%E5%85%B3%E4%BA%8EReact%E4%B8%AD%E4%BD%BF%E7%94%A8bind(this)%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/09/26/关于React中使用bind(this)的理解/</id>
    <published>2019-09-26T15:07:47.861Z</published>
    <updated>2019-09-26T15:09:15.628Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 前言</p><p>在学习React的过程中发现调用函数的时候必须使用bind(this)，之后直接在class中声明函数即可正常使用，但是为什么要使用这个呢？在这里总结一下。</p><h2 id="1-JavaScript自身特性说明"><a href="#1-JavaScript自身特性说明" class="headerlink" title="1.JavaScript自身特性说明"></a>1.JavaScript自身特性说明</h2><p>如果传递一个函数名给一个变量，之后通过函数名()的方式进行调用，在方法内部如果使用this则this的指向会丢失。 示例代码：</p><p>首先我们创建test对象并直接调用方法 ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = &#123;</span><br><span class="line">    name:<span class="string">'jack'</span>,</span><br><span class="line">    getName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">test.getName()</span><br></pre></td></tr></table></figure><p>使用node test.js执行上述代码可以正常输出jack。 之后，我们对代码进行调整：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = &#123;</span><br><span class="line">    name:<span class="string">'jack'</span>,</span><br><span class="line">    getJack:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> func = test.getJack;</span><br><span class="line">func();</span><br></pre></td></tr></table></figure><p>我们没有直接调用对象的方法，而是将方法声明给一个中间变量，之后利用中间变量()调用方法，此时this则失去指向，输出undefined，<strong>如果使用node环境执行js文件则输出node相关信息，如嵌入到html中则this指向window对象。</strong></p><h2 id="2-React事件绑定"><a href="#2-React事件绑定" class="headerlink" title="2.React事件绑定"></a>2.React事件绑定</h2><p>React中的bind同上方原理一致,在JSX中传递的事件不是一个字符串，而是一个<strong>函数</strong>（如:onClick={this.handleClick}），此时onClick即是<strong>中间变量</strong>，所以处理函数中的this指向会丢失。解决这个问题就是给调用函数时bind(this)，从而使得无论事件处理函数如何传递，this指向都是当前实例化对象。 </p><p>当然，如果不想使用bind(this)，我们可以在声明函数时使用箭头函数将函数内容返回给一个变量，并在调用时直接使用this.变量名即可。示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Life</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            count:<span class="number">4</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">var</span> style = &#123;</span><br><span class="line">            padding:<span class="string">'10px'</span>,</span><br><span class="line">            color:<span class="string">'red'</span>,</span><br><span class="line">            fontSize:<span class="string">'30px'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div style=&#123;style&#125;&gt;&#123;<span class="comment">/*注意js语法使用一个括号&#123;&#125;去表示,style使用两个括号,原因里面其实是一个对象*/</span>&#125;</span><br><span class="line">                &lt;p&gt;React生命周期介绍&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button onClick=&#123;this.handleAdd&#125;&gt;无bind点击一下&lt;/</span>button&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)&#125;&gt;有bind点击一下&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt;&#123;this.state.count&#125;&lt;/</span>p&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/此时this指向是当前实例对象</span></span><br><span class="line"><span class="regexp">    handleAdd = ()=&gt; &#123;</span></span><br><span class="line"><span class="regexp">        console.log(this)</span></span><br><span class="line"><span class="regexp">        this.setState(&#123;</span></span><br><span class="line"><span class="regexp">            count:5</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    handleClick()&#123;</span></span><br><span class="line"><span class="regexp">        this.setState(&#123;</span></span><br><span class="line"><span class="regexp">            count:6</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>普通函数中，内层函数不能从外层函数中继承this的值，在内层函数中，this会是window或者undefined（取决于是否使用严格模式），可以设置一个临时变量用来将外部的this值导入到内部函数中，再一个方法就是在内部函数执行.bind(this)。<br>而箭头函数的this是继承父级的this。<br>因此在React中要注意，在一个方法中调用this.setState()等函数，或者在render()方法中被调用，都有内层函数参与，因此需要将该方法的this绑定到class。所以如果是用function的普通方法定义，需要在constructor中bind(this)，如：this.onChange = this.onChange.bind(this);<br>这样this指向组件实例，就可以在render()中使用，也可以在方法中调用this.setState()方法了。<br>或者直接用箭头函数进行定义。这样，this就继承自父级方法render(), 而render()的this为组件实例。<br>这样一来，在render()中就可以愉快的使用了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line">&lt;input onChange=&#123;<span class="keyword">this</span>.onChange&#125;&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>不建议在render()中bind</strong>，如：<input onchange="{this.onChange.bind(this)}">，因为它会在每次render()方法执行时绑定类方法，肯定对于性能有影响。而直接在constructor中bind, 则bind只会在组件实例化初时运行一次。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 前言&lt;/p&gt;
&lt;p&gt;在学习React的过程中发现调用函数的时候必须使用bind(this)，之后直接在class中声明函数即可正常使用，但是为什么要使用这个呢？在这里总结一下。&lt;/p&gt;
&lt;h2 id=&quot;1-JavaScript自身特性说明&quot;&gt;&lt;a href=&quot;#1-
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="bind(this)" scheme="http://yoursite.com/tags/bind-this/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题：如何画一条0.5px的线</title>
    <link href="http://yoursite.com/2019/09/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E5%A6%82%E4%BD%95%E7%94%BB%E4%B8%80%E6%9D%A10.5px%E7%9A%84%E7%BA%BF/"/>
    <id>http://yoursite.com/2019/09/24/前端面试题：如何画一条0.5px的线/</id>
    <published>2019-09-24T15:01:56.845Z</published>
    <updated>2019-09-24T15:03:16.085Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 前言</p><p>理论上1px已经是最小单位了，那如何画一条0.5px的线呢？<br>有以下两种方法</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li><strong>采用meta viewport的方式</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=0.5, minimum-scale=0.5, maximum-scale=0.5"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这样子就能缩放到原来的0.5倍，如果是1px那么就会变成0.5px</p><p>要记得viewport只针对于移动端，只在移动端上才能看到效果</p><ol start="2"><li><strong>采用transform: scale()的方式</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform: scale(<span class="number">0.5</span>,<span class="number">0.5</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 前言&lt;/p&gt;
&lt;p&gt;理论上1px已经是最小单位了，那如何画一条0.5px的线呢？&lt;br&gt;有以下两种方法&lt;/p&gt;
&lt;h2 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h2&gt;&lt;o
      
    
    </summary>
    
      <category term="面试题" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="如何画一条0.5px的线" scheme="http://yoursite.com/tags/%E5%A6%82%E4%BD%95%E7%94%BB%E4%B8%80%E6%9D%A10-5px%E7%9A%84%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>阿里前端笔试：请编写一个JavaScript 函数toRGB，它的作用是转换CSS中常用的颜色编码</title>
    <link href="http://yoursite.com/2019/09/23/%E9%98%BF%E9%87%8C%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AF%95%EF%BC%9A%E8%AF%B7%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAJavaScript%20%E5%87%BD%E6%95%B0toRGB%EF%BC%8C%E5%AE%83%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E8%BD%AC%E6%8D%A2CSS%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E9%A2%9C%E8%89%B2%E7%BC%96%E7%A0%81/"/>
    <id>http://yoursite.com/2019/09/23/阿里前端笔试：请编写一个JavaScript 函数toRGB，它的作用是转换CSS中常用的颜色编码/</id>
    <published>2019-09-23T15:35:55.430Z</published>
    <updated>2019-09-23T15:36:45.443Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 题目</p><p>请编写一个JavaScript 函数toRGB，它的作用是转换CSS中常用的颜色编码。 要求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(toRGB(<span class="string">"#0000FF"</span>));          <span class="comment">// 输出 rgb(0, 0, 255)</span></span><br><span class="line">alert(toRGB(<span class="string">"invalid"</span>));          <span class="comment">// 输出 invalid</span></span><br><span class="line">alert(toRGB(<span class="string">"#G00"</span>));              <span class="comment">// 输出 #G00</span></span><br></pre></td></tr></table></figure><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">"#0000FF"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toRGB</span>(<span class="params">color</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^#([0-9a-fA-F]&#123;2&#125;)([0-9a-fA-F]&#123;2&#125;)([0-9a-fA-F]&#123;2&#125;)$/</span>;</span><br><span class="line"><span class="keyword">var</span> match = color.match(regex);</span><br><span class="line"><span class="keyword">return</span> match ?  <span class="string">'rgb('</span> + <span class="built_in">parseInt</span>(match[<span class="number">1</span>] ,<span class="number">16</span>) + <span class="string">','</span> + <span class="built_in">parseInt</span>(match[<span class="number">2</span>] ,<span class="number">16</span>) + <span class="string">','</span> + <span class="built_in">parseInt</span>(match[<span class="number">3</span>] ,<span class="number">16</span>) + <span class="string">')'</span> : color</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">toRGB(color)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 题目&lt;/p&gt;
&lt;p&gt;请编写一个JavaScript 函数toRGB，它的作用是转换CSS中常用的颜色编码。 要求：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
      <category term="面试题" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题：作用域</title>
    <link href="http://yoursite.com/2019/09/21/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2019/09/21/前端面试题：作用域/</id>
    <published>2019-09-21T15:20:59.809Z</published>
    <updated>2019-09-21T15:21:48.197Z</updated>
    
    <content type="html"><![CDATA[<p>题目代码如下:求运行出的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> num1 = <span class="number">55</span>;</span><br><span class="line">    <span class="keyword">var</span> num2 = <span class="number">66</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">num,num1</span>) </span>&#123;</span><br><span class="line">        num = <span class="number">100</span>;</span><br><span class="line">        num1 = <span class="number">100</span>;</span><br><span class="line">        num2 = <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(num);</span><br><span class="line">        <span class="built_in">console</span>.log(num1);</span><br><span class="line">        <span class="built_in">console</span>.log(num2);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     f1(num1,num2);</span><br><span class="line">     <span class="built_in">console</span>.log(num1);</span><br><span class="line">     <span class="built_in">console</span>.log(num2);</span><br><span class="line">     <span class="built_in">console</span>.log(num);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>分析代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码首先声明了num1,num2,函数f1，接着调用f1</span></span><br><span class="line"> &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">       <span class="keyword">var</span> num1 = <span class="number">55</span>;</span><br><span class="line">       <span class="keyword">var</span> num2 = <span class="number">66</span>; <span class="comment">//=&gt;var num2 = 100</span></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">num,num1</span>) </span>&#123; </span><br><span class="line"><span class="comment">//传入num,num1相当于在函数中定义了num,num1；</span></span><br><span class="line">           <span class="comment">// var num = 55;=&gt;100</span></span><br><span class="line">           <span class="comment">// var num1 = 66;=&gt;100</span></span><br><span class="line"></span><br><span class="line">           num = <span class="number">100</span>;<span class="comment">//将函数中num改为100</span></span><br><span class="line">           num1 = <span class="number">100</span>;<span class="comment">//将函数中num1改为100</span></span><br><span class="line">           num2 = <span class="number">100</span>;<span class="comment">//函数中找不到num2，则找到全局定义的num2改为100</span></span><br><span class="line">           <span class="built_in">console</span>.log(num);<span class="comment">//函数内num 100</span></span><br><span class="line">           <span class="built_in">console</span>.log(num1);<span class="comment">//函数内num1 100</span></span><br><span class="line">           <span class="built_in">console</span>.log(num2);<span class="comment">//函数内num2 100</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        f1(num1,num2);</span><br><span class="line">        <span class="comment">// 函数内的是局部作用域调用不到，所以下面打印出来的是全局作用域里的</span></span><br><span class="line">        <span class="built_in">console</span>.log(num1);<span class="comment">//55</span></span><br><span class="line">        <span class="built_in">console</span>.log(num2);<span class="comment">//全局的被修改为100，所以这里打印出来的也是100</span></span><br><span class="line">        <span class="built_in">console</span>.log(num);<span class="comment">//全局作用域里没有这个，找不到报错</span></span><br><span class="line">   &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://img-blog.csdnimg.cn/20190911101357766.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目代码如下:求运行出的结果&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s
      
    
    </summary>
    
      <category term="面试题" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>栈和堆的区别 栈和堆的区别</title>
    <link href="http://yoursite.com/2019/09/20/%E6%A0%88%E5%92%8C%E5%A0%86%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/09/20/栈和堆的区别/</id>
    <published>2019-09-20T15:11:57.112Z</published>
    <updated>2019-09-20T15:13:47.147Z</updated>
    
    <content type="html"><![CDATA[<p>﻿### 一、程序的内存分配方式不同</p><ul><li>栈区（stack）：<strong>编译器自动分配释放</strong>，存放函数的参数值，局部变量的值等，其操作方式类似于数据结构的栈。</li><li>堆区（heap）：<strong>一般是由程序员分配释放</strong>，若程序员不释放的话，程序结束时可能由OS回收，值得注意的是他与数据结构的堆是两回事，分配方式倒是类似于数据结构的链表。<h3 id="二、申请方式不同"><a href="#二、申请方式不同" class="headerlink" title="二、申请方式不同"></a>二、申请方式不同</h3></li><li>stack 由系统自动分配，heap 需要程序员自己申请。</li><li>C 中用函数 malloc分配空间，用 free 释放，C++用 new 分配，用 delete 释放。<h3 id="三、申请后系统的响应不同"><a href="#三、申请后系统的响应不同" class="headerlink" title="三、申请后系统的响应不同"></a>三、申请后系统的响应不同</h3></li><li>栈：只要栈的剩余空间大于所申请的空间，系统将为程序提供内存，否则将报异常提示栈溢出。</li><li>堆：首先应该知道操作系统有一个记录内存地址的<strong>链表</strong>，当系统收到程序的申请时，遍历该链表，寻找第一个空间大于所申请的空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序。另外，对于大多数系统，会在这块内存空间中的首地址处<strong>记录本次分配的大小</strong>，这样代码中的 delete 或 free 语句就能够正确的释放本内存空间。另外，由于找到的堆结点的大小不一定正好等于申请的大小，系统会将多余的那部分重新放入空闲链表中。<h3 id="四、-申请的大小限制不同"><a href="#四、-申请的大小限制不同" class="headerlink" title="四、 申请的大小限制不同"></a>四、 申请的大小限制不同</h3></li><li>栈：在 windows 下，栈是<strong>向低地址扩展</strong>的数据结构，是一块<strong>连续的内存区域</strong>，栈顶的地址和栈的最大容量是系统预先规定好的，能从栈获得的空间较小。</li><li>堆：堆是<strong>向高地址扩展</strong>的数据结构，是<strong>不连续的内存区域</strong>，这是由于系统是由链表在存储空闲内存地址，自然堆就是不连续的内存区域，且链表的遍历也是从低地址向高地址遍历的，堆得大小受限于计算机系统的<strong>有效虚拟内存空间</strong>，由此空间，堆获得的空间比较灵活，也比较大。<h3 id="五、申请的效率不同"><a href="#五、申请的效率不同" class="headerlink" title="五、申请的效率不同"></a>五、申请的效率不同</h3></li><li>栈：栈由系统自动分配，<strong>速度快</strong>，但是程序员<strong>无法控制</strong>。</li><li>堆：堆是有程序员<strong>自己分配</strong>，<strong>速度较慢</strong>，容易产生碎片，不过用起来方便。<h3 id="六、堆和栈的存储内容不同"><a href="#六、堆和栈的存储内容不同" class="headerlink" title="六、堆和栈的存储内容不同"></a>六、堆和栈的存储内容不同</h3></li><li>栈：在函数调用时，<strong>第一个进栈的是主函数中函数调用后的下一条指令的地址</strong>，然后函数的各个参数，在大多数的 C 编译器中，参数是从右往左入栈的，当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令。</li><li>堆：<strong>一般是在堆的头部用一个字节存放堆的大小</strong>，具体内容由程序员安排。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿### 一、程序的内存分配方式不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;栈区（stack）：&lt;strong&gt;编译器自动分配释放&lt;/strong&gt;，存放函数的参数值，局部变量的值等，其操作方式类似于数据结构的栈。&lt;/li&gt;
&lt;li&gt;堆区（heap）：&lt;strong&gt;一般是由程序员分配
      
    
    </summary>
    
      <category term="计算机基础" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>前端面试题：封装函数进行字符串驼峰命名的转换</title>
    <link href="http://yoursite.com/2019/09/17/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E5%B0%81%E8%A3%85%E5%87%BD%E6%95%B0%E8%BF%9B%E8%A1%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A9%BC%E5%B3%B0%E5%91%BD%E5%90%8D%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>http://yoursite.com/2019/09/17/前端面试题：封装函数进行字符串驼峰命名的转换/</id>
    <published>2019-09-17T15:09:22.794Z</published>
    <updated>2019-09-17T15:09:55.823Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 题目：封装函数进行字符串驼峰命名的转换</p><p><strong>解：代码如下：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params">foo</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> foo = foo;</span><br><span class="line">        <span class="keyword">var</span> arr = foo.split(<span class="string">'-'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">            arr[i] = arr[i].charAt(<span class="number">0</span>).toUpperCase() + arr[i].substr(<span class="number">1</span>,arr[length<span class="number">-1</span>])</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span>(arr.join(<span class="string">''</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(toString( <span class="string">"get-element-by-id"</span>)) <span class="comment">//结果：getElementById</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>补充：<br>split() 方法用于把一个字符串分割成字符串数组。<br>charAt() 方法可返回指定位置的字符。<br>toUpperCase() 方法用于把字符串转换为大写。<br>substr() 方法可在字符串中抽取从 start 下标开始的指定数目的字符。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 题目：封装函数进行字符串驼峰命名的转换&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解：代码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="面试题" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>React项目--如何mock数据？</title>
    <link href="http://yoursite.com/2019/09/15/React%E9%A1%B9%E7%9B%AE--%E5%A6%82%E4%BD%95mock%E6%95%B0%E6%8D%AE%EF%BC%9F/"/>
    <id>http://yoursite.com/2019/09/15/React项目--如何mock数据？/</id>
    <published>2019-09-15T08:13:54.102Z</published>
    <updated>2019-09-15T08:15:05.299Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 前言</p><p>在开发项目时，前端需要和后端对接数据，但有时后端并没有写好数据，前端还需要继续往下开发，这时候就需要mock数据了。</p><h2 id="如何mock数据？"><a href="#如何mock数据？" class="headerlink" title="如何mock数据？"></a>如何mock数据？</h2><p>如下代码，在input获得焦点时调用getList()方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapDispathToProps = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        handleInputFocus() &#123;</span><br><span class="line">            dispatch(actionCreators.getList())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>getList()方法是通过Ajax获取数据，此时后端并没有写好，所以自己mock一个数据。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getList = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">        axios.get(<span class="string">'/api/headerList.json'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> data = res.data;</span><br><span class="line">            <span class="built_in">console</span>.log(data)</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'error'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>axios.get(&#39;/api/headerList.json&#39;)</code>这句代码，计算机会首先去src目录下寻找<code>/api/headerList.json</code>,没有找到然后去<code>public</code>目录下找，此时我们在public目录下建立<code>/api/headerList.json</code>文件，文件如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"success"</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"data"</span>:[<span class="string">"微信"</span>,<span class="string">"支付宝"</span>,<span class="string">"蚂蚁金服"</span>,<span class="string">"被骗"</span>,<span class="string">"借呗"</span>,<span class="string">"诈骗"</span>,<span class="string">"盗窃"</span>,<span class="string">"pandas"</span>,<span class="string">"TensorFlow"</span>,<span class="string">"PyTorch"</span>,<span class="string">"Caffe"</span>,<span class="string">"scikit-learn"</span>,<span class="string">"Python"</span>,<span class="string">"Keras"</span>,<span class="string">"pyecharts"</span>,<span class="string">"ggplot"</span>,<span class="string">"Matplotlib"</span>,<span class="string">"Gensim"</span>,<span class="string">"Bokeh"</span>,<span class="string">"Theano"</span>,<span class="string">"Scrapy"</span>,<span class="string">"SciPy"</span>,<span class="string">"Plotly"</span>,<span class="string">"NumPy"</span>,<span class="string">"XGBoost"</span>,<span class="string">"是"</span>,<span class="string">"他"</span>,<span class="string">"有"</span>,<span class="string">"光大永明"</span>,<span class="string">"我"</span>,<span class="string">"要"</span>,<span class="string">"人"</span>,<span class="string">"Android"</span>,<span class="string">"女"</span>,<span class="string">"大"</span>,<span class="string">"不"</span>,<span class="string">"着"</span>,<span class="string">"男"</span>,<span class="string">"它"</span>,<span class="string">"二"</span>,<span class="string">"于"</span>,<span class="string">"中"</span>,<span class="string">"java"</span>,<span class="string">"把"</span>,<span class="string">"上"</span>,<span class="string">"这"</span>,<span class="string">"下"</span>,<span class="string">"的"</span>,<span class="string">"了"</span>,<span class="string">"来"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时返回的数据就是以上数据，通过<code>console.log(res.data)</code>打印数据如下图：<br><img src="https://img-blog.csdnimg.cn/20190907154121149.png" alt="在这里插入图片描述"></p><p>这样mock数据就成功了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 前言&lt;/p&gt;
&lt;p&gt;在开发项目时，前端需要和后端对接数据，但有时后端并没有写好数据，前端还需要继续往下开发，这时候就需要mock数据了。&lt;/p&gt;
&lt;h2 id=&quot;如何mock数据？&quot;&gt;&lt;a href=&quot;#如何mock数据？&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="mock数据" scheme="http://yoursite.com/tags/mock%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题：值类型和引用类型的传递</title>
    <link href="http://yoursite.com/2019/09/13/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%BC%A0%E9%80%92/"/>
    <id>http://yoursite.com/2019/09/13/前端面试题：值类型和引用类型的传递/</id>
    <published>2019-09-13T09:40:42.593Z</published>
    <updated>2019-09-13T09:41:55.166Z</updated>
    
    <content type="html"><![CDATA[<p>﻿题目如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,salary</span>) </span>&#123; </span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">      <span class="keyword">this</span>.salary = salary;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">person</span>) </span>&#123; </span><br><span class="line">       person.name = <span class="string">"ls"</span>;</span><br><span class="line">       person = <span class="keyword">new</span> Person(<span class="string">"aa"</span>,<span class="number">18</span>,<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">"zs"</span>,<span class="number">18</span>,<span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(p.name);</span><br><span class="line">    f1(p);</span><br><span class="line">    <span class="built_in">console</span>.log(p.name)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>分析代码：首先定义了一个构造函数Person，然后定义了一个普通函数f1，<code>var p = new Person(&quot;zs&quot;,18,1000);</code>这句话new了一个对象，所以第一个打印出来的是：zs;<br><code>f1(p);</code>这句话把p这个对象传入f1，<code>person.name = &quot;ls&quot;;</code>把p的name属性改为”ls”,<br><code>person = new Person(&quot;aa&quot;,18,10);</code>这句话重新new了一个对象，并且把person指向到了这个新的对象上，但这对p没有影响，所以最后打印出来的是”ls”</p></blockquote><p>画图说明：<br><img src="https://img-blog.csdnimg.cn/20190911104818340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>结果：<br><img src="https://img-blog.csdnimg.cn/20190911105447374.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿题目如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;
      
    
    </summary>
    
      <category term="面试题" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>redux的工作流程以及subscribe的作用</title>
    <link href="http://yoursite.com/2019/09/03/redux%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E4%BB%A5%E5%8F%8Asubscribe%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://yoursite.com/2019/09/03/redux的工作流程以及subscribe的作用/</id>
    <published>2019-09-03T14:34:40.392Z</published>
    <updated>2019-09-03T14:37:57.753Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## redux的工作流程</p><ol><li>使用函数createStore创建store数据点</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducer'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">    reducer,</span><br><span class="line">    <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION__()</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建Reducer。它要改变的组件，它获取state和action，生成新的state</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CHANGE_INPUT_VALUE,ADD_TODO_ITEM,DELETE_TODO_ITEM &#125; <span class="keyword">from</span> <span class="string">'./actionTpyes'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultState = &#123;</span><br><span class="line">     inputValue:<span class="string">''</span>,</span><br><span class="line">     list: []</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// reducer 可以接收state，但是绝不能修改state</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state = defaultState,action) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(action.type === CHANGE_INPUT_VALUE) &#123;</span><br><span class="line">        <span class="keyword">const</span> newState = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(state));</span><br><span class="line">        newState.inputValue = action.value;</span><br><span class="line">        <span class="keyword">return</span> newState</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(action.type === ADD_TODO_ITEM) &#123;</span><br><span class="line">        <span class="keyword">const</span> newState = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(state));</span><br><span class="line">        newState.list.push(newState.inputValue);</span><br><span class="line">        newState.inputValue = <span class="string">''</span></span><br><span class="line">        <span class="keyword">return</span> newState</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(action.type ===  DELETE_TODO_ITEM) &#123;</span><br><span class="line">        <span class="keyword">const</span> newState = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(state));</span><br><span class="line">        newState.list.splice(action.index,<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> newState</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>用subscribe监听每次修改情况</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    store.subscribe(<span class="keyword">this</span>.handleStoreChange)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>dispatch执行，reducer(currentState,action)处理当前dispatch后的传入的action.type并返回给currentState处理后的state，通过currentListeners.forEach(v=&gt;v())执行监听函数，并最后返回当前 action状态</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">handleItemDelete(index) &#123;</span><br><span class="line">    <span class="keyword">const</span> action = &#123;</span><br><span class="line">        type: DELETE_TODO_ITEM,</span><br><span class="line">        index</span><br><span class="line">    &#125;</span><br><span class="line">    store.dispatch(action)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="subscribe的作用"><a href="#subscribe的作用" class="headerlink" title="subscribe的作用"></a>subscribe的作用</h2><p>subscribe 这个函数是用来去订阅 store 的变化，比如你每次对 store 进行 dispatch(action) 都会触发 subscribe 注册的函数调用，这个在实际情况不是必须要的，看自己的应用场景，比如你想监控 store 的全局变化时 可以用 subscript 订阅一下，然后作一些反应</p><p>每次通过dispatch 修改数据的时候，其实只是数据发生了变化，如果不手动调用 render方法，页面上的内容是不会发生变化的。</p><p>但是每次dispatch之后都手动调用很麻烦啊，所以就使用了发布订阅模式，监听数据变化来自动渲染。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## redux的工作流程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用函数createStore创建store数据点&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="redux的工作流程" scheme="http://yoursite.com/tags/redux%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>一张图理清React中的生命周期</title>
    <link href="http://yoursite.com/2019/08/24/%E4%B8%80%E5%BC%A0%E5%9B%BE%E7%90%86%E6%B8%85React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/08/24/一张图理清React生命周期函数/</id>
    <published>2019-08-24T09:04:51.212Z</published>
    <updated>2019-08-24T09:05:48.313Z</updated>
    
    <content type="html"><![CDATA[<p><strong>生命周期函数是指在某一时刻组件会自动调用执行的函数。</strong><br><img src="https://img-blog.csdnimg.cn/20190824165935974.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;生命周期函数是指在某一时刻组件会自动调用执行的函数。&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190824165935974.jpg?x-oss-process=image/watermark,
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="生命周期" scheme="http://yoursite.com/tags/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>用vue-cli脚手架开发APP的步骤</title>
    <link href="http://yoursite.com/2019/08/09/%E7%94%A8vue-cli%E8%84%9A%E6%89%8B%E6%9E%B6%E5%BC%80%E5%8F%91APP%E7%9A%84%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2019/08/09/用vue-cli脚手架开发APP的步骤/</id>
    <published>2019-08-09T08:47:41.711Z</published>
    <updated>2019-08-09T08:49:31.415Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 前言</p><p>本文主要记录vue-cli脚手架开发app的步骤，如果还未安装vue-cli的请查看<a href="https://cli.vuejs.org/zh/guide/installation.html" target="_blank" rel="noopener">vue-cli官方文档</a>有详细过程。</p><p>项目地址：<a href="https://github.com/OYZQ/vue-cli-dome/settings" target="_blank" rel="noopener">vue-cli-demo</a></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>点击链接实现界面跳转，下方底部可以改成导航栏，中间内容自己修改。<br><img src="https://img-blog.csdnimg.cn/20190730163620742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190730163639685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1-创建模板"><a href="#1-创建模板" class="headerlink" title="1.创建模板"></a>1.创建模板</h3><p>运行以下命令来创建一个新项目(项目名自己随意)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create test3</span><br></pre></td></tr></table></figure><p>你会被提示选取一个 preset。你可以选默认的包含了基本的 Babel + ESLint 设置的 preset，也可以选“手动选择特性”来选取需要的特性。这里直接回车即可。<br><img src="https://img-blog.csdnimg.cn/20190730155849487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>等待下载，下载完会看到看到如下图所示，根据提示，<code>cd hello-world</code>进入目录，然后<code>npm run serve</code>启动<br><img src="https://img-blog.csdnimg.cn/20190730160448365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>启动好，默认8080端口，用浏览器打开网址，就可以看到vue-cli的模板启动成功<br><img src="https://img-blog.csdnimg.cn/20190730160534851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-删除无用文件"><a href="#2-删除无用文件" class="headerlink" title="2.删除无用文件"></a>2.删除无用文件</h3><p>用编辑器打开项目文件，看到目录结构如下：<br><img src="https://img-blog.csdnimg.cn/20190730160708561.png" alt="在这里插入图片描述"><br>src/assets下面图片就是打开页面的logo图片没用可以连带着assets目录一起删除。</p><p>src/components下面有一个HelloWorld.vue文件就是刚才浏览器打开的页面可以删除。</p><p>src下面的App.vue文件修改如下：<br>只留下简单框架，内容都删了<br><img src="https://img-blog.csdnimg.cn/20190730161137575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>public/index.html修改如下：<br>也只留下简单模板<br><img src="https://img-blog.csdnimg.cn/20190730161300500.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后浏览器页面一片空白，可以开始写代码</p><h3 id="3-写代码"><a href="#3-写代码" class="headerlink" title="3.写代码"></a>3.写代码</h3><p>components下面随意写几个页面，目录结构如下：<br><img src="https://img-blog.csdnimg.cn/20190730161850418.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190730161946928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后实现路由跳转使用<code>vue-router</code>,首先<code>npm install vue-router --save</code>安装<br><img src="https://img-blog.csdnimg.cn/20190730162214442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在src下建src/router/router.js文件管理路由，注册路由<br><img src="https://img-blog.csdnimg.cn/20190730162342265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后在src下面的main.js里面引用，并且挂载<br><img src="https://img-blog.csdnimg.cn/20190730162504149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最后一步，修改App.vue文件<br>只是加了一行代码，router-view 可以当做是一个容器，它渲染的组件是你使用 vue-router 指定的。<br><img src="https://img-blog.csdnimg.cn/20190730163038223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 前言&lt;/p&gt;
&lt;p&gt;本文主要记录vue-cli脚手架开发app的步骤，如果还未安装vue-cli的请查看&lt;a href=&quot;https://cli.vuejs.org/zh/guide/installation.html&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="用vue-cli脚手架开发APP的步骤" scheme="http://yoursite.com/tags/%E7%94%A8vue-cli%E8%84%9A%E6%89%8B%E6%9E%B6%E5%BC%80%E5%8F%91APP%E7%9A%84%E6%AD%A5%E9%AA%A4/"/>
    
  </entry>
  
  <entry>
    <title>关于Img标签绑定_src不显示图片</title>
    <link href="http://yoursite.com/2019/08/08/%E5%85%B3%E4%BA%8EImg%E6%A0%87%E7%AD%BE%E7%BB%91%E5%AE%9A_src%E4%B8%8D%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/2019/08/08/关于Img标签绑定_src不显示图片/</id>
    <published>2019-08-08T10:57:05.717Z</published>
    <updated>2019-08-08T10:58:18.908Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 问题</p><p>如下图所示动态绑定src，不显示图片，将路径换成网络图片地址又可以显示<br><img src="https://img-blog.csdnimg.cn/20190731163052166.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190731163059508.png" alt="在这里插入图片描述"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>引用本地图片需要加上require，使用require定义之后，就可以动态使用了，不用require你就只能写死的。不用 :src=”‘../img/image.jpg’” 会被解析为字符串<br><img src="https://img-blog.csdnimg.cn/2019073116330411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 问题&lt;/p&gt;
&lt;p&gt;如下图所示动态绑定src，不显示图片，将路径换成网络图片地址又可以显示&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190731163052166.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;br&gt;&lt;im
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="关于Img标签绑定" scheme="http://yoursite.com/tags/%E5%85%B3%E4%BA%8EImg%E6%A0%87%E7%AD%BE%E7%BB%91%E5%AE%9A/"/>
    
  </entry>
  
  <entry>
    <title>轮播插件vue-awesome-swiper的使用方法</title>
    <link href="http://yoursite.com/2019/08/04/%E8%BD%AE%E6%92%AD%E6%8F%92%E4%BB%B6vue-awesome-swiper%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/08/04/轮播插件vue-awesome-swiper的使用方法/</id>
    <published>2019-08-04T08:30:29.751Z</published>
    <updated>2019-08-04T08:31:13.594Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 前言</p><p>在使用vue框架写项目时，轮播图是经常需要用到的，在这里推荐一款vue的轮播图插件vue-awesome-swiper。支持多种样式，<a href="https://surmon-china.github.io/vue-awesome-swiper/" target="_blank" rel="noopener">点击样式预览</a>。贴上地址：<a href="https://github.com/surmon-china/vue-awesome-swiper" target="_blank" rel="noopener">vue-awesome-swiper</a></p><h2 id="安装引用"><a href="#安装引用" class="headerlink" title="安装引用"></a>安装引用</h2><ol><li><code>npm install vue-awesome-swiper --save</code></li><li>在<code>main.js</code>文件中引入，和<code>vue-router</code>使用差不多<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueAwesomeSwiper <span class="keyword">from</span> <span class="string">'vue-awesome-swiper'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// require styles</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'swiper/dist/css/swiper.css'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueAwesomeSwiper, <span class="comment">/* &#123; default global options &#125; */</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在VUE中经常需要循环遍历图片然后生成轮播图，加上一个动态指示点像这样：<br><img src="https://img-blog.csdnimg.cn/20190801142525287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>代码如下：</p><blockquote><p>js部分是一些设置例如循环播放，间隔时间，指示器设置等<br>这里需要注意的是数据里动态绑定src使用本地图片需要使用require，若使用网络图片则不需要</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swiper</span> <span class="attr">:options</span>=<span class="string">"swiperOption"</span>&gt;</span>//这既是图片轮播</span><br><span class="line">      <span class="tag">&lt;<span class="name">swiper-slide</span> <span class="attr">v-for</span>=<span class="string">"item of swiperlist"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"swiper-img"</span> <span class="attr">:src</span>=<span class="string">"item.imgurl"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">swiper-slide</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-pagination weiz"</span> <span class="attr">slot</span>=<span class="string">"pagination"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      // 上面div是指示器不需要可以删除，要其他样式例如前进后退按钮切换可以自己修改，官方文档都有</span><br><span class="line">    <span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ecmascript-6"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">      swiperlist: [</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          imgurl: <span class="built_in">require</span>(<span class="string">"../../assets/img/banner/1.webp"</span>)</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          imgurl: <span class="built_in">require</span>(<span class="string">"../../assets/img/banner/2.webp"</span>)</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          imgurl: <span class="built_in">require</span>(<span class="string">"../../assets/img/banner/3.webp"</span>)</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          imgurl: <span class="built_in">require</span>(<span class="string">"../../assets/img/banner/4.webp"</span>)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      ],</span></span><br><span class="line"><span class="undefined">      swiperOption: &#123;</span></span><br><span class="line"><span class="undefined">        pagination: &#123;</span></span><br><span class="line"><span class="javascript">          el: <span class="string">".swiper-pagination"</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        autoplay: &#123;</span></span><br><span class="line"><span class="undefined">          delay: 3000,</span></span><br><span class="line"><span class="javascript">          disableOninteraction: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        loop: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 前言&lt;/p&gt;
&lt;p&gt;在使用vue框架写项目时，轮播图是经常需要用到的，在这里推荐一款vue的轮播图插件vue-awesome-swiper。支持多种样式，&lt;a href=&quot;https://surmon-china.github.io/vue-awesome-swip
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue-awesome-swiper" scheme="http://yoursite.com/tags/vue-awesome-swiper/"/>
    
  </entry>
  
  <entry>
    <title>自适应方案：在vue项目中使用postcss-px2rem</title>
    <link href="http://yoursite.com/2019/08/04/%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88%EF%BC%9A%E5%9C%A8vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8postcss-px2rem/"/>
    <id>http://yoursite.com/2019/08/04/自适应方案：在vue项目中使用postcss-px2rem/</id>
    <published>2019-08-04T08:29:18.201Z</published>
    <updated>2019-08-04T08:30:21.371Z</updated>
    
    <content type="html"><![CDATA[<p>﻿在src目录下创建 viewport.js</p><p>文件下载：<a href="https://github.com/imochen/hotcss/tree/master/src" target="_blank" rel="noopener">https://github.com/imochen/hotcss/tree/master/src</a></p><p>这个JS是用来在页面打开的时候给HTML根加上适配的字体大小</p><p>然后在main.js下添加：</p><p><code>import &#39;./viewport.js&#39;</code></p><p><strong>这里强调下为什么不使用lib-flexible插件</strong><br>个人在使用lib-flexible插件时，感觉没hotcss友好，<br>lib-flexible在页面打开的时候，内容渲染完了才在HTML根上添加适配，这样页面会重新渲染一次，导致内容从大变小，或从小变大这样的BUG。<br>而hotcss就没这个问题。</p><p>接下来要安装换算PX换算REM插件<br><code>cnpm install postcss-px2rem --save</code><br>然后在 <code>vue.config.js</code>加入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    lintOnSave: <span class="literal">false</span>,<span class="comment">//关闭eslint</span></span><br><span class="line">    css: &#123;</span><br><span class="line">        loaderOptions: &#123;</span><br><span class="line">            postcss: &#123;</span><br><span class="line">                plugins: [</span><br><span class="line">                    <span class="built_in">require</span>(<span class="string">'postcss-px2rem'</span>)(&#123;<span class="attr">remUnit</span>: <span class="number">75</span>&#125;), <span class="comment">// 换算的基数</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后重启</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿在src目录下创建 viewport.js&lt;/p&gt;
&lt;p&gt;文件下载：&lt;a href=&quot;https://github.com/imochen/hotcss/tree/master/src&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://git
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="postcss-px2rem" scheme="http://yoursite.com/tags/postcss-px2rem/"/>
    
  </entry>
  
  <entry>
    <title>router-link-active 与 router-link-exact-active 区别</title>
    <link href="http://yoursite.com/2019/07/28/router-link-active%20%E4%B8%8E%20router-link-exact-active%20%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/07/28/router-link-active 与 router-link-exact-active 区别/</id>
    <published>2019-07-28T07:22:08.070Z</published>
    <updated>2019-07-28T08:25:02.255Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## router-link-exact-active</p><p>router-link-exact-active 是精确匹配规则，即只有当前点击router被匹配</p><h2 id="router-link-active"><a href="#router-link-active" class="headerlink" title="router-link-active"></a>router-link-active</h2><p>router-link-active 默认是全包含匹配规则，即path名全包含在当前router path名开头的router也会被匹配到。</p><p>　　　　　　　1. \<router-link to="/"></router-link></p><p>　　　　　　　2. \<router-link to="/a"></router-link></p><p>　　　　　　　3. \<router-link to="/b"></router-link></p><p>　　　　　　　4. \<router-link to="/ab"></router-link></p><p>　　　　　　　2/3号被选中 1号也会被匹配到router-link-active，4号被选中1号2号两个也会被匹配到router-link-active。</p><p>　　　　　　　<strong>可以通过在router添加exact属性改变为精精确匹配。</strong></p><p>我遇到两个router同时匹配class：router-link-active 的情况，而我预期是被点击的router匹配。查了官方文档得知<br><img src="https://img-blog.csdnimg.cn/2019072615391839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## router-link-exact-active&lt;/p&gt;
&lt;p&gt;router-link-exact-active 是精确匹配规则，即只有当前点击router被匹配&lt;/p&gt;
&lt;h2 id=&quot;router-link-active&quot;&gt;&lt;a href=&quot;#router-li
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="router-link" scheme="http://yoursite.com/tags/router-link/"/>
    
  </entry>
  
  <entry>
    <title>webpack打包进行丑化压缩遇到（TypeError_ Cannot read property &#39;compilation&#39; of undefined）问题</title>
    <link href="http://yoursite.com/2019/07/27/webpack%E6%89%93%E5%8C%85%E8%BF%9B%E8%A1%8C%E4%B8%91%E5%8C%96%E5%8E%8B%E7%BC%A9%E9%81%87%E5%88%B0%EF%BC%88TypeError_%20Cannot%20read%20property%20&#39;compilation&#39;%20of%20undefined%EF%BC%89%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/07/27/webpack打包进行丑化压缩遇到（TypeError_ Cannot read property &#39;compilation&#39; of undefined）问题/</id>
    <published>2019-07-27T09:06:19.036Z</published>
    <updated>2019-07-27T09:07:03.187Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 问题</p><p>在使用vue官方推荐打包插件UglifyjsWebpackPlugin对webpack打包时遇到TypeError: Cannot read property ‘compilation’ of undefined<br><img src="https://img-blog.csdnimg.cn/20190726134626808.png" alt="在这里插入图片描述"></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>很明显，这是node一些包的版本对应不上的问题</p><p>将项目中的该包升级或者降级到1.0.0版本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i uglifyjs-webpack-plugin@<span class="number">1.0</span><span class="number">.0</span> --save</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190726134816951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDY4NTUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 问题&lt;/p&gt;
&lt;p&gt;在使用vue官方推荐打包插件UglifyjsWebpackPlugin对webpack打包时遇到TypeError: Cannot read property ‘compilation’ of undefined&lt;br&gt;&lt;img src=&quot;htt
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="问题" scheme="http://yoursite.com/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>vue动态绑定class</title>
    <link href="http://yoursite.com/2019/07/22/vue%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9Aclass/"/>
    <id>http://yoursite.com/2019/07/22/vue动态绑定class/</id>
    <published>2019-07-22T15:16:56.688Z</published>
    <updated>2019-07-22T15:17:59.050Z</updated>
    
    <content type="html"><![CDATA[<p>﻿#### 1.v-bind:class 一个对象，以动态地切换 class：</p><p>动态绑定active类，当isactive == index为true时使用active类<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"&#123;'active':isactive == index&#125;"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="2-data数据中定义isactive"><a href="#2-data数据中定义isactive" class="headerlink" title="2.data数据中定义isactive"></a>2.data数据中定义isactive</h4><p>定义isactive并且初始化<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    isactive:<span class="number">0</span>,</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-样式动态绑定对象"><a href="#3-样式动态绑定对象" class="headerlink" title="3.样式动态绑定对象"></a>3.样式动态绑定对象</h4><p>在p标签父元素上绑定了点击事件click()，点击时isactive赋值，使isactive == index，则active类生效<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  click(index)&#123;</span><br><span class="line">    <span class="keyword">this</span>.isactive = index;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿#### 1.v-bind:class 一个对象，以动态地切换 class：&lt;/p&gt;
&lt;p&gt;动态绑定active类，当isactive == index为true时使用active类&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue动态绑定class" scheme="http://yoursite.com/tags/vue%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9Aclass/"/>
    
  </entry>
  
  <entry>
    <title>js实现简易计算器</title>
    <link href="http://yoursite.com/2019/07/18/js%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    <id>http://yoursite.com/2019/07/18/js实现简易计算器/</id>
    <published>2019-07-18T12:37:44.209Z</published>
    <updated>2019-07-18T12:39:00.206Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 前言</p><p>今天一个朋友写计算器遇到写bug，帮他解决也花了一些时间，就顺便记录一下吧！</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p><a href="https://www.oyzq.club/counter/counter.html" target="_blank" rel="noopener">在线预览</a></p><p>实现主要是那几行js代码，像html,css部分并没有太大关系。<br>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>简易计算器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    * &#123;</span></span><br><span class="line"><span class="undefined">      padding: 0;</span></span><br><span class="line"><span class="undefined">      margin: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    body,</span></span><br><span class="line"><span class="undefined">    html &#123;</span></span><br><span class="line"><span class="undefined">      background-color: pink;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .column &#123;</span></span><br><span class="line"><span class="undefined">      position: relative;</span></span><br><span class="line"><span class="undefined">      border: 5px solid #fff;</span></span><br><span class="line"><span class="undefined">      width: 400px;</span></span><br><span class="line"><span class="undefined">      height: 500px;</span></span><br><span class="line"><span class="undefined">      margin: 100px auto;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .column .co-top .add &#123;</span></span><br><span class="line"><span class="undefined">      font-size: 24px;</span></span><br><span class="line"><span class="undefined">      font-weight: bold;</span></span><br><span class="line"><span class="undefined">      margin: 4px;</span></span><br><span class="line"><span class="undefined">      display: block;</span></span><br><span class="line"><span class="undefined">      width: 388px;</span></span><br><span class="line"><span class="undefined">      height: 100px;</span></span><br><span class="line"><span class="undefined">      background-color: pink;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    button &#123;</span></span><br><span class="line"><span class="undefined">      border: 2px solid #fff;</span></span><br><span class="line"><span class="undefined">      height: 50px;</span></span><br><span class="line"><span class="undefined">      width: 90px;</span></span><br><span class="line"><span class="undefined">      background-color: pink;</span></span><br><span class="line"><span class="undefined">      margin-bottom: 8px;</span></span><br><span class="line"><span class="undefined">      font-weight: bolder;</span></span><br><span class="line"><span class="undefined">      font-size: 20px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .co-bottom &#123;</span></span><br><span class="line"><span class="undefined">      margin-top: 30px;</span></span><br><span class="line"><span class="undefined">      position: absolute;</span></span><br><span class="line"><span class="undefined">      left: 50%;</span></span><br><span class="line"><span class="undefined">      border: 2px solid #fff;</span></span><br><span class="line"><span class="undefined">      margin-left: -199px;</span></span><br><span class="line"><span class="undefined">      width: 388px;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .column .co-top .clear &#123;</span></span><br><span class="line"><span class="undefined">      margin-left: 100px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"co-top"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"add"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">id</span>=<span class="string">"add"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"clear"</span> <span class="attr">onclick</span>=<span class="string">"clears()"</span>&gt;</span>CLEAR<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"delete"</span> <span class="attr">onclick</span>=<span class="string">"deletes()"</span>&gt;</span>DELETE<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"co-bottom"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"num"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"num"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">num</span>&gt;</span>3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"options num"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"num"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"num"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"num"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"options num"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">'num'</span>&gt;</span>7<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">'num'</span>&gt;</span>8<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">'num'</span>&gt;</span>9<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"options num"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">'num'</span>&gt;</span>.<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"num"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"options num"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"dengyu"</span> <span class="attr">id</span>=<span class="string">"dengyu"</span> <span class="attr">onclick</span>=<span class="string">"dengyu()"</span>&gt;</span>=<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    var arr = [];</span></span><br><span class="line"><span class="undefined">    var temp = '';</span></span><br><span class="line"><span class="undefined">    var x;</span></span><br><span class="line"><span class="undefined">    var result = document.getElementById("add");</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    function getButton() &#123;</span></span><br><span class="line"><span class="undefined">      var btns = document.getElementsByClassName("num");</span></span><br><span class="line"><span class="undefined">      for (let i = 0; i &lt; btns.length; i++) &#123;</span></span><br><span class="line"><span class="undefined">        btns[i].onclick = function () &#123;</span></span><br><span class="line"><span class="undefined">          x = btns[i].innerHTML;</span></span><br><span class="line"><span class="undefined">          arr.push(x);</span></span><br><span class="line"><span class="undefined">          result.value = temp + arr.join('');</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    getButton();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    function dengyu() &#123;</span></span><br><span class="line"><span class="undefined">      result.value = eval(result.value);</span></span><br><span class="line"><span class="undefined">      temp = result.value;</span></span><br><span class="line"><span class="undefined">      arr = [];</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    function clears() &#123;</span></span><br><span class="line"><span class="undefined">      result.value = 0;</span></span><br><span class="line"><span class="undefined">      arr = [];</span></span><br><span class="line"><span class="undefined">      temp = '';</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    function deletes() &#123;</span></span><br><span class="line"><span class="undefined">      arr.splice(arr.length-1,1)</span></span><br><span class="line"><span class="undefined">      result.value = temp + arr.join('');</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 前言&lt;/p&gt;
&lt;p&gt;今天一个朋友写计算器遇到写bug，帮他解决也花了一些时间，就顺便记录一下吧！&lt;/p&gt;
&lt;h2 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;h
      
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="js实现简易计算器" scheme="http://yoursite.com/tags/js%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>scss基本使用</title>
    <link href="http://yoursite.com/2019/07/13/scss%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/07/13/scss基本使用/</id>
    <published>2019-07-13T05:17:18.825Z</published>
    <updated>2019-07-13T05:18:10.062Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 前言</p><p>Sass是成熟、稳定、强大的CSS预处理器，而SCSS是Sass3版本当中引入的新语法特性，完全兼容CSS3的同时继承了Sass强大的动态功能。</p><h2 id="特性概览"><a href="#特性概览" class="headerlink" title="特性概览"></a>特性概览</h2><p>CSS书写代码规模较大的Web应用时，容易造成选择器、层叠的复杂度过高，因此推荐通过SASS预处理器进行CSS的开发，SASS提供的变量、嵌套、混合、继承等特性，让CSS的书写更加有趣与程式化。</p><hr><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量用来存储需要在CSS中复用的信息，例如颜色和字体。SASS通过$符号去声明一个变量。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$font-stack: Helvetica, sans-serif;</span><br><span class="line">$primary-color: #333;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">100%</span> $font-stack;</span><br><span class="line">  <span class="attribute">color</span>: $primary-color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面例子中变量\$font-stack和\$primary-color的值将会替换所有引用他们的位置。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">100%</span> Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>; &#125;</span><br></pre></td></tr></table></figure><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><p>SASS允许开发人员以嵌套的方式使用CSS，但是过度的使用嵌套会让产生的CSS难以维护，因此是一种不好的实践，下面的例子表达了一个典型的网站导航样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  ul &#123;</span><br><span class="line">    <span class="selector-tag">margin</span>: 0;</span><br><span class="line">    <span class="selector-tag">padding</span>: 0;</span><br><span class="line">    <span class="selector-tag">list-style</span>: <span class="selector-tag">none</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">li</span> &#123; <span class="attribute">display</span>: inline-block; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家注意上面代码中的ul、li、a选择器都被嵌套在nav选择器当中使用，这是一种书写更高可读性CSS的良好方式，编译后产生的CSS代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none; &#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block; &#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none; &#125;</span><br></pre></td></tr></table></figure><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>SASS能够将代码分割为多个片段，并以underscore风格的下划线作为其命名前缀（_partial.scss），SASS会通过这些下划线来辨别哪些文件是SASS片段，并且不让片段内容直接生成为CSS文件，从而只是在使用@import指令的位置被导入。CSS原生的@import会通过额外的HTTP请求获取引入的样式片段，而SASS的@import则会直接将这些引入的片段合并至当前CSS文件，并且不会产生新的HTTP请求。下面例子中的代码，将会在base.scss文件当中引入_reset.scss片断。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// _reset.scss</span><br><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">ol</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>:  <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// base.scss</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'reset'</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">100%</span> Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#efefef</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SASS中引入片断时，可以缺省使用文件扩展名，因此上面代码中直接通过@import ‘reset’引入，编译后生成的代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">ol</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">100%</span> Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#efefef</span>; &#125;</span><br></pre></td></tr></table></figure><h2 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h2><p>混合（Mixin）用来分组那些需要在页面中复用的CSS声明，开发人员可以通过向Mixin传递变量参数来让代码更加灵活，该特性在添加浏览器兼容性前缀的时候非常有用，SASS目前使用@mixin name指令来进行混合操作。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> border-radius($radius) &#123;</span><br><span class="line">          border-radius: $radius;</span><br><span class="line">      -ms-border-radius: $radius;</span><br><span class="line">     -moz-border-radius: $radius;</span><br><span class="line">  -webkit-border-radius: $radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  @include border-radius(10px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码建立了一个名为border-radius的Mixin，并传递了一个变量$radius作为参数，然后在后续代码中通过@include border-radius(10px)使用该Mixin，最终编译的结果如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">-ms-border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">10px</span>; &#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承是SASS中非常重要的一个特性，可以通过@extend指令在选择器之间复用CSS属性，并且不会产生冗余的代码，下面例子将会通过SASS提供的继承机制建立一系列样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// 这段代码不会被输出到最终生成的CSS文件，因为它没有被任何代码所继承。</span><br><span class="line">%<span class="selector-tag">other-styles</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 下面代码会正常输出到生成的CSS文件，因为它被其接下来的代码所继承。</span><br><span class="line">%<span class="selector-tag">message-common</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.message</span> &#123;</span><br><span class="line">  @extend %message-common;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">  @extend %message-common;</span><br><span class="line">  <span class="selector-tag">border-color</span>: <span class="selector-tag">green</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  @extend %message-common;</span><br><span class="line">  <span class="selector-tag">border-color</span>: <span class="selector-tag">red</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.warning</span> &#123;</span><br><span class="line">  @extend %message-common;</span><br><span class="line">  <span class="selector-tag">border-color</span>: <span class="selector-tag">yellow</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p>SASS提供了标准的算术运算符，例如+、-、*、/、%。在接下来的例子里，我们尝试在aside和article选择器当中对宽度进行简单的计算。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123; <span class="attribute">width</span>: <span class="number">100%</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">article</span><span class="selector-attr">[role="main"]</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span> / <span class="number">960px</span> * <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">aside</span><span class="selector-attr">[role="complementary"]</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span> / <span class="number">960px</span> * <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码以960px为基准建立了简单的流式网格布局，SASS提供的算术运算符让开发人员可以更容易的将像素值转换为百分比，最终生成的CSS样式如下所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">article</span><span class="selector-attr">[role="main"]</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">62.5%</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">aside</span><span class="selector-attr">[role="complementary"]</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">31.25%</span>; &#125;</span><br></pre></td></tr></table></figure><h2 id="CSS扩展"><a href="#CSS扩展" class="headerlink" title="CSS扩展"></a>CSS扩展</h2><hr><h2 id="引用父级选择器”-amp-”"><a href="#引用父级选择器”-amp-”" class="headerlink" title="引用父级选择器”&amp;”"></a>引用父级选择器”&amp;”</h2><p>Scss使用”&amp;”关键字在CSS规则中引用父级选择器，例如在嵌套使用伪类选择器的场景下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*===== SCSS =====*/</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  &amp;:hover &#123; text-decoration: underline; &#125;</span><br><span class="line">  <span class="selector-tag">body</span><span class="selector-class">.firefox</span> &amp; &#123; <span class="attribute">font-weight</span>: normal; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*===== CSS =====*/</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none; &#125;</span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline; &#125;</span><br><span class="line">  <span class="selector-tag">body</span><span class="selector-class">.firefox</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal; &#125;</span><br></pre></td></tr></table></figure><p>无论CSS规则嵌套的深度怎样，关键字”&amp;”都会使用父级选择器级联替换全部其出现的位置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*===== SCSS =====*/</span></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">  a &#123;</span><br><span class="line">    <span class="selector-tag">font-weight</span>: <span class="selector-tag">bold</span>;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*===== CSS =====*/</span></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black; &#125;</span><br><span class="line">  <span class="selector-id">#main</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold; &#125;</span><br><span class="line">    <span class="selector-id">#main</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: red; &#125;</span><br></pre></td></tr></table></figure><p>“&amp;”必须出现在复合选择器开头的位置，后面再连接自定义的后缀，例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*===== SCSS =====*/</span></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">  &amp;-sidebar &#123; border: 1px solid; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*===== CSS =====*/</span></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black; &#125;</span><br><span class="line">  <span class="selector-id">#main-sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid; &#125;</span><br></pre></td></tr></table></figure><p>如果在父级选择器不存在的场景使用&amp;，Scss预处理器会报出错误信息。</p><h2 id="嵌套属性"><a href="#嵌套属性" class="headerlink" title="嵌套属性"></a>嵌套属性</h2><p>CSS许多属性都位于相同的命名空间（例如font-family、font-size、font-weight都位于font命名空间下），Scss当中只需要编写命名空间一次，后续嵌套的子属性都将会位于该命名空间之下，请看下面的代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*===== SCSS =====*/</span></span><br><span class="line"><span class="selector-class">.demo</span> &#123;</span><br><span class="line">  // 命令空间后带有冒号:</span><br><span class="line">  <span class="selector-tag">font</span>: &#123;</span><br><span class="line">    <span class="attribute">family</span>: fantasy;</span><br><span class="line">    <span class="attribute">size</span>: <span class="number">30em</span>;</span><br><span class="line">    <span class="attribute">weight</span>: bold;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*===== CSS =====*/</span></span><br><span class="line"><span class="selector-class">.demo</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: fantasy;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30em</span>;</span><br></pre></td></tr></table></figure><p>命令空间上可以直接书写CSS简写属性，但是日常开发中建议直接书写CSS简写属性，尽量保持CSS语法的一致性。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.demo</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">20px</span>/<span class="number">24px</span> fantasy &#123;</span><br><span class="line">    weight: bold;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.demo</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">20px</span>/<span class="number">24px</span> fantasy;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 前言&lt;/p&gt;
&lt;p&gt;Sass是成熟、稳定、强大的CSS预处理器，而SCSS是Sass3版本当中引入的新语法特性，完全兼容CSS3的同时继承了Sass强大的动态功能。&lt;/p&gt;
&lt;h2 id=&quot;特性概览&quot;&gt;&lt;a href=&quot;#特性概览&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="css/html" scheme="http://yoursite.com/categories/css-html/"/>
    
    
      <category term="scss基本使用" scheme="http://yoursite.com/tags/scss%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
</feed>
